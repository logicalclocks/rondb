# syntax=docker/dockerfile:1.4

# This Dockerfile is used for x86 production builds. Oracle Linux 9 comes with glibc 2.34,
# which is supported by all Linux distributions used by Hopsworks: CentOS >=9 and Ubuntu >=22.
# Glibc tends to be backwards compatible, but not forwards compatible.

FROM oraclelinux:9 as rondb-build-dependencies

ARG CMAKE_VERSION=3.23.2
ARG OPENSSL_ROOT=system
ARG BOOST_VERSION_MAJOR=1
ARG BOOST_VERSION_MINOR=77
ARG BOOST_VERSION_PATCH=0
ARG GO_VERSION=1.20.3
ARG JSONCPP_VERSION=1.9.5

# Default build threads to 1; max is defined in Docker config (run `nproc` in Docker container)
ARG BUILD_THREADS
ENV THREADS_ARG=${BUILD_THREADS:-1}

# RonDB 22.10 requires gcc/g++ 11/12 for amd64/arm64 respectively.
# We will not remove the default installation, but change the default
# one using software collections (scl).
# To use the required version, the command
#   >> source scl_source enable gcc-toolset-12
# is run in the given RUN statement. Unfortunately, this command
# does not persist between RUN statements.
ARG TARGETARCH

COPY <<-"EOF" /etc/yum/repos.d/epel-yum-ol9.repo
[ol9_epel]
name=Oracle Linux $releasever EPEL ($basearch)
baseurl=http://yum.oracle.com/repo/OracleLinux/OL9/developer/EPEL/$basearch/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
gpgcheck=1
enabled=1
[ol9_codeready_builder]
name=Oracle Linux 9 CodeReady Builder (\$basearch) - Unsupported
baseurl=http://yum.oracle.com/repo/OracleLinux/OL9/codeready/builder/$basearch/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
gpgcheck=1
enabled=1
EOF

RUN --mount=type=cache,target=/var/cache/yum,id=oracle9-yum \
    ulimit -n 1024000 && \ 
    yum -y update

RUN --mount=type=cache,target=/var/cache/yum,id=oracle9-yum \
    ulimit -n 1024000 && \ 
    yum -y install gcc-toolset-12 maven rpcgen

RUN --mount=type=cache,target=/var/cache/yum,id=oracle9-yum \
    ulimit -n 1024000 && \ 
    yum -y install make wget git which perl-core zlib-devel scl-utils

# Creating a cache dir for downloads to avoid redownloading
ENV DOWNLOADS_CACHE_DIR=/tmp/downloads
RUN mkdir $DOWNLOADS_CACHE_DIR

#https://github.com/docker/buildx/issues/379
RUN --mount=type=cache,target=/var/cache/yum,id=oracle9-yum \
    ulimit -n 1024000 && \ 
    yum -y install openssl-devel openldap-devel

RUN --mount=type=cache,target=/var/cache/yum,id=oracle9-yum \
    ulimit -n 1024000 && \ 
    yum -y install \
    bison krb5-server krb5-workstation krb5-devel \
    numactl numactl-libs numactl-devel \
    uuid-devel libudev-devel doxygen \
    patchelf ncurses-devel java-1.8.0-openjdk-devel automake \
    vim pigz hostname libtirpc-devel

# Installing Boost
ENV BOOST_VERSION=${BOOST_VERSION_MAJOR}.${BOOST_VERSION_MINOR}.${BOOST_VERSION_PATCH}
ENV BOOST_V_UNDERSCORE=${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}_${BOOST_VERSION_PATCH}
ENV BOOST_LABEL="boost_${BOOST_V_UNDERSCORE}"
ENV BOOST_TARBALL="${BOOST_LABEL}.tar.gz"
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
        https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_TARBALL} \
    && tar xzf $DOWNLOADS_CACHE_DIR/${BOOST_TARBALL} -C .
# Important env variable for RonDB compilation
ENV BOOST_ROOT="/${BOOST_LABEL}"

# Installing CMake
# CMake will look for $OPENSSL_ROOT_DIR
#ENV OPENSSL_ROOT_DIR=$OPENSSL_ROOT
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    source scl_source enable gcc-toolset-12 \
    && wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
        https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz \
    && tar xzf $DOWNLOADS_CACHE_DIR/cmake-$CMAKE_VERSION.tar.gz -C . \
    && cd cmake-${CMAKE_VERSION} \
    && ./bootstrap --prefix=/usr/local \
    && make -j$THREADS_ARG \
    && make install \
    && cd .. \
    && rm -r cmake-${CMAKE_VERSION}

# Install specific Go version
ENV GO_TAR_NAME=go$GO_VERSION.linux-$TARGETARCH.tar.gz
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR https://golang.org/dl/$GO_TAR_NAME && \
    tar -C /usr/local -xzf $DOWNLOADS_CACHE_DIR/$GO_TAR_NAME

ENV PATH=$PATH:/usr/local/go/bin
ENV OPENSSL_ROOT=system

WORKDIR /root

RUN echo "source scl_source enable gcc-toolset-12" >> /root/.bashrc

# For the deployment of Java artifacts to the Maven repository
COPY <<-"EOF" /root/.m2/settings.xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
        <server>
            <id>${JenkinsHops.RepoID}</id>
            <username>${JenkinsHops.User}</username>
            <filePermissions>664</filePermissions>
            <directoryPermissions>775</directoryPermissions>
            <password>${JenkinsHops.Password}</password>
        </server>
    </servers>
</settings>
EOF

# install updated jsoncpp
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
    https://github.com/open-source-parsers/jsoncpp/archive/refs/tags/$JSONCPP_VERSION.tar.gz \
    && tar xf $DOWNLOADS_CACHE_DIR/$JSONCPP_VERSION.tar.gz -C . \
    && source scl_source enable gcc-toolset-12 \
    && ls -al  \
    && cd jsoncpp-$JSONCPP_VERSION \
    && mkdir build \
    && cd build \
    && cmake -DCMAKE_BUILD_TYPE=release -DBUILD_SHARED_LIBS=ON -DARCHIVE_INSTALL_DIR=. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include/jsoncpp .. \
    && make -j$THREADS_ARG  \
    && make install \
    && cd ../.. \
    && rm -rf jsoncpp-$JSONCPP_VERSION $JSONCPP_VERSION.tar.gz

# See https://stackoverflow.com/a/51264575/9068781 for conditional envs
FROM rondb-build-dependencies as build-all

ARG DEPLOY_TO_REPO
ENV DEPLOY_ARG=${DEPLOY_TO_REPO:+-d}

ARG RELEASE_TARBALL
ENV RELEASE_ARG=${RELEASE_TARBALL:+-r}

ARG RELEASE_FINAL_CLUSTERJ
ENV RELEASE_FINAL_CLUSTERJ_ARG=${RELEASE_FINAL_CLUSTERJ:+-f}

ARG IS_PUBLIC_RELEASE
ENV IS_PUBLIC_RELEASE_ARG=${IS_PUBLIC_RELEASE:+-p}

RUN mkdir rondb-src rondb-bin rondb-tarball
RUN --mount=type=bind,source=.,target=rondb-src,readonly=false \
    --mount=type=cache,target=rondb-bin,id=oracle9-rondb2210-bin \
    source scl_source enable gcc-toolset-12 \
    && rondb-src/build_scripts/release_scripts/build_all.sh \
    -s rondb-src \
    -b rondb-bin \
    -o rondb-tarball \
    -j $THREADS_ARG \
    $DEPLOY_ARG $RELEASE_ARG \
    $RELEASE_FINAL_CLUSTERJ_ARG \
    $IS_PUBLIC_RELEASE_ARG


# run with --output <output-folder>
FROM scratch AS get-package-all
COPY --from=build-all /root/rondb-tarball .

##################################
# Intermediate Image for RDRS ####
##################################

FROM oraclelinux:9 AS rdrs-intermediate

ENV MYSQL_HOME=/srv/hops/mysql
ENV MYSQL_CONF=/srv/hops/mysql-cluster

RUN mkdir -p  $MYSQL_HOME && \
    mkdir -p  $MYSQL_HOME/bin && \
    mkdir -p  $MYSQL_HOME/lib && \
    mkdir -p  $MYSQL_HOME/lib/private && \
    mkdir -p  $MYSQL_CONF && \
    mkdir -p  $MYSQL_CONF/log 

WORKDIR /root
COPY --from=build-all /root/rondb-tarball .

RUN --mount=type=bind,source=.,target=rondb-src \
   mkdir distro && \
   tar xzf *.tar.gz -C distro --strip-components=1 && \
   cp distro/bin/rdrs $MYSQL_HOME/bin && \
   cp distro/lib/libndbclient.so.6.1.0 $MYSQL_HOME/lib/ && \
   cp distro/lib/librdrclient.so $MYSQL_HOME/lib/ && \
   cp distro/lib/private/libcrypto.so.3 $MYSQL_HOME/lib/private && \
   cp distro/lib/private/libssl.so.3 $MYSQL_HOME/lib/private && \
   cp rondb-src/storage/ndb/rest-server/rest-api-server/resources/config/config_for_docker_image.json $MYSQL_CONF/rdrs_config.json

##################################
#       RDRS Image               #
##################################

FROM oraclelinux:9-slim AS rdrs

COPY --from=rdrs-intermediate /srv /srv

# Add RonDB libs to system path
COPY <<-"EOF" /etc/ld.so.conf.d/rondb.conf
/srv/hops/mysql/lib
/srv/hops/mysql/lib/private
EOF
RUN ldconfig -v

# Also setting LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/srv/hops/mysql/lib:/srv/hops/mysql/lib/private

CMD ["/srv/hops/mysql/bin/rdrs", "-config", "/srv/hops/mysql-cluster/rdrs_config.json"]



