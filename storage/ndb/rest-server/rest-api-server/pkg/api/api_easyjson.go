// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	dal "hopsworks.ai/rdrs/internal/dal"
	heap "hopsworks.ai/rdrs/internal/dal/heap"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi(in *jlexer.Lexer, out *ronDBRESTClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi(out *jwriter.Writer, in ronDBRESTClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ronDBRESTClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ronDBRESTClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ronDBRESTClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ronDBRESTClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi1(in *jlexer.Lexer, out *UnimplementedRonDBRESTServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi1(out *jwriter.Writer, in UnimplementedRonDBRESTServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnimplementedRonDBRESTServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnimplementedRonDBRESTServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnimplementedRonDBRESTServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnimplementedRonDBRESTServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi1(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi2(in *jlexer.Lexer, out *StatResponseProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MemoryStats":
			if in.IsNull() {
				in.Skip()
				out.MemoryStats = nil
			} else {
				if out.MemoryStats == nil {
					out.MemoryStats = new(MemoryStatsProto)
				}
				(*out.MemoryStats).UnmarshalEasyJSON(in)
			}
		case "RonDBStats":
			if in.IsNull() {
				in.Skip()
				out.RonDBStats = nil
			} else {
				if out.RonDBStats == nil {
					out.RonDBStats = new(RonDBStatsProto)
				}
				(*out.RonDBStats).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi2(out *jwriter.Writer, in StatResponseProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MemoryStats != nil {
		const prefix string = ",\"MemoryStats\":"
		first = false
		out.RawString(prefix[1:])
		(*in.MemoryStats).MarshalEasyJSON(out)
	}
	if in.RonDBStats != nil {
		const prefix string = ",\"RonDBStats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RonDBStats).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatResponseProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatResponseProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatResponseProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatResponseProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi2(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi3(in *jlexer.Lexer, out *StatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MemoryStats":
			easyjsonC1cedd36DecodeHopsworksAiRdrsInternalDalHeap(in, &out.MemoryStats)
		case "RonDBStats":
			easyjsonC1cedd36DecodeHopsworksAiRdrsInternalDal(in, &out.RonDBStats)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi3(out *jwriter.Writer, in StatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MemoryStats\":"
		out.RawString(prefix[1:])
		easyjsonC1cedd36EncodeHopsworksAiRdrsInternalDalHeap(out, in.MemoryStats)
	}
	{
		const prefix string = ",\"RonDBStats\":"
		out.RawString(prefix)
		easyjsonC1cedd36EncodeHopsworksAiRdrsInternalDal(out, in.RonDBStats)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi3(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsInternalDal(in *jlexer.Lexer, out *dal.RonDBStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NdbObjectsCreationCount":
			out.NdbObjectsCreationCount = int64(in.Int64())
		case "NdbObjectsDeletionCount":
			out.NdbObjectsDeletionCount = int64(in.Int64())
		case "NdbObjectsTotalCount":
			out.NdbObjectsTotalCount = int64(in.Int64())
		case "NdbObjectsFreeCount":
			out.NdbObjectsFreeCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsInternalDal(out *jwriter.Writer, in dal.RonDBStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NdbObjectsCreationCount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.NdbObjectsCreationCount))
	}
	{
		const prefix string = ",\"NdbObjectsDeletionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NdbObjectsDeletionCount))
	}
	{
		const prefix string = ",\"NdbObjectsTotalCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NdbObjectsTotalCount))
	}
	{
		const prefix string = ",\"NdbObjectsFreeCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NdbObjectsFreeCount))
	}
	out.RawByte('}')
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsInternalDalHeap(in *jlexer.Lexer, out *heap.MemoryStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllocationsCount":
			out.AllocationsCount = int64(in.Int64())
		case "DeallocationsCount":
			out.DeallocationsCount = int64(in.Int64())
		case "BuffersCount":
			out.BuffersCount = int64(in.Int64())
		case "FreeBuffers":
			out.FreeBuffers = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsInternalDalHeap(out *jwriter.Writer, in heap.MemoryStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AllocationsCount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AllocationsCount))
	}
	{
		const prefix string = ",\"DeallocationsCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeallocationsCount))
	}
	{
		const prefix string = ",\"BuffersCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuffersCount))
	}
	{
		const prefix string = ",\"FreeBuffers\":"
		out.RawString(prefix)
		out.Int64(int64(in.FreeBuffers))
	}
	out.RawByte('}')
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi4(in *jlexer.Lexer, out *StatRequestProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi4(out *jwriter.Writer, in StatRequestProto) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatRequestProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatRequestProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatRequestProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatRequestProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi4(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi5(in *jlexer.Lexer, out *StatRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi5(out *jwriter.Writer, in StatRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi5(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi6(in *jlexer.Lexer, out *RonDBStatsProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NdbObjectsCreationCount":
			if in.IsNull() {
				in.Skip()
				out.NdbObjectsCreationCount = nil
			} else {
				if out.NdbObjectsCreationCount == nil {
					out.NdbObjectsCreationCount = new(int64)
				}
				*out.NdbObjectsCreationCount = int64(in.Int64())
			}
		case "NdbObjectsDeletionCount":
			if in.IsNull() {
				in.Skip()
				out.NdbObjectsDeletionCount = nil
			} else {
				if out.NdbObjectsDeletionCount == nil {
					out.NdbObjectsDeletionCount = new(int64)
				}
				*out.NdbObjectsDeletionCount = int64(in.Int64())
			}
		case "NdbObjectsTotalCount":
			if in.IsNull() {
				in.Skip()
				out.NdbObjectsTotalCount = nil
			} else {
				if out.NdbObjectsTotalCount == nil {
					out.NdbObjectsTotalCount = new(int64)
				}
				*out.NdbObjectsTotalCount = int64(in.Int64())
			}
		case "NdbObjectsFreeCount":
			if in.IsNull() {
				in.Skip()
				out.NdbObjectsFreeCount = nil
			} else {
				if out.NdbObjectsFreeCount == nil {
					out.NdbObjectsFreeCount = new(int64)
				}
				*out.NdbObjectsFreeCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi6(out *jwriter.Writer, in RonDBStatsProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NdbObjectsCreationCount != nil {
		const prefix string = ",\"NdbObjectsCreationCount\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.NdbObjectsCreationCount))
	}
	if in.NdbObjectsDeletionCount != nil {
		const prefix string = ",\"NdbObjectsDeletionCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.NdbObjectsDeletionCount))
	}
	if in.NdbObjectsTotalCount != nil {
		const prefix string = ",\"NdbObjectsTotalCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.NdbObjectsTotalCount))
	}
	if in.NdbObjectsFreeCount != nil {
		const prefix string = ",\"NdbObjectsFreeCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.NdbObjectsFreeCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RonDBStatsProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RonDBStatsProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RonDBStatsProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RonDBStatsProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi6(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi7(in *jlexer.Lexer, out *ReadColumnProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Column":
			if in.IsNull() {
				in.Skip()
				out.Column = nil
			} else {
				if out.Column == nil {
					out.Column = new(string)
				}
				*out.Column = string(in.String())
			}
		case "DataReturnType":
			if in.IsNull() {
				in.Skip()
				out.DataReturnType = nil
			} else {
				if out.DataReturnType == nil {
					out.DataReturnType = new(string)
				}
				*out.DataReturnType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi7(out *jwriter.Writer, in ReadColumnProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Column != nil {
		const prefix string = ",\"Column\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Column))
	}
	if in.DataReturnType != nil {
		const prefix string = ",\"DataReturnType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DataReturnType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadColumnProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadColumnProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadColumnProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadColumnProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi7(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi8(in *jlexer.Lexer, out *ReadColumn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ColumnSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "column":
			if in.IsNull() {
				in.Skip()
				out.Column = nil
			} else {
				if out.Column == nil {
					out.Column = new(string)
				}
				*out.Column = string(in.String())
			}
			ColumnSet = true
		case "dataReturnType":
			if in.IsNull() {
				in.Skip()
				out.DataReturnType = nil
			} else {
				if out.DataReturnType == nil {
					out.DataReturnType = new(string)
				}
				*out.DataReturnType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ColumnSet {
		in.AddError(fmt.Errorf("key 'column' is required"))
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi8(out *jwriter.Writer, in ReadColumn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"column\":"
		out.RawString(prefix[1:])
		if in.Column == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Column))
		}
	}
	{
		const prefix string = ",\"dataReturnType\":"
		out.RawString(prefix)
		if in.DataReturnType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DataReturnType))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadColumn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadColumn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadColumn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadColumn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi8(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi9(in *jlexer.Lexer, out *PKTestInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PkReq":
			(out.PkReq).UnmarshalEasyJSON(in)
		case "Table":
			out.Table = string(in.String())
		case "Db":
			out.Db = string(in.String())
		case "HttpCode":
			out.HttpCode = int(in.Int())
		case "ErrMsgContains":
			out.ErrMsgContains = string(in.String())
		case "RespKVs":
			if in.IsNull() {
				in.Skip()
				out.RespKVs = nil
			} else {
				in.Delim('[')
				if out.RespKVs == nil {
					if !in.IsDelim(']') {
						out.RespKVs = make([]interface{}, 0, 4)
					} else {
						out.RespKVs = []interface{}{}
					}
				} else {
					out.RespKVs = (out.RespKVs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.RespKVs = append(out.RespKVs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi9(out *jwriter.Writer, in PKTestInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PkReq\":"
		out.RawString(prefix[1:])
		(in.PkReq).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Table\":"
		out.RawString(prefix)
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"Db\":"
		out.RawString(prefix)
		out.String(string(in.Db))
	}
	{
		const prefix string = ",\"HttpCode\":"
		out.RawString(prefix)
		out.Int(int(in.HttpCode))
	}
	{
		const prefix string = ",\"ErrMsgContains\":"
		out.RawString(prefix)
		out.String(string(in.ErrMsgContains))
	}
	{
		const prefix string = ",\"RespKVs\":"
		out.RawString(prefix)
		if in.RespKVs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.RespKVs {
				if v2 > 0 {
					out.RawByte(',')
				}
				if m, ok := v3.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKTestInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKTestInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKTestInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKTestInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi9(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi10(in *jlexer.Lexer, out *PKReadResponseWithCodeJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(int32)
				}
				*out.Code = int32(in.Int32())
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(PKReadResponseJSON)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi10(out *jwriter.Writer, in PKReadResponseWithCodeJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		if in.Code == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Code))
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadResponseWithCodeJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadResponseWithCodeJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadResponseWithCodeJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadResponseWithCodeJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi10(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi11(in *jlexer.Lexer, out *PKReadResponseWithCodeGRPC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(int32)
				}
				*out.Code = int32(in.Int32())
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(PKReadResponseGRPC)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi11(out *jwriter.Writer, in PKReadResponseWithCodeGRPC) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		if in.Code == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Code))
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadResponseWithCodeGRPC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadResponseWithCodeGRPC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadResponseWithCodeGRPC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadResponseWithCodeGRPC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi11(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi12(in *jlexer.Lexer, out *PKReadResponseProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OperationID":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(int32)
				}
				*out.Code = int32(in.Int32())
			}
		case "Data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]*ColumnValueProto)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *ColumnValueProto
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ColumnValueProto)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					(out.Data)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi12(out *jwriter.Writer, in PKReadResponseProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OperationID != nil {
		const prefix string = ",\"OperationID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.OperationID))
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Code))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Data {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if v5Value == nil {
					out.RawString("null")
				} else {
					(*v5Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadResponseProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadResponseProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadResponseProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadResponseProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi12(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi13(in *jlexer.Lexer, out *PKReadResponseJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationId":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(map[string]*json.RawMessage)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Data = make(map[string]*json.RawMessage)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v6 *json.RawMessage
						if in.IsNull() {
							in.Skip()
							v6 = nil
						} else {
							if v6 == nil {
								v6 = new(json.RawMessage)
							}
							if data := in.Raw(); in.Ok() {
								in.AddError((*v6).UnmarshalJSON(data))
							}
						}
						(*out.Data)[key] = v6
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi13(out *jwriter.Writer, in PKReadResponseJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"operationId\":"
		out.RawString(prefix[1:])
		if in.OperationID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OperationID))
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			if *in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v7First := true
				for v7Name, v7Value := range *in.Data {
					if v7First {
						v7First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v7Name))
					out.RawByte(':')
					if v7Value == nil {
						out.RawString("null")
					} else {
						out.Raw((*v7Value).MarshalJSON())
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadResponseJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadResponseJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadResponseJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadResponseJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi13(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi14(in *jlexer.Lexer, out *PKReadResponseGRPC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationId":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(map[string]*string)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Data = make(map[string]*string)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v8 *string
						if in.IsNull() {
							in.Skip()
							v8 = nil
						} else {
							if v8 == nil {
								v8 = new(string)
							}
							*v8 = string(in.String())
						}
						(*out.Data)[key] = v8
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi14(out *jwriter.Writer, in PKReadResponseGRPC) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"operationId\":"
		out.RawString(prefix[1:])
		if in.OperationID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OperationID))
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			if *in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v9First := true
				for v9Name, v9Value := range *in.Data {
					if v9First {
						v9First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v9Name))
					out.RawByte(':')
					if v9Value == nil {
						out.RawString("null")
					} else {
						out.String(string(*v9Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadResponseGRPC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadResponseGRPC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadResponseGRPC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadResponseGRPC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi14(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi15(in *jlexer.Lexer, out *PKReadRequestProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DB":
			if in.IsNull() {
				in.Skip()
				out.DB = nil
			} else {
				if out.DB == nil {
					out.DB = new(string)
				}
				*out.DB = string(in.String())
			}
		case "Table":
			if in.IsNull() {
				in.Skip()
				out.Table = nil
			} else {
				if out.Table == nil {
					out.Table = new(string)
				}
				*out.Table = string(in.String())
			}
		case "Filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]*FilterProto, 0, 8)
					} else {
						out.Filters = []*FilterProto{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *FilterProto
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(FilterProto)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Filters = append(out.Filters, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReadColumns":
			if in.IsNull() {
				in.Skip()
				out.ReadColumns = nil
			} else {
				in.Delim('[')
				if out.ReadColumns == nil {
					if !in.IsDelim(']') {
						out.ReadColumns = make([]*ReadColumnProto, 0, 8)
					} else {
						out.ReadColumns = []*ReadColumnProto{}
					}
				} else {
					out.ReadColumns = (out.ReadColumns)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *ReadColumnProto
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(ReadColumnProto)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.ReadColumns = append(out.ReadColumns, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OperationID":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi15(out *jwriter.Writer, in PKReadRequestProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DB != nil {
		const prefix string = ",\"DB\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.DB))
	}
	if in.Table != nil {
		const prefix string = ",\"Table\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Table))
	}
	if len(in.Filters) != 0 {
		const prefix string = ",\"Filters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Filters {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ReadColumns) != 0 {
		const prefix string = ",\"ReadColumns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.ReadColumns {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.OperationID != nil {
		const prefix string = ",\"OperationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OperationID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadRequestProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadRequestProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadRequestProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadRequestProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi15(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi16(in *jlexer.Lexer, out *PKReadParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			if in.IsNull() {
				in.Skip()
				out.DB = nil
			} else {
				if out.DB == nil {
					out.DB = new(string)
				}
				*out.DB = string(in.String())
			}
		case "table":
			if in.IsNull() {
				in.Skip()
				out.Table = nil
			} else {
				if out.Table == nil {
					out.Table = new(string)
				}
				*out.Table = string(in.String())
			}
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				if out.Filters == nil {
					out.Filters = new([]Filter)
				}
				if in.IsNull() {
					in.Skip()
					*out.Filters = nil
				} else {
					in.Delim('[')
					if *out.Filters == nil {
						if !in.IsDelim(']') {
							*out.Filters = make([]Filter, 0, 4)
						} else {
							*out.Filters = []Filter{}
						}
					} else {
						*out.Filters = (*out.Filters)[:0]
					}
					for !in.IsDelim(']') {
						var v16 Filter
						(v16).UnmarshalEasyJSON(in)
						*out.Filters = append(*out.Filters, v16)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "readColumns":
			if in.IsNull() {
				in.Skip()
				out.ReadColumns = nil
			} else {
				if out.ReadColumns == nil {
					out.ReadColumns = new([]ReadColumn)
				}
				if in.IsNull() {
					in.Skip()
					*out.ReadColumns = nil
				} else {
					in.Delim('[')
					if *out.ReadColumns == nil {
						if !in.IsDelim(']') {
							*out.ReadColumns = make([]ReadColumn, 0, 4)
						} else {
							*out.ReadColumns = []ReadColumn{}
						}
					} else {
						*out.ReadColumns = (*out.ReadColumns)[:0]
					}
					for !in.IsDelim(']') {
						var v17 ReadColumn
						(v17).UnmarshalEasyJSON(in)
						*out.ReadColumns = append(*out.ReadColumns, v17)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "operationId":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi16(out *jwriter.Writer, in PKReadParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"db\":"
		out.RawString(prefix[1:])
		if in.DB == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DB))
		}
	}
	{
		const prefix string = ",\"table\":"
		out.RawString(prefix)
		if in.Table == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Table))
		}
	}
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix)
		if in.Filters == nil {
			out.RawString("null")
		} else {
			if *in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v18, v19 := range *in.Filters {
					if v18 > 0 {
						out.RawByte(',')
					}
					(v19).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"readColumns\":"
		out.RawString(prefix)
		if in.ReadColumns == nil {
			out.RawString("null")
		} else {
			if *in.ReadColumns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v20, v21 := range *in.ReadColumns {
					if v20 > 0 {
						out.RawByte(',')
					}
					(v21).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"operationId\":"
		out.RawString(prefix)
		if in.OperationID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OperationID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi16(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi17(in *jlexer.Lexer, out *PKReadPP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			if in.IsNull() {
				in.Skip()
				out.DB = nil
			} else {
				if out.DB == nil {
					out.DB = new(string)
				}
				*out.DB = string(in.String())
			}
		case "table":
			if in.IsNull() {
				in.Skip()
				out.Table = nil
			} else {
				if out.Table == nil {
					out.Table = new(string)
				}
				*out.Table = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi17(out *jwriter.Writer, in PKReadPP) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"db\":"
		out.RawString(prefix[1:])
		if in.DB == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DB))
		}
	}
	{
		const prefix string = ",\"table\":"
		out.RawString(prefix)
		if in.Table == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Table))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadPP) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadPP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadPP) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadPP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi17(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi18(in *jlexer.Lexer, out *PKReadBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var FiltersSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				if out.Filters == nil {
					out.Filters = new([]Filter)
				}
				if in.IsNull() {
					in.Skip()
					*out.Filters = nil
				} else {
					in.Delim('[')
					if *out.Filters == nil {
						if !in.IsDelim(']') {
							*out.Filters = make([]Filter, 0, 4)
						} else {
							*out.Filters = []Filter{}
						}
					} else {
						*out.Filters = (*out.Filters)[:0]
					}
					for !in.IsDelim(']') {
						var v22 Filter
						(v22).UnmarshalEasyJSON(in)
						*out.Filters = append(*out.Filters, v22)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
			FiltersSet = true
		case "readColumns":
			if in.IsNull() {
				in.Skip()
				out.ReadColumns = nil
			} else {
				if out.ReadColumns == nil {
					out.ReadColumns = new([]ReadColumn)
				}
				if in.IsNull() {
					in.Skip()
					*out.ReadColumns = nil
				} else {
					in.Delim('[')
					if *out.ReadColumns == nil {
						if !in.IsDelim(']') {
							*out.ReadColumns = make([]ReadColumn, 0, 4)
						} else {
							*out.ReadColumns = []ReadColumn{}
						}
					} else {
						*out.ReadColumns = (*out.ReadColumns)[:0]
					}
					for !in.IsDelim(']') {
						var v23 ReadColumn
						(v23).UnmarshalEasyJSON(in)
						*out.ReadColumns = append(*out.ReadColumns, v23)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "operationId":
			if in.IsNull() {
				in.Skip()
				out.OperationID = nil
			} else {
				if out.OperationID == nil {
					out.OperationID = new(string)
				}
				*out.OperationID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !FiltersSet {
		in.AddError(fmt.Errorf("key 'filters' is required"))
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi18(out *jwriter.Writer, in PKReadBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix[1:])
		if in.Filters == nil {
			out.RawString("null")
		} else {
			if *in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v24, v25 := range *in.Filters {
					if v24 > 0 {
						out.RawByte(',')
					}
					(v25).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
	}
	if in.ReadColumns != nil {
		const prefix string = ",\"readColumns\":"
		out.RawString(prefix)
		if *in.ReadColumns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range *in.ReadColumns {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.OperationID != nil {
		const prefix string = ",\"operationId\":"
		out.RawString(prefix)
		out.String(string(*in.OperationID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PKReadBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PKReadBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PKReadBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PKReadBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi18(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi19(in *jlexer.Lexer, out *MemoryStatsProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllocationsCount":
			if in.IsNull() {
				in.Skip()
				out.AllocationsCount = nil
			} else {
				if out.AllocationsCount == nil {
					out.AllocationsCount = new(int64)
				}
				*out.AllocationsCount = int64(in.Int64())
			}
		case "DeallocationsCount":
			if in.IsNull() {
				in.Skip()
				out.DeallocationsCount = nil
			} else {
				if out.DeallocationsCount == nil {
					out.DeallocationsCount = new(int64)
				}
				*out.DeallocationsCount = int64(in.Int64())
			}
		case "BuffersCount":
			if in.IsNull() {
				in.Skip()
				out.BuffersCount = nil
			} else {
				if out.BuffersCount == nil {
					out.BuffersCount = new(int64)
				}
				*out.BuffersCount = int64(in.Int64())
			}
		case "FreeBuffers":
			if in.IsNull() {
				in.Skip()
				out.FreeBuffers = nil
			} else {
				if out.FreeBuffers == nil {
					out.FreeBuffers = new(int64)
				}
				*out.FreeBuffers = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi19(out *jwriter.Writer, in MemoryStatsProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllocationsCount != nil {
		const prefix string = ",\"AllocationsCount\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.AllocationsCount))
	}
	if in.DeallocationsCount != nil {
		const prefix string = ",\"DeallocationsCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DeallocationsCount))
	}
	if in.BuffersCount != nil {
		const prefix string = ",\"BuffersCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.BuffersCount))
	}
	if in.FreeBuffers != nil {
		const prefix string = ",\"FreeBuffers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FreeBuffers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryStatsProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryStatsProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryStatsProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryStatsProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi19(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi20(in *jlexer.Lexer, out *FilterProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Column":
			if in.IsNull() {
				in.Skip()
				out.Column = nil
			} else {
				if out.Column == nil {
					out.Column = new(string)
				}
				*out.Column = string(in.String())
			}
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi20(out *jwriter.Writer, in FilterProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Column != nil {
		const prefix string = ",\"Column\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Column))
	}
	if in.Value != nil {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilterProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilterProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilterProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilterProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi20(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi21(in *jlexer.Lexer, out *Filter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ColumnSet bool
	var ValueSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "column":
			if in.IsNull() {
				in.Skip()
				out.Column = nil
			} else {
				if out.Column == nil {
					out.Column = new(string)
				}
				*out.Column = string(in.String())
			}
			ColumnSet = true
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Value).UnmarshalJSON(data))
				}
			}
			ValueSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ColumnSet {
		in.AddError(fmt.Errorf("key 'column' is required"))
	}
	if !ValueSet {
		in.AddError(fmt.Errorf("key 'value' is required"))
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi21(out *jwriter.Writer, in Filter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"column\":"
		out.RawString(prefix[1:])
		if in.Column == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Column))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Value).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Filter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Filter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Filter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Filter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi21(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi22(in *jlexer.Lexer, out *Empty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi22(out *jwriter.Writer, in Empty) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Empty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Empty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Empty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Empty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi22(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi23(in *jlexer.Lexer, out *ColumnValueProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi23(out *jwriter.Writer, in ColumnValueProto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ColumnValueProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ColumnValueProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ColumnValueProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ColumnValueProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi23(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi24(in *jlexer.Lexer, out *Column) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Value).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi24(out *jwriter.Writer, in Column) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Value).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Column) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Column) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Column) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Column) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi24(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi25(in *jlexer.Lexer, out *BatchSubOperationTestInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SubOperation":
			(out.SubOperation).UnmarshalEasyJSON(in)
		case "Table":
			out.Table = string(in.String())
		case "DB":
			out.DB = string(in.String())
		case "HttpCode":
			if in.IsNull() {
				in.Skip()
				out.HttpCode = nil
			} else {
				in.Delim('[')
				if out.HttpCode == nil {
					if !in.IsDelim(']') {
						out.HttpCode = make([]int, 0, 8)
					} else {
						out.HttpCode = []int{}
					}
				} else {
					out.HttpCode = (out.HttpCode)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int
					v28 = int(in.Int())
					out.HttpCode = append(out.HttpCode, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RespKVs":
			if in.IsNull() {
				in.Skip()
				out.RespKVs = nil
			} else {
				in.Delim('[')
				if out.RespKVs == nil {
					if !in.IsDelim(']') {
						out.RespKVs = make([]interface{}, 0, 4)
					} else {
						out.RespKVs = []interface{}{}
					}
				} else {
					out.RespKVs = (out.RespKVs)[:0]
				}
				for !in.IsDelim(']') {
					var v29 interface{}
					if m, ok := v29.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v29.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v29 = in.Interface()
					}
					out.RespKVs = append(out.RespKVs, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi25(out *jwriter.Writer, in BatchSubOperationTestInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SubOperation\":"
		out.RawString(prefix[1:])
		(in.SubOperation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Table\":"
		out.RawString(prefix)
		out.String(string(in.Table))
	}
	{
		const prefix string = ",\"DB\":"
		out.RawString(prefix)
		out.String(string(in.DB))
	}
	{
		const prefix string = ",\"HttpCode\":"
		out.RawString(prefix)
		if in.HttpCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.HttpCode {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RespKVs\":"
		out.RawString(prefix)
		if in.RespKVs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.RespKVs {
				if v32 > 0 {
					out.RawByte(',')
				}
				if m, ok := v33.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v33.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v33))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchSubOperationTestInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchSubOperationTestInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchSubOperationTestInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchSubOperationTestInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi25(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi26(in *jlexer.Lexer, out *BatchSubOp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var MethodSet bool
	var RelativeURLSet bool
	var BodySet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(string)
				}
				*out.Method = string(in.String())
			}
			MethodSet = true
		case "relative-url":
			if in.IsNull() {
				in.Skip()
				out.RelativeURL = nil
			} else {
				if out.RelativeURL == nil {
					out.RelativeURL = new(string)
				}
				*out.RelativeURL = string(in.String())
			}
			RelativeURLSet = true
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(PKReadBody)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
			BodySet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !MethodSet {
		in.AddError(fmt.Errorf("key 'method' is required"))
	}
	if !RelativeURLSet {
		in.AddError(fmt.Errorf("key 'relative-url' is required"))
	}
	if !BodySet {
		in.AddError(fmt.Errorf("key 'body' is required"))
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi26(out *jwriter.Writer, in BatchSubOp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		if in.Method == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Method))
		}
	}
	{
		const prefix string = ",\"relative-url\":"
		out.RawString(prefix)
		if in.RelativeURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RelativeURL))
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchSubOp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchSubOp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchSubOp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchSubOp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi26(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi27(in *jlexer.Lexer, out *BatchResponseProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "responses":
			if in.IsNull() {
				in.Skip()
				out.Responses = nil
			} else {
				in.Delim('[')
				if out.Responses == nil {
					if !in.IsDelim(']') {
						out.Responses = make([]*PKReadResponseProto, 0, 8)
					} else {
						out.Responses = []*PKReadResponseProto{}
					}
				} else {
					out.Responses = (out.Responses)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *PKReadResponseProto
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(PKReadResponseProto)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Responses = append(out.Responses, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi27(out *jwriter.Writer, in BatchResponseProto) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Responses) != 0 {
		const prefix string = ",\"responses\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v35, v36 := range in.Responses {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchResponseProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchResponseProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchResponseProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchResponseProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi27(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi28(in *jlexer.Lexer, out *BatchResponseJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new([]*PKReadResponseWithCodeJSON)
				}
				if in.IsNull() {
					in.Skip()
					*out.Result = nil
				} else {
					in.Delim('[')
					if *out.Result == nil {
						if !in.IsDelim(']') {
							*out.Result = make([]*PKReadResponseWithCodeJSON, 0, 8)
						} else {
							*out.Result = []*PKReadResponseWithCodeJSON{}
						}
					} else {
						*out.Result = (*out.Result)[:0]
					}
					for !in.IsDelim(']') {
						var v37 *PKReadResponseWithCodeJSON
						if in.IsNull() {
							in.Skip()
							v37 = nil
						} else {
							if v37 == nil {
								v37 = new(PKReadResponseWithCodeJSON)
							}
							(*v37).UnmarshalEasyJSON(in)
						}
						*out.Result = append(*out.Result, v37)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi28(out *jwriter.Writer, in BatchResponseJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		if in.Result == nil {
			out.RawString("null")
		} else {
			if *in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v38, v39 := range *in.Result {
					if v38 > 0 {
						out.RawByte(',')
					}
					if v39 == nil {
						out.RawString("null")
					} else {
						(*v39).MarshalEasyJSON(out)
					}
				}
				out.RawByte(']')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchResponseJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchResponseJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchResponseJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchResponseJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi28(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi29(in *jlexer.Lexer, out *BatchResponseGRPC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new([]*PKReadResponseWithCodeGRPC)
				}
				if in.IsNull() {
					in.Skip()
					*out.Result = nil
				} else {
					in.Delim('[')
					if *out.Result == nil {
						if !in.IsDelim(']') {
							*out.Result = make([]*PKReadResponseWithCodeGRPC, 0, 8)
						} else {
							*out.Result = []*PKReadResponseWithCodeGRPC{}
						}
					} else {
						*out.Result = (*out.Result)[:0]
					}
					for !in.IsDelim(']') {
						var v40 *PKReadResponseWithCodeGRPC
						if in.IsNull() {
							in.Skip()
							v40 = nil
						} else {
							if v40 == nil {
								v40 = new(PKReadResponseWithCodeGRPC)
							}
							(*v40).UnmarshalEasyJSON(in)
						}
						*out.Result = append(*out.Result, v40)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi29(out *jwriter.Writer, in BatchResponseGRPC) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		if in.Result == nil {
			out.RawString("null")
		} else {
			if *in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v41, v42 := range *in.Result {
					if v41 > 0 {
						out.RawByte(',')
					}
					if v42 == nil {
						out.RawString("null")
					} else {
						(*v42).MarshalEasyJSON(out)
					}
				}
				out.RawByte(']')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchResponseGRPC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchResponseGRPC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchResponseGRPC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchResponseGRPC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi29(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi30(in *jlexer.Lexer, out *BatchRequestProto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]*PKReadRequestProto, 0, 8)
					} else {
						out.Operations = []*PKReadRequestProto{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v43 *PKReadRequestProto
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(PKReadRequestProto)
						}
						(*v43).UnmarshalEasyJSON(in)
					}
					out.Operations = append(out.Operations, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi30(out *jwriter.Writer, in BatchRequestProto) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Operations) != 0 {
		const prefix string = ",\"operations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v44, v45 := range in.Operations {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchRequestProto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchRequestProto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchRequestProto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchRequestProto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi30(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi31(in *jlexer.Lexer, out *BatchOperationTestInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]BatchSubOperationTestInfo, 0, 0)
					} else {
						out.Operations = []BatchSubOperationTestInfo{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v46 BatchSubOperationTestInfo
					(v46).UnmarshalEasyJSON(in)
					out.Operations = append(out.Operations, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "HttpCode":
			if in.IsNull() {
				in.Skip()
				out.HttpCode = nil
			} else {
				in.Delim('[')
				if out.HttpCode == nil {
					if !in.IsDelim(']') {
						out.HttpCode = make([]int, 0, 8)
					} else {
						out.HttpCode = []int{}
					}
				} else {
					out.HttpCode = (out.HttpCode)[:0]
				}
				for !in.IsDelim(']') {
					var v47 int
					v47 = int(in.Int())
					out.HttpCode = append(out.HttpCode, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ErrMsgContains":
			out.ErrMsgContains = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi31(out *jwriter.Writer, in BatchOperationTestInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Operations\":"
		out.RawString(prefix[1:])
		if in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Operations {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"HttpCode\":"
		out.RawString(prefix)
		if in.HttpCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.HttpCode {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v51))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ErrMsgContains\":"
		out.RawString(prefix)
		out.String(string(in.ErrMsgContains))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchOperationTestInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchOperationTestInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchOperationTestInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchOperationTestInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi31(l, v)
}
func easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi32(in *jlexer.Lexer, out *BatchOpRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				if out.Operations == nil {
					out.Operations = new([]BatchSubOp)
				}
				if in.IsNull() {
					in.Skip()
					*out.Operations = nil
				} else {
					in.Delim('[')
					if *out.Operations == nil {
						if !in.IsDelim(']') {
							*out.Operations = make([]BatchSubOp, 0, 2)
						} else {
							*out.Operations = []BatchSubOp{}
						}
					} else {
						*out.Operations = (*out.Operations)[:0]
					}
					for !in.IsDelim(']') {
						var v52 BatchSubOp
						(v52).UnmarshalEasyJSON(in)
						*out.Operations = append(*out.Operations, v52)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi32(out *jwriter.Writer, in BatchOpRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"operations\":"
		out.RawString(prefix[1:])
		if in.Operations == nil {
			out.RawString("null")
		} else {
			if *in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v53, v54 := range *in.Operations {
					if v53 > 0 {
						out.RawByte(',')
					}
					(v54).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchOpRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchOpRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeHopsworksAiRdrsPkgApi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchOpRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchOpRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeHopsworksAiRdrsPkgApi32(l, v)
}
