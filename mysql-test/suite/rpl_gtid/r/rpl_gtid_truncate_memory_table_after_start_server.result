include/rpl/init_source_replica.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection master]
CALL mtr.add_suppression("Found 1 prepared XA transactions");
CALL mtr.add_suppression("Statement is unsafe because it is being used inside a XA transaction");
CALL mtr.add_suppression("Statement accesses nontransactional table as well as transactional or temporary table");
CREATE DATABASE db1;
CREATE DATABASE db2;
CREATE TABLE t1(c1 INT);
CREATE TABLE t2(c1 INT);
CREATE TABLE mem_t1(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE mem_t2(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db1.mem_t1(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db1.mem_t2(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db2.mem_t1(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db2.mem_t2(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db2.mem_t3(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db2.mem_t4(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TABLE db2.mem_t5(c1 INT PRIMARY KEY) ENGINE = MEMORY;
CREATE TRIGGER tr1 AFTER INSERT ON t2 FOR EACH ROW
BEGIN
INSERT INTO t1 SELECT * FROM db2.mem_t3;
END |
INSERT INTO mem_t1 VALUES(1),(2),(3);
INSERT INTO mem_t2 VALUES(1),(2),(3);
INSERT INTO db1.mem_t1 VALUES(1),(2),(3);
INSERT INTO db1.mem_t2 VALUES(1),(2),(3);
INSERT INTO db2.mem_t1 VALUES(1),(2),(3);
INSERT INTO db2.mem_t2 VALUES(1),(2),(3);
INSERT INTO db2.mem_t3 VALUES(1),(2),(3);
INSERT INTO db2.mem_t4 VALUES(1),(2),(3);
INSERT INTO db2.mem_t5 VALUES(1),(2),(3);
include/rpl/sync_to_replica.inc
include/rpl/stop_receiver.inc
[connection master]
XA START 'xa1';
INSERT INTO t1 VALUES(1);
XA END 'xa1';
XA PREPARE 'xa1';
include/rpl/save_server_position.inc
include/rpl/restart_server.inc [server_number=1]
[connection slave]
include/rpl/start_receiver.inc
include/rpl/sync_with_saved.inc
#
# Test case 1: verify XA COMMIT can be binlogged correctly.
#
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/save_binlog_file_position.inc
include/rpl/gtid_step_assert.inc [count=3, only_count=0]
include/rpl/assert_binlog_events.inc [#Gtid # !Q(TRUNCATE.*) #Gtid # !Q(TRUNCATE.*)]
include/rpl/sync_to_replica.inc
include/rpl/diff.inc
#
# Test case 2: verify COM_FIELD_LIST can binlog TRUNCATE TABLE mem_xx
#              correctly
#
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/gtid_step_assert.inc [count=2, only_count=0]
include/rpl/sync_to_replica.inc
SELECT * FROM mem_t1;
c1
SELECT * FROM mem_t2;
c1
#
# Test case 3: verify TRUNCATE TABLE mem_xx can be binlogged correctly
#              in CREATE TABLE ... LIKE
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/save_binlog_file_position.inc
CREATE TABLE t3 LIKE db2.mem_t1;
include/rpl/gtid_step_assert.inc [count=2, only_count=0]
include/rpl/assert_binlog_events.inc [#Gtid # !Q(TRUNCATE.*) #Gtid # !Q(CREATE.*)]
include/rpl/sync_to_replica.inc
SELECT * FROM db2.mem_t1;
c1
#
# Test case 4: verify TRUNCATE TABLE mem_xx can be binlogged correctly
#              in DML
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/save_binlog_file_position.inc
INSERT INTO t3 SELECT * FROM db2.mem_t2 UNION SELECT 10;
include/rpl/gtid_step_assert.inc [count=2, only_count=0]
include/rpl/assert_binlog_events.inc [#Gtid # !Q(TRUNCATE.*) #Gtid # !Begin # !Insert # !Commit]
include/rpl/save_binlog_file_position.inc
include/rpl/sync_to_replica.inc
SELECT * FROM db2.mem_t2;
c1
#
# Test case 5: verify TRUNCATE TABLE mem_xx can be binlogged correctly
#              in a trigger
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/save_binlog_file_position.inc
INSERT INTO t2 VALUES(11);
include/rpl/gtid_step_assert.inc [count=2, only_count=0]
include/rpl/assert_binlog_events.inc [#Gtid # !Q(TRUNCATE.*) #Gtid # !Begin]
include/rpl/sync_to_replica.inc
SELECT * FROM db2.mem_t3;
c1
#
# Test case 6: Verify TRUNCATE TABLE mem_xx can be binlog correctly
#              when ALTER the memory table.
[connection master]
include/rpl/gtid_step_reset.inc
include/rpl/save_binlog_file_position.inc
ALTER TABLE db2.mem_t4 ADD COLUMN c2 INT;
include/rpl/gtid_step_assert.inc [count=2, only_count=0]
include/rpl/assert_binlog_events.inc [#Gtid # !Q(TRUNCATE.*) #Gtid # !Q(ALTER.*)]
include/rpl/sync_to_replica.inc
SELECT * FROM db2.mem_t4;
c1	c2
#
# Test case 7: Verify TRUNCATE TABLE mem_xx can be binlog correctly
#              when DROP the memory table.
[connection master]
include/rpl/gtid_step_reset.inc
DROP TABLE db2.mem_t5;
include/rpl/gtid_step_assert.inc [count=1, only_count=0]
include/rpl/sync_to_replica.inc
[connection master]
DROP TABLE t1, t2, t3, mem_t1, mem_t2;
DROP DATABASE db1;
DROP DATABASE db2;
include/rpl/deinit.inc
