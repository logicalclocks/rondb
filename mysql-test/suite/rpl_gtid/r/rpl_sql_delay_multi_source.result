include/rpl/init.inc [topology=1->2,3->2]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server_2]
CHANGE REPLICATION SOURCE TO SOURCE_DELAY= 5 for channel 'channel_1';;
include/rpl/start_replica.inc [FOR CHANNEL 'channel_1']
CHANGE REPLICATION SOURCE TO SOURCE_DELAY= 8 for channel 'channel_3';;
include/rpl/start_replica.inc [FOR CHANNEL 'channel_3']
[connection server_1]
CREATE TABLE t1 (a INT);
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
INSERT INTO t1 VALUES (1);
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
UPDATE t1 SET a=2;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
DELETE FROM t1 WHERE a=2;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
START TRANSACTION;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);
COMMIT;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
DROP TABLE t1;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_1]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_1]
[connection server_3]
CREATE TABLE t2 (a INT);
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
INSERT INTO t2 VALUES (1);
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
UPDATE t2 SET a=2;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
DELETE FROM t2 WHERE a=2;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
START TRANSACTION;
INSERT INTO t2 VALUES (1);
INSERT INTO t2 VALUES (2);
INSERT INTO t2 VALUES (3);
COMMIT;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
DROP TABLE t2;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_3']
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection server_3]
[connection server_2]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection server_3]
[connection server_2]
include/rpl/stop_applier.inc
CHANGE REPLICATION SOURCE TO SOURCE_DELAY= 0 For channel 'channel_1';
CHANGE REPLICATION SOURCE TO SOURCE_DELAY= 0 For channel 'channel_3';
include/rpl/start_applier.inc
include/rpl/deinit.inc
RESET REPLICA ALL FOR CHANNEL 'channel_1';
RESET REPLICA ALL FOR CHANNEL 'channel_3';
