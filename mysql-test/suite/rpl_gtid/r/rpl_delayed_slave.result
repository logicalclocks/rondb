include/rpl/init_source_replica.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection master]
call mtr.add_suppression("Unsafe statement written to the binary log using statement format");
call mtr.add_suppression("Unsafe statement written to the binary log using statement format");
[on master]
CREATE TABLE t1 (a VARCHAR(100), b INT);
INSERT INTO t1 VALUES ("zero", 0);
==== Normal setup ====
[on slave]
include/rpl/sync_to_replica.inc
include/rpl/stop_replica.inc
include/rpl/start_replica.inc
include/assert.inc [SHOW REPLICA STATUS should return the same delay that we set with CHANGE REPLICATION SOURCE]
[on master]
INSERT INTO t1 VALUES ('normal setup', 1);
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
==== Slave lags "naturally" after master ====
[on master]
# CREATE FUNCTION delay_on_slave(time_units INT) RETURNS INT BEGIN IF @@server_id = 2 THEN RETURN SLEEP(time_units * T); ELSE RETURN 0; END IF; END
INSERT INTO t1 SELECT delay_on_slave(3), 2;
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system variable that may have a different value on the replica.
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the replica.
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
INSERT INTO t1 VALUES ('slave is already lagging: this statement should execute immediately', 3);
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
INSERT INTO t1 SELECT delay_on_slave(2), 4;
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system variable that may have a different value on the replica.
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the replica.
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
==== STOP REPLICA / START REPLICA + DML ====
[connection slave]
include/rpl/stop_replica.inc
include/rpl/start_replica.inc
[on master]
INSERT INTO t1 VALUES ('STOP REPLICA and START REPLICA: DML', 5);
[on slave]
include/rpl/stop_replica.inc
include/assert.inc [SQL thread position should not increase after STOP REPLICA]
include/assert.inc [Query should not be executed after STOP REPLICA]
include/assert.inc [Status should be '' after STOP REPLICA]
include/rpl/start_replica.inc
[connection master]
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
==== STOP REPLICA / START REPLICA + DDL ====
This verifies BUG#56442
[on master]
CREATE TABLE t_check_dml_not_executed_prematurely (a INT);
include/rpl/save_server_position.inc
[on slave]
include/rpl/stop_replica.inc
include/assert.inc [SQL thread position should not increase after STOP REPLICA]
include/assert.inc [Query should not be executed after STOP REPLICA]
include/assert.inc [Status should be '' after STOP REPLICA]
include/rpl/start_replica.inc
[connection master]
[connection slave]
include/assert.inc [Assert that the REMAINING_DELAY from performance_schema is same as SQL_Remaining_Delay in the output of show replica status.]
[connection master]
include/rpl/sync_to_replica.inc
include/assert.inc [Status should not be 'Waiting until SOURCE_DELAY seconds after source executed event']
[connection master]
[connection slave]
include/assert.inc [The difference between the immediate_commit_timestamp should be at least the SQL_Delay]
[connection master]
[connection slave]
include/assert.inc [DDL Query should be executed]
include/rpl/assert_replica_running.inc
==== Change back to no delay ====
[on slave]
include/rpl/stop_replica.inc
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = 0;
include/assert.inc [Delay should be 0 when we set it to 0]
==== Reset delay with RESET REPLICA ====
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = 71;
include/rpl/start_replica.inc
include/assert.inc [Delay should be 71 when we set it to 71]
include/rpl/stop_replica.inc
RESET REPLICA;
include/rpl/start_replica.inc
include/assert.inc [Delay should be 0 after RESET REPLICA]
==== Set an invalid value for the delay ====
include/rpl/stop_replica.inc
# Expect error for setting negative delay
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = -1;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '-1' at line 1
# Expect that it's ok to set delay of 2^31-1
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = 2147483647;
# Expect error for setting delay between 2^31 and 2^32-1
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = 2147483648;
ERROR HY000: The requested value 2147483648 for the source delay exceeds the maximum 2147483647
# Expect error for setting delay to nonsense
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = blah;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'blah' at line 1
CHANGE REPLICATION SOURCE TO SOURCE_DELAY = 0;
include/rpl/start_replica.inc
==== Clean up ====
[on master]
DROP TABLE t1, t_check_dml_not_executed_prematurely;
DROP FUNCTION delay_on_slave;
[on slave]
include/rpl/sync_to_replica.inc
include/rpl/deinit.inc
