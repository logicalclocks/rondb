include/rpl/init_source_replica.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection master]
CREATE DATABASE db1;
CREATE DATABASE db2;
CREATE DATABASE db3;
CREATE TABLE db1.t1(c1 INT PRIMARY KEY, c2 CHAR(20));
CREATE TABLE db2.t1(c1 INT PRIMARY KEY, c2 CHAR(20));
CREATE TABLE db3.t1(c1 INT PRIMARY KEY, c2 CHAR(20));
CREATE VIEW db1.v1 AS SELECT * FROM db1.t1 WHERE c1 <= 4;
include/rpl/sync_to_replica.inc
include/rpl/stop_applier.inc
SET @saved_replica_parallel_type = @@GLOBAL.replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET @saved_replica_parallel_workers = @@GLOBAL.replica_parallel_workers;
SET @saved_replica_preserve_commit_order = @@GLOBAL.replica_preserve_commit_order;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET @saved_relay_log_purge = @@GLOBAL.relay_log_purge;
SET GLOBAL innodb_lock_wait_timeout = 1000;
SET GLOBAL relay_log_purge = FALSE;
SET GLOBAL replica_parallel_type = "LOGICAL_CLOCK";
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = 4;
SET GLOBAL replica_preserve_commit_order=0;
[connection slave]
include/rpl/stop_applier.inc
Warnings:
Note	3084	Replication thread(s) for channel '' are already stopped.
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(2, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(2, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(2, 'SOURCE_POS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(6, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(6, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(6, 'SOURCE_POS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL SOURCE_LOG_FILE="SOURCE_LOG_FILE", SOURCE_LOG_POS=SOURCE_LOG_POS;
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
[connection slave]
include/rpl/stop_applier.inc
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(2, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(2, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(2, 'RELAY_POS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(4, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(4, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(4, 'RELAY_POS');
include/rpl/sync_to_replica_received.inc
include/include/rpl/save_relay_log_file_position.inc
[connection master]
INSERT INTO db1.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(6, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(6, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(6, 'RELAY_POS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL RELAY_LOG_FILE="RELAY_LOG_FILE", RELAY_LOG_POS=RELAY_LOG_POS;
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
[connection slave]
include/rpl/stop_applier.inc
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(2, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(2, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(2, 'BEFORE_GTIDS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(4, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(4, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(4, 'BEFORE_GTIDS');
SET @gtids_should_applied = @@GLOBAL.gtid_executed;
INSERT INTO db1.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(6, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(6, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(6, 'BEFORE_GTIDS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL SQL_BEFORE_GTIDS="GTIDS";
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
include/rpl/stop_applier.inc
SET GLOBAL replica_parallel_type = "DATABASE";
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = 4;
SET GLOBAL innodb_lock_wait_timeout = 1000;
SET GLOBAL relay_log_purge = FALSE;
[connection slave]
include/rpl/stop_applier.inc
Warnings:
Note	3084	Replication thread(s) for channel '' are already stopped.
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(2, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(2, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(1, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(2, 'SOURCE_POS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(3, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(4, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db1.t1 VALUES(6, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db2.t1 VALUES(6, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(5, 'SOURCE_POS');
INSERT INTO db3.t1 VALUES(6, 'SOURCE_POS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL SOURCE_LOG_FILE="SOURCE_LOG_FILE", SOURCE_LOG_POS=SOURCE_LOG_POS;
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
[connection slave]
include/rpl/stop_applier.inc
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(2, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(2, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(1, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(2, 'RELAY_POS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(4, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(4, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(3, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(4, 'RELAY_POS');
include/rpl/sync_to_replica_received.inc
include/include/rpl/save_relay_log_file_position.inc
[connection master]
INSERT INTO db1.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db1.t1 VALUES(6, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db2.t1 VALUES(6, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(5, 'RELAY_POS');
INSERT INTO db3.t1 VALUES(6, 'RELAY_POS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL RELAY_LOG_FILE="RELAY_LOG_FILE", RELAY_LOG_POS=RELAY_LOG_POS;
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
[connection slave]
include/rpl/stop_applier.inc
[connection master]
SET debug="d,set_commit_parent_100";
INSERT INTO db1.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(2, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(2, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(1, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(2, 'BEFORE_GTIDS');
FLUSH BINARY LOGS;
INSERT INTO db1.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(4, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(4, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(3, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(4, 'BEFORE_GTIDS');
SET @gtids_should_applied = @@GLOBAL.gtid_executed;
INSERT INTO db1.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db1.t1 VALUES(6, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db2.t1 VALUES(6, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(5, 'BEFORE_GTIDS');
INSERT INTO db3.t1 VALUES(6, 'BEFORE_GTIDS');
include/rpl/save_server_position.inc
[connection server_2]
BEGIN;
INSERT INTO db1.t1 VALUES(4, "block a worker");
[connection slave]
START REPLICA SQL_THREAD UNTIL SQL_BEFORE_GTIDS="GTIDS";
[connection server_2]
ROLLBACK;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
START REPLICA SQL_THREAD UNTIL SAME_UNTIO_OPTION;
include/rpl/wait_for_applier_to_stop.inc
include/diff_tables.inc [master:db1.v1, slave:db1.t1, slave:db2.t1, slave:db3.t1]
include/rpl/start_applier.inc
[connection master]
TRUNCATE db1.t1;
TRUNCATE db2.t1;
TRUNCATE db3.t1;
include/rpl/sync_to_replica.inc
[connection master]
DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE db3;
include/rpl/sync_to_replica.inc
include/rpl/stop_applier.inc
SET GLOBAL replica_parallel_type = @saved_replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = @saved_replica_parallel_workers;
SET GLOBAL replica_preserve_commit_order= @saved_replica_preserve_commit_order;
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET GLOBAL relay_log_purge = @saved_relay_log_purge;
include/rpl/deinit.inc
