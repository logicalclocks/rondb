# ==== Purpose ====
#
# This test will make slave to replicate a partial GTID transaction
# followed by a complete GTID transaction and will restart the slave
# in order to verify that the startup procedure does not add the GTID
# of the partial transaction to the Retrieved_Gtid_Set.
#
# The server and the I/O thread should not add the partial GTID into
# the Retrieved_Gtid_Set nor execute the partial GTID transaction.
#
# The test case will transform a single XID event into an ignorable
# unknown event that will not be written to the slave relay log.
# Because of this, the slave will assume it doesn't
# fully retrieved the transaction and will not count on its GTID.
#
# As before WL#7083 a GTID enabled server cannot apply ANONYMOUS
# transactions, we will let the SQL thread stopped at the slave.
#
# TODO: To enable the SQL thread after WL#7083.
#
# ==== Related Bugs and Worklogs ====
#
# BUG#20400132 TRANSACTION BOUNDARY PARSER SHOULD NOT DEPEND ON GTID_MODE
#

--source include/not_group_replication_plugin.inc
--source include/not_rpl_gtid_only.inc
# This test should run only on debug build
--source include/have_debug.inc
# This test uses debug sync to stop the IO thread in the middle of a transaction
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc

# this test case makes the receiver thread to parse and
# transform events (Xid). These events are enclosed in
# a Transaction_payload event when compression is on.
--source include/not_binlog_transaction_compression_on.inc

--let $rpl_gtid_utils= 1
--source include/rpl/init_source_replica.inc

# Disable slave's auto_positioning
--source include/rpl/connection_replica.inc
--source include/rpl/stop_replica.inc
CHANGE REPLICATION SOURCE TO SOURCE_AUTO_POSITION=0;
--let $use_gtids= 0
call mtr.add_suppression("An unexpected event sequence was detected by the IO thread");
call mtr.add_suppression("GTID_LOG_EVENT.* is not expected in an event stream");
--source include/rpl/start_receiver.inc
# Reset the GTID counter for assertion
--source include/rpl/gtid_step_reset_on_retrieved.inc
# Set slave to transform a Xid event in an ignorable unknown event
--let $debug_point= simulate_unknown_ignorable_log_event_with_xid
--source include/add_debug_point.inc

# Create a table at the master using GTID
--source include/rpl/connection_source.inc
--echo # This should be Source_UUID:1
CREATE TABLE t1 (c1 INT) ENGINE= InnoDB;
--source include/rpl/sync_to_replica_received.inc

# Inserting some data
--source include/rpl/connection_source.inc
--echo # This should be Source_UUID:2,
--echo # but it will not be fully retrieved nor applied on slave
INSERT INTO t1 VALUES (1);

--echo # This should be Source_UUID:3,
# This should not have a XID to avoid the transformation into an
# unknown ignorable event, but it will be at the same binlog/relaylog
# file as the incomplete transaction.
CREATE TABLE t2 (c1 INT) ENGINE=InnoDB;

# Sync slave IO before stopping the slave
--source include/rpl/sync_to_replica_received.inc
--source include/rpl/stop_receiver.inc
--source include/remove_debug_point.inc

# Insert more data on master
--source include/rpl/connection_source.inc
--echo # This should be Source_UUID:4
INSERT INTO t1 VALUES (3);

--source include/rpl/connection_replica.inc
# Restart the slave
--let $rpl_server_number= 2
--source include/rpl/restart_server.inc

# Start replica IO thread and sync slave with master
--source include/rpl/start_receiver.inc
--source include/rpl/connection_source.inc
--source include/rpl/sync_to_replica_received.inc

# Assert that four GTIDs were added to the Retrieved_Gtid_Set
# One additional transaction comes from the fact that position of the
# receiver thread was restored during the relay log sanitization
--let $gtid_step_count= 4
--let $gtid_step_only_count= 1
--source include/rpl/gtid_step_assert_on_retrieved.inc

# Cleanup

# Restore the slave
--source include/rpl/stop_receiver.inc
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
CHANGE REPLICATION SOURCE TO SOURCE_AUTO_POSITION= 1;
--let $use_gtids= 1

# Cleanup the master
--source include/rpl/connection_source.inc
DROP TABLE t1,t2;
RESET BINARY LOGS AND GTIDS;
--source include/rpl/connection_replica.inc
--source include/rpl/start_replica.inc

--source include/rpl/deinit.inc
