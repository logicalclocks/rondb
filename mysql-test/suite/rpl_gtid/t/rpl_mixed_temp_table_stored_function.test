# ==== Purpose ====
#
# In MIXED mode, if a function contains operations on temporary tables
# verify that the function call is binlogged in ROW format.
#
# ==== Implementation ====
#
# 1. Create functions with
#    a. only CREATE TEMPORARY TABLE.
#    b. CREATE TEMPORARY TABLE and DMLs.
# 2. Create functions with
#    a. DMLs on only temporary tables.
#    b. DMLs on temporary tables as well as regular tables.
# 3. Create functions with
#    a. only DROP TEMPORARY TABLE.
#    b. DROP TEMPORARY TABLE and DMLs.
# 4. Call the functions and verify that the function call is written to the
#    binary log in ROW format.
# 5. Verify that CREATE TEMPORARY TABLE with function is written to the
#    binary log in ROW format.
# 6. Verify that a function invoking another function which has temporary table
#    DDL, is binlogged in ROW format.
#    a. Ensure that the function call is logged in STATEMENT format if the
#       function is recreated with no access to temporary tables.
#    b. Verify the same with prepared statements also.
# 7. Verify that a function invoking a procedure that has temporary table DDL is
#    binlogged in ROW format.
# 8. Verify that a Event invoking a stored routine that has temporary table DDL
#    is binlogged in ROW format.
#
# ==== References ====
#
# BUG#30395151: CREATE TEMPORARY TABLE OPERATION WITH FUNCTIONS RECORDED IN BIN LOG
# BUG#28258992: FUNCTION CALL NOT WRITTEN TO BINLOG IF IT CONTAIN DML ALONG WITH DROP TEMP TABLE
# BUG#30320009: ASSERTION TRX_IS_REGISTERED_FOR_2PC(TRX)
# BUG#28220751: REPLICATION BREAKS ON CREATE/DROP TEMPORARY TABLE OPERATION WITHIN FUNCTION(MBR)

--source include/not_group_replication_plugin.inc
--source include/rpl/set_privilege_checks_user_as_system_user.inc
--source include/have_binlog_format_mixed.inc
--source include/rpl/init_source_replica.inc

CREATE TABLE t1 (a INT);

--echo # Function with only CREATE TEMPORARY TABLE.
DELIMITER //;
CREATE FUNCTION create_temp_table() RETURNS INT DETERMINISTIC
BEGIN
CREATE TEMPORARY TABLE temp1 (i INT);
RETURN 1;
END//

--echo # Function with DMLs on temporary tables.
CREATE FUNCTION dmls_on_temp_tables() RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO temp1 VALUES(2);
UPDATE temp1 SET i= 4;
DELETE FROM temp1;
RETURN 1;
END//

--echo # Function with only DROP TEMPORARY TABLE.
CREATE FUNCTION drop_temp_table() RETURNS INT DETERMINISTIC
BEGIN
DROP TEMPORARY TABLE temp1;
RETURN 1;
END//

--echo # Function with CREATE TEMPORARY TABLE and DMLs.
CREATE FUNCTION create_temp_table_with_dmls() RETURNS INT DETERMINISTIC
BEGIN
CREATE TEMPORARY TABLE temp2 (i INT);
INSERT INTO t1 VALUES(1);
INSERT INTO temp2 VALUES(1);
RETURN 2;
END//

--echo # Function with DMLs on temporary tables as well as regular tables.
CREATE FUNCTION dmls_on_temp_and_regular_tables() RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO t1 VALUES(2);
UPDATE t1 SET a= 4;
DELETE FROM t1;
INSERT INTO temp2 VALUES(2);
UPDATE temp2 SET i= 4;
DELETE FROM temp2;
RETURN 2;
END//

--echo # Function with DROP TEMPORARY TABLE and DMLs.
CREATE FUNCTION drop_temp_table_with_dmls() RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO t1 VALUES(3);
INSERT INTO temp2 VALUES(3);
DROP TEMPORARY TABLE temp2;
RETURN 2;
END//
DELIMITER ;//

--echo #
--echo # Verify that a function call is written to binary log in ROW
--echo # format if the function contains operations on temporary tables.
--echo # case1: Function call inside a transaction with ROLLBACK.
--echo #
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
START TRANSACTION;
SELECT create_temp_table();
ROLLBACK;
START TRANSACTION;
SELECT dmls_on_temp_tables();
ROLLBACK;
START TRANSACTION;
SELECT drop_temp_table();
ROLLBACK;
START TRANSACTION;
SELECT create_temp_table_with_dmls();
ROLLBACK;
START TRANSACTION;
SELECT dmls_on_temp_and_regular_tables();
ROLLBACK;
START TRANSACTION;
SELECT drop_temp_table_with_dmls();
ROLLBACK;
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc
--source include/rpl/sync_to_replica.inc
--source include/rpl/connection_source.inc

--echo #
--echo # Verify that a function call is written to binary log in ROW
--echo # format if the function contains operations on temporary tables.
--echo # case2: Function call inside a transaction with COMMIT.
--echo #
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
START TRANSACTION;
SELECT create_temp_table();
COMMIT;
START TRANSACTION;
SELECT dmls_on_temp_tables();
COMMIT;
START TRANSACTION;
SELECT drop_temp_table();
COMMIT;
--let $assert_text= Functions with operations on temporary tables are binlogged in ROW format when binlog_format= ROW/MIXED.
--let $assert_cond= [SHOW BINARY LOG STATUS, Position, 1] = $saved_master_pos
--source include/assert.inc

--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
START TRANSACTION;
SELECT create_temp_table_with_dmls();
COMMIT;
START TRANSACTION;
SELECT dmls_on_temp_and_regular_tables();
COMMIT;
START TRANSACTION;
SELECT drop_temp_table_with_dmls();
COMMIT;
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc
--source include/rpl/sync_to_replica.inc
--source include/rpl/connection_source.inc

--echo #
--echo # Verify that a function call is written to binary log in ROW
--echo # format if the function contains operations on temporary tables.
--echo #
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
SELECT create_temp_table();
SELECT dmls_on_temp_tables();
SELECT drop_temp_table();
--let $assert_text= Functions with operations on temporary tables are binlogged in ROW format when binlog_format= ROW/MIXED.
--let $assert_cond= [SHOW BINARY LOG STATUS, Position, 1] = $saved_master_pos
--source include/assert.inc

--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
SELECT create_temp_table_with_dmls();
SELECT dmls_on_temp_and_regular_tables();
SELECT drop_temp_table_with_dmls();
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc
--source include/rpl/sync_to_replica.inc
--source include/rpl/connection_source.inc

--echo # Verify that CREATE TEMPORARY TABLE with function is written to
--echo # the binary log in ROW format.
CREATE FUNCTION dummy_function() RETURNS INT DETERMINISTIC RETURN 1;
CREATE TEMPORARY TABLE temp3(a int);
INSERT INTO temp3 VALUES(1);

--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
CREATE TEMPORARY TABLE temp4 SELECT dummy_function() as result FROM temp3;
--let $assert_text= CREATE TEMPORARY TABLE with function is binlogged in ROW format when binlog_format= ROW/MIXED.
--let $assert_cond= [SHOW BINARY LOG STATUS, Position, 1] = $saved_master_pos
--source include/assert.inc
--source include/rpl/sync_to_replica.inc
--source include/rpl/connection_source.inc

--echo #
--echo # Verify that a function invoking another function that has temporary
--echo # table DDL is binlogged in ROW format.
--echo #
CREATE TABLE t2 (a int);
CREATE TABLE t3 (a int);
CREATE TEMPORARY TABLE temp1(a INT);

DELIMITER //;
CREATE FUNCTION drop_temp_table_if_exists() RETURNS INT DETERMINISTIC
BEGIN
DROP TEMPORARY TABLE IF EXISTS temp1;
RETURN 2;
END//

CREATE FUNCTION call_drop_temp_table_if_exists() RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO t2 VALUES(1);
INSERT INTO t3 SELECT drop_temp_table_if_exists();
RETURN 3;
END //
DELIMITER ;//

--echo # case 1: Calling the function call_drop_temp_table_if_exists() twice so
--echo # that the temporary table does not exist during the second call and ensuring
--echo # that the functions are binlogged in ROW format for both the calls.
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
SELECT call_drop_temp_table_if_exists();
SELECT call_drop_temp_table_if_exists();
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

--echo # case 2: Calling the function call_drop_temp_table_if_exists() once and
--echo # recreating the function drop_temp_table_if_exists() with a different
--echo # definition and calling call_drop_temp_table_if_exists() again. Ensure
--echo # that the first call is binlogged in ROW format and the second call in
--echo # STATEMENT format.
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
CREATE TEMPORARY TABLE temp1(a INT);
SELECT call_drop_temp_table_if_exists();

DROP FUNCTION drop_temp_table_if_exists;
CREATE FUNCTION drop_temp_table_if_exists() RETURNS INT RETURN 2;
SELECT call_drop_temp_table_if_exists();
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

--echo # case 3: prepare the function call call_drop_temp_table_if_exists() once and
--echo # execute twice. Ensure that in both the executions the function is binlogged
--echo # in ROW format.
CREATE TEMPORARY TABLE temp1(a INT);
DROP FUNCTION drop_temp_table_if_exists;
DELIMITER //;
CREATE FUNCTION drop_temp_table_if_exists() RETURNS INT DETERMINISTIC
BEGIN
DROP TEMPORARY TABLE IF EXISTS temp1;
RETURN 2;
END //
DELIMITER ;//

PREPARE function_call FROM 'SELECT call_drop_temp_table_if_exists()';
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
EXECUTE function_call;
EXECUTE function_call;
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

--echo # case 4: prepare the function call call_drop_temp_table_if_exists() once and
--echo # execute once. Recreate the function drop_temp_table_if_exists() and the
--echo # prepared statement again. Ensure that in the first execution the function is
--echo # binlogged in ROW format and in the second execution, the function is binlogged
--echo # in STATEMENT format.
CREATE TEMPORARY TABLE temp1(a INT);
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
EXECUTE function_call;
DROP FUNCTION drop_temp_table_if_exists;
CREATE FUNCTION drop_temp_table_if_exists() RETURNS INT RETURN 2;
EXECUTE function_call;
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

--echo #
--echo # Verify that a function invoking a procedure that has temporary table DDL is
--echo # binlogged in ROW format.
--echo #

CREATE TABLE t4(a int);

DELIMITER //;
CREATE PROCEDURE proc_with_temp_table_ddl()
BEGIN
 DROP TEMPORARY TABLE IF EXISTS t1;
 CREATE TEMPORARY TABLE temp5 (a int);
 INSERT INTO temp5 VALUES(10);
END //

CREATE FUNCTION call_proc_with_temp_table_ddl() RETURNS INT
BEGIN
CALL proc_with_temp_table_ddl();
INSERT INTO t4 SELECT * FROM temp5;
RETURN 1;
END //
DELIMITER ;//

--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
SELECT call_proc_with_temp_table_ddl();
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

--echo #
--echo # Verify that a Event invoking a stored routine that has temporary table DDL
--echo # is binlogged in ROW format.
--echo #

CREATE EVENT call_routine_with_temp_table_ddl
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 5 SECOND
DO SELECT call_proc_with_temp_table_ddl();

DELETE FROM t4;
--let $saved_master_pos=query_get_value('SHOW BINARY LOG STATUS', Position, 1)
# Wait for the event to execute once.
--let $wait_condition= select count(*) = 1 from t4
--source include/wait_condition_or_abort.inc
--let $binlog_start= $saved_master_pos
--source include/rpl/deprecated/show_binlog_events.inc

# Cleanup
--source include/rpl/connection_source.inc
DROP TABLE t1, t2, t3, t4;
DROP TEMPORARY TABLE temp3, temp4, temp5;
DROP FUNCTION create_temp_table;
DROP FUNCTION create_temp_table_with_dmls;
DROP FUNCTION dmls_on_temp_tables;
DROP FUNCTION dmls_on_temp_and_regular_tables;
DROP FUNCTION drop_temp_table;
DROP FUNCTION drop_temp_table_with_dmls;
DROP FUNCTION dummy_function;
DROP FUNCTION call_drop_temp_table_if_exists;
DROP FUNCTION drop_temp_table_if_exists;
DROP PROCEDURE proc_with_temp_table_ddl;
DROP FUNCTION call_proc_with_temp_table_ddl;

--source include/rpl/sync_to_replica.inc
--source include/rpl/deinit.inc
