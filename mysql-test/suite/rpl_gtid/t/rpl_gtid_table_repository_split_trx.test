# ==== Purpose ====
#
# This test case will verify that applier works correctly (writing the slave
# rpl info on table and also storing GTIDs on table) when a relay log split
# a transaction letting the GTID event in one relay log file and the rest of
# the transaction on the next relay log file. The reported issue happened when
# log-replica-updates was off
#
# The test case will generate a stream of events with two "transactions" and
# will flush the slave relay log once queuing the second GTID event received.
#
# After syncing the receiver thread, the test case will start the applier
# thread to ensure its proper behavior.
#
# ==== Related Bugs and Worklogs ====
#
# BUG#20451386 SQL THREAD CRASH: LOG-REPLICA-UPDATES OFF, RELAY LOG ENDS
#              WITH GTID_LOG_EVENT

# This test should run only on debug build
--source include/have_debug.inc
# This test uses debug sync to stop the IO thread in the middle of a transaction
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc
--let $rpl_skip_start_slave= 1
--source include/rpl/init_source_replica.inc

# Create a table and insert some data
CREATE TABLE t1 (c1 INT) ENGINE= InnoDB;
INSERT INTO t1 VALUES (1);

###
### Flush the relay log after the second GTID is received
###
--source include/rpl/connection_replica.inc
--let $rpl_after_received_events_action= flush
--let $rpl_event_count= 2
--let $rpl_count_only_event_type= Gtid
--source include/rpl/receive_event_count.inc

# Sync the receiver thread with the master
--source include/rpl/connection_source.inc
--source include/rpl/sync_to_replica_received.inc

# Now start the applier thread
--source include/rpl/start_applier.inc
--source include/rpl/connection_source.inc
--source include/rpl/sync_to_replica.inc

# Cleanup
--source include/rpl/connection_source.inc
DROP TABLE t1;
--source include/rpl/deinit.inc
