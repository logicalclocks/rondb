# ==== Purpose ====
#
# This script tests server behavior when a crash occurs while applying an
# `XA COMMIT ... ONE PHASE`, on the replica, just before the transaction is
# committed in the SEs.
#
# ==== Requirements ====
#
# Pre-conditions:
# PC1. Asynchronous replication topology with 2 servers (source -> replica).
# PC2. GTID is enabled.
#
# After server restart:
# R1. The `XA COMMIT ... ONE PHASE` statement should be found in the
#     replica's binlog.
# R2. The GTID_EXECUTED variable should be updated on the replica.
# R3. There shouldn't be any pending XA transactions visible with `XA
#     RECOVER`, on the replica.
#
# ==== Implementation ====
#
# 1. Setup scenario: create table and insert some records on the source.
# 2. Start and execute. on the source, an XA transaction containing an
#    insert until before `XA COMMIT ... ONE PHASE`.
# 3. Take the `GTID_EXECUTED` state, on the replica.
# 4. Crash the replica during `XA COMMIT ... ONE PHASE` execution before
#    committing in the storage engines.
# 5. Restart the replica server and check it for:
#    a. Error log for messages stating that recovery process found one
#       transaction needing recovery.
#    b. The `XA COMMIT ... ONE PHASE` is present in the replica's binary log.
#    c. The GTID_EXECUTED variable was updated.
#    d. There aren't any pending XA transaction listed in the output of `XA
#       RECOVER`.
#    e. The table has been updated.
# 6. Start replica.
#
# ==== References ====
#
# WL#11300: Crash-safe XA + binary log
#
# Related tests:
#   see common/xa_crash_safe/setup.inc
#
--source include/have_binlog_format_row.inc
--source include/not_valgrind.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/rpl/init_source_replica.inc

# 1. Setup scenario: create table and insert some records on the source.
#
--source include/rpl/connection_source.inc
--let $xid_data = xid1
--let $xid = `SELECT CONCAT("X'", LOWER(HEX('$xid_data')), "',X'',1")`
--source common/xa_crash_safe/setup.inc

--source include/rpl/sync_to_replica.inc

# 2. Start and execute. on the source, an XA transaction containing an
#    insert until before `XA COMMIT ... ONE PHASE`.
#
--source include/rpl/connection_source1.inc
--eval XA START $xid
INSERT INTO t1 VALUES (1);
--eval XA END $xid

# 3. Take the `GTID_EXECUTED` state, on the replica.
#
--source include/rpl/connection_source.inc
--source include/rpl/sync_to_replica.inc
--let $before_gtid_executed = `SELECT @@GLOBAL.gtid_executed`

# 4. Crash the replica during `XA COMMIT ... ONE PHASE` execution before
#    committing in the storage engines.
#
--let $auxiliary_connection = slave
--let $statement_connection = master1
--let $statement = XA COMMIT $xid ONE PHASE
--let $sync_point = before_commit_in_engines
--source include/execute_to_conditional_timestamp_sync_point.inc

--source include/rpl/connection_replica.inc
--source include/kill_mysqld.inc

# 5. Restart the replica server and check it for:
#
--let $restart_parameters=restart:--skip-replica-start
--source include/start_mysqld.inc
--source include/rpl/reconnect.inc

# 5.a. Error log for messages stating that recovery process found one
#       transaction needing recovery.
#
--let $assert_select = Successfully committed 1 XA transaction
--source common/xa_crash_safe/assert_recovery_message.inc

# 5.b. The `XA COMMIT ... ONE PHASE` is present in the replica's binary log.
#
--source include/rpl/connection_replica.inc
--let $event_sequence = Gtid # $xa_start_end # XA_prepare/XA COMMIT $xid ONE PHASE
--source include/rpl/assert_binlog_events.inc

# 5.c. The GTID_EXECUTED variable was updated.
#
--let $after_gtid_executed = `SELECT @@GLOBAL.gtid_executed`
--let $assert_text = GTID_EXECUTED has been updated
--let $assert_cond = "$before_gtid_executed" != "$after_gtid_executed"
--source include/assert.inc

# 5.d. There aren't any pending XA transaction listed in the output of `XA
#       RECOVER`.
#
--let $expected_prepared_xa_count = 0
--source common/xa_crash_safe/assert_xa_recover.inc

# 5.e. The table has been updated.
#
--let $expected_row_count = 2
--source common/xa_crash_safe/assert_row_count.inc

# 6. Start replica.
#
--source include/rpl/start_replica.inc

--source include/rpl/connection_source.inc
DROP TABLE t1;
--source include/rpl/deinit.inc
