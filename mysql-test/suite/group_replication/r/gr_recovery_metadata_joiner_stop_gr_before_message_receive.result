include/group_replication.inc [rpl_server_count=4]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Bootstrap a GROUP on M1.
[connection server1]
include/start_and_bootstrap_group_replication.inc

############################################################
# 2. Start GR on M2 and M3.
#    M3 is needed to maintain majority when metadata sender crashes.
[connection server2]
include/start_group_replication.inc
[connection server3]
include/start_group_replication.inc

############################################################
# 3. Set debug point gr_wait_before_sending_metadata on server sending metadata.
#    Set debug point gr_crash_before_recovery_metadata_send on server sending metadata.
SET @@GLOBAL.DEBUG='+d,gr_wait_before_sending_metadata';
SET @@GLOBAL.DEBUG='+d,gr_crash_before_recovery_metadata_send';
SET GLOBAL group_replication_unreachable_majority_timeout= 1;
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';
SET GLOBAL group_replication_unreachable_majority_timeout= 1;
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

############################################################
# 4. Start GR on M4.
[connection server4]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Error fetching the Recovery Metadata by the Recovery thread. The Recovery will be terminated.");
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc

############################################################
# 5. Block donor from sending metadata.
#    Once donor reaches send part it will crash.
SET DEBUG_SYNC= "now WAIT_FOR signal.reached_recovery_metadata_send";
SET @@GLOBAL.DEBUG='-d,gr_wait_before_sending_metadata';
SET DEBUG_SYNC= "now SIGNAL signal.send_the_recovery_metadata";
include/rpl/reconnect.inc
SET @@GLOBAL.DEBUG='-d,gr_crash_before_recovery_metadata_send';

############################################################
# 6. Stop GR on M4.
[connection server4]
include/stop_group_replication.inc

############################################################
# 7. Check metadata is deleted on servers not sending metadata.
#    Sender crashed and M4(joiner) went OFFLINE.
#    Since there is no joiner, other members will do the cleanup.
#    Assert recovery metadata was not sent.
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';
SET @@GLOBAL.group_replication_unreachable_majority_timeout= DEFAULT;
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';
SET @@GLOBAL.group_replication_unreachable_majority_timeout= DEFAULT;

############################################################
# 8. M4(joiner) will go to OFFLINE state.
#    Other members had recovery metadata but M4(joiner) left the group.
[connection server4]
include/gr_wait_for_member_state.inc

############################################################
# 9. Cleanup.
include/group_replication_end.inc
