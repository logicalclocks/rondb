include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Bootstrap start a GROUP on M1
#    In recovery certification_info data is send in multiple
#    packets, where each packet is of around 10 MB. Change
#    max compressed packet size from 10MB to 10000B using
#    group_replication_max_compressed_packet_size_10000 debug
#    point.
[connection server1]
SET @@GLOBAL.DEBUG= '+d,group_replication_max_compressed_packet_size_10000';
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY AUTO_INCREMENT);

############################################################
# 2. Start GR on M2.
#    Block applier channel on M2, so that remote transactions
#    can be blocked to apply and we can have some write-sets
#    on certification info.
[connection server2]
include/start_group_replication.inc
SET @@GLOBAL.DEBUG= '+d,block_applier_updates';
SET @@GLOBAL.DEBUG= '+d,group_replication_max_compressed_packet_size_10000';
SET @@GLOBAL.DEBUG= '+d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';

############################################################
# 3. Do some transactions so that we have 2500 write-sets on
#    certification info.
[connection server1]
SET @@GLOBAL.DEBUG= '+d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';
include/assert.inc ['Count_transactions_rows_validating must be equal to 2500 on server1']

############################################################
# 4. Start GR on M3.
#    The debug sync point
#    group_replication_certification_info_packet_count_check
#    would verify that compressed certification info packets
#    received by joiner M3 is greater then 1.
[connection server3]
SET @@GLOBAL.DEBUG= '+d,group_replication_certification_info_packet_count_check';
START GROUP_REPLICATION;

############################################################
# 5. Unblock applier on M2 and
#    verify GR on M3 is ONLINE now.
[connection server2]
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
[connection server3]
include/gr_wait_for_member_state.inc

############################################################
# 6. Cleanup.
SET @@GLOBAL.DEBUG= '-d,group_replication_certification_info_packet_count_check';
[connection server1]
DROP TABLE t1;
SET @@GLOBAL.DEBUG= '-d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
SET @@GLOBAL.DEBUG= '-d,group_replication_max_compressed_packet_size_10000';
[connection server2]
SET @@GLOBAL.DEBUG= '-d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
SET @@GLOBAL.DEBUG= '-d,group_replication_max_compressed_packet_size_10000';
include/group_replication_end.inc
