include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]
#
# Setup a new 2 member group
#
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Replica SQL for channel 'group_replication_applier': Relay log read failure: Could not parse relay log event entry.*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;
include/start_and_bootstrap_group_replication.inc
include/rpl/gr_wait_for_number_of_members.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Replica SQL for channel 'group_replication_applier': Relay log read failure: Could not parse relay log event entry.*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;
include/start_group_replication.inc
include/rpl/gr_wait_for_number_of_members.inc
SET @@GLOBAL.DEBUG='+d,dump_thread_before_read_event';
SET @@GLOBAL.DEBUG='+d,dump_thread_before_read_event';
#
# Start recovery on a new member and kill the donor
#
SET SESSION sql_log_bin= 0;
call mtr.add_suppression(".*Error when configuring the asynchronous recovery channel connection *.*");
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc
# Find if server 1 or 2 is the donor
# Stop group replication on the donor making it leave the group
include/stop_group_replication.inc
RESET BINARY LOGS AND GTIDS;
SET @@GLOBAL.DEBUG='-d,dump_thread_before_read_event';
SET DEBUG_SYNC = "now SIGNAL signal.continue";
# Unblock recovery and watch the member go online despite the donor exit
SET @@GLOBAL.DEBUG='-d,dump_thread_before_read_event';
SET DEBUG_SYNC = "now SIGNAL signal.continue";
include/gr_wait_for_member_state.inc
include/assert.inc [On the recovered member, the table should exist and have 1 elements;]
include/assert.inc [On the recovered member, the executed GTID should be the same as on the donor]
#
# Cleaning up
#
include/stop_group_replication.inc
DROP TABLE t1;
include/stop_group_replication.inc
SET DEBUG_SYNC= 'RESET';
DROP TABLE t1;
SET DEBUG_SYNC= 'RESET';
DROP TABLE t1;
include/group_replication_end.inc
