include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Bootstrap start a GROUP on M1 and set debug point
#    gr_force_recovery_metadata_send_failure to simulate send message failure.
[connection server1]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Error while sending message. Context: Failed to send the recovery metadata. Sending ERROR message to the joiner to leave the group.");
call mtr.add_suppression("The certification information, part of the required information to the new member join the group, is too big and cannot be send.*");
SET SESSION sql_log_bin= 1;
include/start_and_bootstrap_group_replication.inc
SET @@GLOBAL.DEBUG='+d,gr_force_recovery_metadata_send_failure';
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

############################################################
# 2. Start GR on M2.
#    The M2 will enter the ERROR state after recovery
#    metadata message error message is received.
[connection server2]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Error the group was unable to send Recovery Metadata to joining member.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("While leaving the group due to a stop, shutdown or failure there was a timeout receiving a view change.*");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Error received while the Recovery thread was waiting for the Recovery Metadata. The Recovery will be terminated.");
call mtr.add_suppression("The group was unable to send the Recovery Metadata to a joining member.");
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc

############################################################
# 3. Sender cleans the metadata.
[connection server1]
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";
SET @@GLOBAL.DEBUG='-d,gr_force_recovery_metadata_send_failure';
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';
SET DEBUG_SYNC= 'RESET';

############################################################
# 4. Cleanup.
include/group_replication_end.inc
