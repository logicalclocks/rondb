include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]
#Bootstrap and start GR on M1
[connection server1]
include/start_and_bootstrap_group_replication.inc
#Start GR on M2
[connection server2]
SET SESSION sql_log_bin = 0;
call mtr.add_suppression(".*Replica SQL for channel 'group_replication_applier': ... The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state*");
CALL mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
CALL mtr.add_suppression("Could not execute Write_rows event on table test.t1");
CALL mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
SET SESSION sql_log_bin = 1;
include/start_group_replication.inc
#Start GR on M3
[connection server3]
include/start_group_replication.inc
[connection server1]
include/assert.inc ['Gr_empty_consensus_proposals_count Value should be 0']
[connection server2]
[connection server1]
SET @prev_count_Gr_data_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_count");
SET @prev_count_Gr_data_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_bytes_sum");
SET @prev_count_Gr_data_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_roundtrip_time_sum");
SET @prev_count_Gr_consensus_bytes_sent_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_sent_sum");
SET @prev_count_Gr_all_consensus_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_time_sum");
SET @prev_count_Gr_total_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_total_messages_sent_count");
#Create table on M1
[connection server1]
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t1 values(1);
#Gr_data_messages_sent_* Metrics values should be increased on M1
include/assert.inc ['Gr_data_messages_sent_count value increased']
include/assert.inc ['Gr_data_messages_sent_bytes_sum value increased']
include/assert.inc ['Gr_data_messages_sent_roundtrip_time_sum value increased']
include/assert.inc ['Gr_consensus_bytes_sent_sum value increased']
include/assert.inc ['Gr_all_consensus_time_sum value increased']
include/assert.inc ['Gr_total_messages_sent_count value increased']
[connection server1]
SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_last_consensus_end_timestamp";
VARIABLE_VALUE
DATE_TIME
SET @prev_count_Gr_data_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_count");
SET @prev_count_Gr_data_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_bytes_sum");
SET @prev_count_Gr_data_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_roundtrip_time_sum");
SET @prev_count_Gr_consensus_bytes_sent_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_sent_sum");
SET @prev_count_Gr_all_consensus_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_time_sum");
SET @prev_count_Gr_total_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_total_messages_sent_count");
DROP TABLE test.t1;
# Gr_data_messages_sent_* Metrics values should be increased on M1
include/assert.inc ['Gr_data_messages_sent_count value increased']
include/assert.inc ['Gr_data_messages_sent_bytes_sum value increased']
include/assert.inc ['Gr_data_messages_sent_roundtrip_time_sum value increased']
include/assert.inc ['Gr_consensus_bytes_sent_sum value increased']
include/assert.inc ['Gr_all_consensus_time_sum value increased']
include/assert.inc ['Gr_total_messages_sent_count value increased']
SET @prev_count_Gr_data_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_count");
SET @prev_count_Gr_data_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_bytes_sum");
SET @prev_count_Gr_data_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_roundtrip_time_sum");
SET @prev_count_Gr_consensus_bytes_sent_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_sent_sum");
SET @prev_count_Gr_all_consensus_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_time_sum");
SET @prev_count_Gr_total_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_total_messages_sent_count");
#Gr_data_messages_sent_* Metrics values should not increase on M2 and M3.
[connection server2]
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Gr_consensus_bytes_received_sum value increased']
[connection server3]
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
[connection server1]
include/assert.inc ['Value should be greater than other']
include/assert.inc ['Value should be greater than other']
[connection server2]
SET @prev_Gr_control_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_count");
SET @prev_Gr_control_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_bytes_sum");
SET @prev_Gr_control_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_roundtrip_time_sum");
#Change communication protocol version and switch to MPM.
SELECT group_replication_set_communication_protocol("8.0.21");
group_replication_set_communication_protocol("8.0.21")
The operation group_replication_set_communication_protocol completed successfully
#Gr_control_messages_* should increase on M2.
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
#Gr_data_messages_* Metrics value should not increase on M1
[connection server1]
include/assert.inc ['Gr_data_messages_sent_count value did not change']
include/assert.inc ['Gr_data_messages_sent_bytes_sum value did not change']
include/assert.inc ['Gr_data_messages_sent_roundtrip_time_sum value did not change']
include/assert.inc ['Gr_empty_consensus_proposals_count Value should be 0']
#Gr_data_messages_* Metrics value should not increase on M2
[connection server2]
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
[connection server2]
SET @prev_Gr_control_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_count");
SET @prev_Gr_control_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_bytes_sum");
SET @prev_Gr_control_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_roundtrip_time_sum");
SELECT group_replication_switch_to_multi_primary_mode();
group_replication_switch_to_multi_primary_mode()
Mode switched to multi-primary successfully.
#Gr_control_messages_* should increase on M2.
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
SET @prev_Gr_control_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_count");
SET @prev_Gr_control_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_bytes_sum");
SET @prev_Gr_control_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_roundtrip_time_sum");
CREATE TABLE test.t1(num int PRIMARY KEY);
#Add 1000 transactions in a short time on m2.
#Gr_control_messages_sent_count won't increase to the proportion of 1000.
include/assert.inc ['Value should not increase to the proportion of 1000.']
#Gr_control_messages_* should increase on M2.
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
#Gr_data_messages_* Metrics value should not increase on M3
[connection server3]
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
include/assert.inc ['Value should be 0']
#Get Gr_extended_consensus_count value when server was ONLINE.
#Make server3 UNREACHABLE.
[connection server3]
SET GLOBAL super_read_only = 0;
SET GLOBAL group_replication_member_expel_timeout = 3000;
SET GLOBAL super_read_only = 1;
# Kill and restart:--group_replication_local_address=GROUP_REPLICATION_LOCAL_ADDRESS --group_replication_group_seeds=GROUP_REPLICATION_GROUP_SEEDS --group_replication_group_name=GROUP_REPLICATION_GROUP_NAME
include/rpl/reconnect.inc
[connection server1]
INSERT INTO t1 VALUES (10002);
#Gr_extended_consensus_count value should be increased after it became UNREACHABLE.
include/assert.inc ['Value should be 0']
[connection server1]
SET GLOBAL group_replication_member_expel_timeout = DEFAULT;
##Add data to t1 on m2 with set sql_log_bin=1;
[connection server2]
SET SESSION sql_log_bin= 0;
INSERT INTO t1 VALUES (10001);
SET SESSION sql_log_bin= 1;
SET @prev_count_Gr_data_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_count");
SET @prev_count_Gr_data_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_bytes_sum");
SET @prev_count_Gr_data_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_roundtrip_time_sum");
SET @prev_count_Gr_consensus_bytes_sent_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_sent_sum");
SET @prev_count_Gr_all_consensus_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_time_sum");
SET @prev_count_Gr_total_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_total_messages_sent_count");
[connection server1]
#Add same value to t1 on M1.
INSERT INTO t1 VALUES (10001);
[connection server2]
include/gr_wait_for_member_state.inc
#Verify metrics remain constant
[connection server2]
include/assert.inc ['Gr_data_messages_sent_count value did not change']
include/assert.inc ['Gr_data_messages_sent_bytes_sum value did not change']
include/assert.inc ['Gr_data_messages_sent_roundtrip_time_sum value did not change']
include/stop_group_replication.inc
SET SESSION sql_log_bin= 0;
DELETE FROM t1;
SET SESSION sql_log_bin= 1;
[connection server2]
include/start_group_replication.inc
SET @prev_count_Gr_data_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_count");
SET @prev_count_Gr_data_messages_sent_bytes_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_bytes_sum");
SET @prev_count_Gr_data_messages_sent_roundtrip_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_data_messages_sent_roundtrip_time_sum");
SET @prev_count_Gr_consensus_bytes_sent_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_sent_sum");
SET @prev_count_Gr_all_consensus_time_sum=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_time_sum");
SET @prev_count_Gr_total_messages_sent_count=(SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_total_messages_sent_count");
include/stop_group_replication.inc
SET @@GLOBAL.DEBUG ='+d,recovery_thread_wait_before_finish';
include/start_group_replication.inc
# Get back M2 server online
SET DEBUG_SYNC = "now WAIT_FOR signal.recovery_thread_wait_before_finish_reached";
SET @@GLOBAL.DEBUG ='-d,recovery_thread_wait_before_finish';
SET DEBUG_SYNC = "now SIGNAL signal.recovery_end";
include/gr_wait_for_member_state.inc
#Verify metrics remain constant
include/assert.inc ['Gr_data_messages_sent_count value did not change']
include/assert.inc ['Gr_data_messages_sent_bytes_sum value did not change']
include/assert.inc ['Gr_data_messages_sent_roundtrip_time_sum value did not change']
[connection server1]

####
# 6) Cleanup.
####

DROP TABLE test.t1;
include/group_replication_end.inc
