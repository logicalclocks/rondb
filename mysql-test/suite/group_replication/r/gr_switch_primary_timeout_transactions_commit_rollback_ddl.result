include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
[connection server1]
CREATE TABLE t1(c1 int primary key, c2 varchar(1));
CREATE TABLE t2(c1 int primary key, c2 varchar(1));
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc

# 2. Test CREATE TABLE statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
CREATE TABLE t3(c1 int primary key);
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
CREATE TABLE t4(c1 int primary key);
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check CREATE TABLE rolledback.']
include/assert.inc ['Check CREATE TABLE rolledback.']
[connection server2]
include/assert.inc ['Check CREATE TABLE rolledback.']
include/assert.inc ['Check CREATE TABLE rolledback.']

# 3. Test TRUNCATE TABLE statement.
[connection server1]
INSERT INTO t1 VALUES (1, '');
INSERT INTO t2 VALUES (1, '');

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
TRUNCATE TABLE t1;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
TRUNCATE TABLE t2;
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check TRUNCATE TABLE rolledback.']
include/assert.inc ['Check TRUNCATE TABLE rolledback.']
[connection server2]
include/assert.inc ['Check TRUNCATE TABLE rolledback.']
include/assert.inc ['Check TRUNCATE TABLE rolledback.']

# 4. Test ALTER TABLE statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
ALTER TABLE t1 ADD COLUMN c3 VARCHAR(3) DEFAULT '';
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
ALTER TABLE t2 ADD COLUMN c3 VARCHAR(3) DEFAULT '';
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check ALTER TABLE rolledback.']
include/assert.inc ['Check ALTER TABLE rolledback.']
[connection server2]
include/assert.inc ['Check ALTER TABLE rolledback.']
include/assert.inc ['Check ALTER TABLE rolledback.']

# 5. Test ANALYZE TABLE statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
ANALYZE TABLE t2 UPDATE HISTOGRAM ON c2;
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check ANALYZE TABLE rolledback.']
[connection server2]
include/assert.inc ['Check ANALYZE TABLE rolledback.']

# 6. Test OPTIMIZE TABLE statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
OPTIMIZE TABLE t1;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
OPTIMIZE TABLE t2;
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check OPTIMIZE TABLE rolledback.']
[connection server2]
include/assert.inc ['Check OPTIMIZE TABLE rolledback.']

# 7. Test CREATE INDEX statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
CREATE INDEX idx1 ON t1 (c2);
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
CREATE INDEX idx2 ON t2 (c2);
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check CREATE INDEX rolledback.']
include/assert.inc ['Check CREATE INDEX rolledback.']
[connection server2]
include/assert.inc ['Check CREATE INDEX rolledback.']
include/assert.inc ['Check CREATE INDEX rolledback.']

# 8. Test DROP INDEX statement.
[connection server1]
CREATE INDEX idx1 ON t1 (c2);
CREATE INDEX idx2 ON t2 (c2);

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
DROP INDEX idx1 ON t1;;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
DROP INDEX idx2 ON t2;;
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check DROP INDEX rolledback.']
include/assert.inc ['Check DROP INDEX rolledback.']
[connection server2]
include/assert.inc ['Check DROP INDEX rolledback.']
include/assert.inc ['Check DROP INDEX rolledback.']

# 9. Test DROP TABLE statement.
[connection server1]

# Block all commits on server1 and initiate a transaction.
# Begin change of primary from server2(secondary).
[connection server1]
include/gr_assert_primary_member.inc
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
DROP TABLE t1;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
[connection server2]
include/gr_assert_secondary_member.inc
SELECT group_replication_set_as_primary("SERVER2_UUID", 0);;
group_replication_set_as_primary("SERVER2_UUID", 0)
Primary server switched to: SERVER2_UUID

# Unblock transactions on server1.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
[connection server_1]
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# Block all commits on server2 and initiate a transaction.
# Begin change of primary from server2(primary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';
DROP TABLE t2;
[connection server_2]
SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';
SELECT group_replication_set_as_primary("SERVER1_UUID", 2);;
group_replication_set_as_primary("SERVER1_UUID", 2)
Primary server switched to: SERVER1_UUID

# Unblock transactions on server2.
# Transaction should fail it was not committing so it was killed
# and client connection dropped.
SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC= 'RESET';

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
[connection server1]
include/assert.inc ['Check DROP TABLE rolledback.']
include/assert.inc ['Check DROP TABLE rolledback.']
[connection server2]
include/assert.inc ['Check DROP TABLE rolledback.']
include/assert.inc ['Check DROP TABLE rolledback.']

# 10. Cleanup.
[connection server1]
DROP INDEX idx1 ON t1;
DROP INDEX idx2 ON t2;
DROP TABLE t1;
DROP TABLE t2;
include/rpl/sync.inc
include/group_replication_end.inc
