################################################################################
# Validate that when a member is stopped with holes on group
# gtids, those holes will be filled by the next transactions.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Bootstrap start a group on M1 and create a table on it.
# 2. Start GR on M2. Assert check that both members have 3 GTIDs. Stop GR on M2.
# 3. Execute transactions with specificed GTIDs to create holes on GTID_EXECUTED
#    on M1.
# 4. Shutdown the group i.e. stop GR on M1 too.
#  - GTID_EXECUTED must contain holes.
#  - Bootstrap start a group on M1.
#  - GTID_EXECUTED must contain no holes.
#  - Assert check the events sequence in binlog of M1.
# 5. Start GR on M2.
#  - GTID_EXECUTED must contain no holes.
#  - Assert check the events sequence in binlog of M2.
# 6. Clean up.
################################################################################
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# The sequence of events that make up a View Change
--let $vcle_seq= Gtid # Query/BEGIN # View_change # Query/COMMIT

--let $rpl_connection_name= server1
--source include/connection.inc
SET SESSION sql_log_bin= 0;
--source include/rpl/gtid_utils.inc
SET SESSION sql_log_bin= 1;
--let $rpl_connection_name= server2
--source include/connection.inc
SET SESSION sql_log_bin= 0;
--source include/rpl/gtid_utils.inc
SET SESSION sql_log_bin= 1;


--echo
--echo ############################################################
--echo # 1. Bootstrap the group and create a table on it.
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (i INT PRIMARY KEY);

--let $assert_text= GTID_EXECUTED must contain one transactions, create table.
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1")
--source include/assert.inc


--echo
--echo ############################################################
--echo # 2. Add one more member to the group.
--echo #    Assert that both members have 3 GTIDs.
--echo #    Server 2 leaves the group.
--let $rpl_connection_name= server2
--source include/connection.inc
--source include/start_group_replication.inc

--let $assert_text= GTID_EXECUTED must contain one transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1")
--source include/assert.inc

--let $rpl_connection_name= server1
--source include/connection.inc
--let $assert_text= GTID_EXECUTED must contain one transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1")
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--source include/stop_group_replication.inc


--echo
--echo ############################################################
--echo # 3. Execute transactions with specificed GTIDs to create
--echo #    holes on GTID_EXECUTED.
--let $rpl_connection_name= server1
--source include/connection.inc
# Insert a row with GTID specified to the next possible generated value.
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GTID_NEXT= "$group_replication_group_name:4"
INSERT INTO t1 VALUES(5);

# Insert a row with GTID specified to create a hole.
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GTID_NEXT= "$group_replication_group_name:6"
INSERT INTO t1 VALUES(6);
SET GTID_NEXT='AUTOMATIC';


--echo
--echo ############################################################
--echo # 4. Shutdown the group and bootstrap the group again.
--source include/stop_group_replication.inc
--let $assert_text= GTID_EXECUTED must contain holes
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1:4:6")
--source include/assert.inc

--source include/start_and_bootstrap_group_replication.inc
INSERT INTO t1 VALUES(7);
INSERT INTO t1 VALUES(8);
INSERT INTO t1 VALUES(9);
--let $assert_text= GTID_EXECUTED must contain no holes
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1-6")
--source include/assert.inc

--let $event_sequence= !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction
--source include/rpl/assert_binlog_events.inc


--echo
--echo ############################################################
--echo # 5. Server 2 joins the group again.
--let $rpl_connection_name= server2
--source include/connection.inc
--source include/start_group_replication.inc
--let $assert_text= GTID_EXECUTED must contain no holes
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1-6")
--source include/assert.inc

--let $event_sequence= !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction # !Gtid_transaction
--source include/rpl/assert_binlog_events.inc


--echo
--echo ############################################################
--echo # 6. Cleanup.
DROP TABLE t1;

--let $rpl_connection_name= server1
--source include/connection.inc
SET SESSION sql_log_bin= 0;
--source include/rpl/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
--let $rpl_connection_name= server2
--source include/connection.inc
SET SESSION sql_log_bin= 0;
--source include/rpl/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;

--source include/group_replication_end.inc
