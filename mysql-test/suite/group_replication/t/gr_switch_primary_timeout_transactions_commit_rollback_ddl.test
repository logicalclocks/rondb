################################################################################
# This test validates UDF group_replication_set_as_primary and confirms
# that connection running a transactions that did not reach commit stage is
# disconnected when UDF group_replication_set_as_primary is executed.
# UDF group_replication_set_as_primary runs successfully and primary is changed.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
# 2. Test CREATE TABLE statement.
# 3. Test TRUNCATE TABLE statement.
# 4. Test ALTER TABLE statement.
# 5. Test ANALYZE TABLE statement.
# 6. Test OPTIMIZE TABLE statement.
# 7. Test CREATE INDEX statement.
# 8. Test DROP INDEX statement.
# 9. Test DROP TABLE statement.
# 10. Cleanup.
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Setup group of 2 servers, M1(primary) and M2(secondary).

--let $rpl_connection_name= server1
--source include/connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE t1(c1 int primary key, c2 varchar(1));
CREATE TABLE t2(c1 int primary key, c2 varchar(1));

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--echo
--echo # 2. Test CREATE TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $statement_to_execute_on_server1=CREATE TABLE t3(c1 int primary key)
--let $statement_to_execute_on_server2=CREATE TABLE t4(c1 int primary key)
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check CREATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t3\"]" = 0
--source include/assert.inc

--let $assert_text= 'Check CREATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t4\"]" = 0
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check CREATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t3\"]" = 0
--source include/assert.inc

--let $assert_text= 'Check CREATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t4\"]" = 0
--source include/assert.inc

--echo
--echo # 3. Test TRUNCATE TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

INSERT INTO t1 VALUES (1, '');
INSERT INTO t2 VALUES (1, '');

--let $statement_to_execute_on_server1=TRUNCATE TABLE t1
--let $statement_to_execute_on_server2=TRUNCATE TABLE t2
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check TRUNCATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM test.t1]" = 1
--source include/assert.inc

--let $assert_text= 'Check TRUNCATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM test.t2]" = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check TRUNCATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM test.t1]" = 1
--source include/assert.inc

--let $assert_text= 'Check TRUNCATE TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM test.t2]" = 1
--source include/assert.inc

--echo
--echo # 4. Test ALTER TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $statement_to_execute_on_server1=ALTER TABLE t1 ADD COLUMN c3 VARCHAR(3) DEFAULT ''
--let $statement_to_execute_on_server2=ALTER TABLE t2 ADD COLUMN c3 VARCHAR(3) DEFAULT ''
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check ALTER TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.columns WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND COLUMN_NAME=\"c3"\]" = 0
--source include/assert.inc

--let $assert_text= 'Check ALTER TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.columns WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND COLUMN_NAME=\"c3"\]" = 0
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check ALTER TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.columns WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND COLUMN_NAME=\"c3"\]" = 0
--source include/assert.inc

--let $assert_text= 'Check ALTER TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.columns WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND COLUMN_NAME=\"c3"\]" = 0
--source include/assert.inc

--echo
--echo # 5. Test ANALYZE TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $server_gtid_executed= `SELECT @@GLOBAL.GTID_EXECUTED`

--let $statement_to_execute_on_server1=ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2
--let $statement_to_execute_on_server2=ANALYZE TABLE t2 UPDATE HISTOGRAM ON c2
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check ANALYZE TABLE rolledback.'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$server_gtid_executed";
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check ANALYZE TABLE rolledback.'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$server_gtid_executed";
--source include/assert.inc

--echo
--echo # 6. Test OPTIMIZE TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $server_gtid_executed= `SELECT @@GLOBAL.GTID_EXECUTED`

--let $statement_to_execute_on_server1=OPTIMIZE TABLE t1
--let $statement_to_execute_on_server2=OPTIMIZE TABLE t2
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check OPTIMIZE TABLE rolledback.'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$server_gtid_executed";
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check OPTIMIZE TABLE rolledback.'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$server_gtid_executed";
--source include/assert.inc

--echo
--echo # 7. Test CREATE INDEX statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $statement_to_execute_on_server1=CREATE INDEX idx1 ON t1 (c2)
--let $statement_to_execute_on_server2=CREATE INDEX idx2 ON t2 (c2)
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check CREATE INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx1"\]" = 0
--source include/assert.inc

--let $assert_text= 'Check CREATE INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx2"\]" = 0
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check CREATE INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx1"\]" = 0
--source include/assert.inc

--let $assert_text= 'Check CREATE INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx2"\]" = 0
--source include/assert.inc

--echo
--echo # 8. Test DROP INDEX statement.

--let $rpl_connection_name= server1
--source include/connection.inc

CREATE INDEX idx1 ON t1 (c2);
CREATE INDEX idx2 ON t2 (c2);

--let $statement_to_execute_on_server1=DROP INDEX idx1 ON t1;
--let $statement_to_execute_on_server2=DROP INDEX idx2 ON t2;
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check DROP INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx1"\]" = 1
--source include/assert.inc

--let $assert_text= 'Check DROP INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx2"\]" = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check DROP INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx1"\]" = 1
--source include/assert.inc

--let $assert_text= 'Check DROP INDEX rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.statistics WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\" AND INDEX_SCHEMA=\"test"\ AND INDEX_NAME=\"idx2"\]" = 1
--source include/assert.inc

--echo
--echo # 9. Test DROP TABLE statement.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $statement_to_execute_on_server1=DROP TABLE t1
--let $statement_to_execute_on_server2=DROP TABLE t2
--source ../include/gr_switch_primary_timeout_transactions_commit_rollback.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= 'Check DROP TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\"]" = 1
--source include/assert.inc

--let $assert_text= 'Check DROP TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\"]" = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'Check DROP TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t1\"]" = 1
--source include/assert.inc

--let $assert_text= 'Check DROP TABLE rolledback.'
--let $assert_cond= "[SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA=\"test\" AND TABLE_NAME=\"t2\"]" = 1
--source include/assert.inc

--echo
--echo # 10. Cleanup.

--let $rpl_connection_name= server1
--source include/connection.inc

DROP INDEX idx1 ON t1;
DROP INDEX idx2 ON t2;
DROP TABLE t1;
DROP TABLE t2;
--source include/rpl/sync.inc

--source include/group_replication_end.inc
