#
# Test case to verify that when asynchronous replication failover is enabled,
# adding one of the member of the group replication using
# asynchronous_connection_failover_add_managed() does add other group members
# as source for asynchronous replication channel.
#
# Test:
# 0. The test requires 3 servers:
#      server1: primary
#      server2: secondary
#      server3: single server replica
# 1. Start GR on server1 & 2.
# 2. Add some data to server1.
# 3. Add asynchronous connection failover server and
#    verify that it is inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
# 4. Create and start new channel ch1_3: server3(replica), server1(source)
# 5. Verify channel ch1_3 IO THREAD is ON
#    Start SQL THREAD
# 6. Verify data is replicated to server1 & 3
# 7. Verify server2 which is member of group is added to
#    performance_schema.replication_asynchronous_connection_failover.
# 8. Verify Monitor IO thread would set
#    stage_fetching_source_member_details,
#    stage_upating_source_member_details and
#    stage_wait_before_next_fetch state.
# 9. Clean up.
#
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc


--echo
--echo # 1. Start GR on server1 & 2
--echo
# Boostrap start GR on server1 (Primary)
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/start_and_bootstrap_group_replication.inc

# Start GR on server2 (Secondary)
--let $rpl_connection_name= server2
--source include/connection.inc
--source include/start_group_replication.inc

--let $_tmp_gr_group_name= `SELECT @@GLOBAL.group_replication_group_name`


--echo
--echo # 2. Add some data to server1.
--echo
# server1: create table t1 and add data
--let $rpl_connection_name= server1
--source include/connection.inc
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t1 VALUES (1);


--echo #
--echo # 3. Add asynchronous connection failover server and
--echo #    verify that it is inserted successfully in
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo #
--let $rpl_connection_name= server3
--source include/connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The source.*for channel.*has joined the group.*and so added its entry into replication_asynchronous_connection_failover table");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
SET SESSION sql_log_bin = 1;

--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1 $_tmp_gr_group_name FAILOVER_GROUP_NAME
--eval SELECT asynchronous_connection_failover_add_managed('ch1_3', 'GroupReplication', '$_tmp_gr_group_name', '127.0.0.1', $SERVER_MYPORT_1, '', 80, 60);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc


--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover WHERE port=$SERVER_MYPORT_1 AND weight=60, count, 1] = 1
--source include/assert.inc


--echo
--echo # 4. Create and start new channel ch1_3: server3(replica), server1(source)
--echo
--let $rpl_connection_name= server3
--source include/connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=2 FOR CHANNEL 'ch1_3'

--let $rpl_channel_name='ch1_3'
--source include/rpl/start_receiver.inc
--let $rpl_channel_name=


--echo
--echo # 5. Verify channel ch1_3 IO THREAD is ON
--echo #    Start SQL THREAD
--echo
--let $assert_text= Verify channel ch1_3 IO_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch1_3\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $rpl_channel_name='ch1_3'
--source include/rpl/start_applier.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch1_3 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1_3\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc


--echo
--echo # 6. Verify data is replicated to server1 & 3
--echo
# Sync replica(server3) with source(server1)
--let $rpl_connection_name= server1
--source include/connection.inc
--let $rpl_channel_name='ch1_3'
--let $sync_slave_connection=server3
--source include/rpl/sync_to_replica.inc
--let $rpl_channel_name=

--let $rpl_connection_name= server3
--source include/connection.inc

--let $assert_text= Verify test.t1 is synced
--let $assert_cond= "[SELECT count(*) COUNT FROM test.t1, COUNT, 1]" = "1"
--source include/assert.inc


--let $rpl_connection_name= server1
--source include/connection.inc

--let $assert_text= Verify test.t1 is synced
--let $assert_cond= "[SELECT count(*) COUNT FROM test.t1, COUNT, 1]" = "1"
--source include/assert.inc


--echo
--echo # 7. Verify server2 which is member of group is added to
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo
--let $rpl_connection_name= server3
--source include/connection.inc

--let $assert_text= 'There are 2 rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 2
--source include/assert.inc

--let $assert_text= Verify server1 which is primary has weight=80
--let $assert_cond= "[SELECT count(*) COUNT FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT=$SERVER_MYPORT_1 AND WEIGHT=80, COUNT, 1]" = "1"
--source include/assert.inc

--let $assert_text= Verify server2 which is secondary has weight=60
--let $assert_cond= "[SELECT count(*) COUNT FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT=$SERVER_MYPORT_2 AND WEIGHT=60, COUNT, 1]" = "1"
--source include/assert.inc

--let $assert_text= Verify Slave_monitor thread is FOREGROUND thread
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\" AND TYPE=\"FOREGROUND\"]" = 1;
--source include/assert.inc

--echo
--echo # 8. Verify Monitor IO thread would set
--echo #    stage_fetching_source_member_details,
--echo #    stage_upating_source_member_details and
--echo #    stage_wait_before_next_fetch state.
--echo
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.setup_instruments WHERE NAME LIKE 'stage/%/Fetching source member details from connected source';
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.setup_instruments WHERE NAME LIKE 'stage/%/Updating fetched source member details on receiver';
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.setup_instruments WHERE NAME LIKE 'stage/%/Wait before trying to fetch next membership changes from source';
--source include/wait_condition.inc


--echo
--echo # 9. Clean Up.
--echo
--let $rpl_connection_name= server1
--source include/connection.inc
DROP TABLE test.t1;

--let $sync_slave_connection= server3
--source include/rpl/sync_to_replica.inc

--let $rpl_channel_name='ch1_3'
--source include/rpl/stop_replica.inc

--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl/reset_replica.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $_tmp_gr_group_name FAILOVER_GROUP_NAME
--eval SELECT asynchronous_connection_failover_delete_managed('ch1_3', '$_tmp_gr_group_name')

--let $rpl_connection_name= server1
--source include/connection.inc

--let $rpl_skip_sync= 1
--let $rpl_only_running_threads= 1

--source include/group_replication_end.inc
