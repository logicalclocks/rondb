################################################################################
# Validate that GR behaves properly when group GNOs are exhausted.
# MAX_GNO: 9223372036854775807
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Create a table t1 on both M1 and M2, before starting GR. Validate that
#    transactions are aborted on local member and remote members move to ERROR
#    state when group GNOs are exhausted:
#  - Set GTID_PURGED=GROUP_UUID:1-9223372036854775804 on M1.
#  - Bootstrap start GR on M1. Verify GTID_EXECUTED on M1.
#  - Set GTID_PURGED=GROUP_UUID:1-9223372036854775804 on M2.
#  - Start GR on M2. Verify GTID_EXECUTED on M2.
#  - On M1, verify that DML execution failed because GNOs are exhausted.
#  - On M2, verify that member_state is now ERROR.
#  - Verify GTID_EXECUTED=GROUP_UUID:1-9223372036854775806 on both M1 and M2.
#  - Stop GR on M1 and M2.
# 2. # 2. Validate that member start runs successfully since GTID is not used.
#  - Set GTID_PURGED=GROUP_UUID:1-9223372036854775806 on M1.
#  - Bootstrap start GR on M1. Verify that member_state is ONLINE on M1.
#  - Stop GR on M1.
# 3. Validate that member is ONLINE when group GNOs are exhausted and
#    view change happens.
#    GTID is not used with view change.
#  - Set GTID_PURGED=GROUP_UUID:1-9223372036854775804 on M1.
#  - Bootstrap start GR on M1. Verify GTID_EXECUTED on M1.
#  - Set GTID_PURGED=GROUP_UUID:1-9223372036854775804 on M2.
#  - Start GR on M2. Verify GTID_EXECUTED on M2.
#  - Stop GR on M2. Verify that member_state is ONLINE on M1 due to view change
#    log event not having GTID.
#  - Verify GTID_EXECUTED=GROUP_UUID:1-9223372036854775806 on M1. Stop GR on M1.
# 4. Clean up.
################################################################################
--source include/big_test.inc
--let $group_replication_group_name= c234f752-1ee4-11e6-adee-00212844d44e
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc


# Suppressions and table creation.
--let $rpl_connection_name= server1
--source include/connection.inc
SET SESSION sql_log_bin= 0;
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
call mtr.add_suppression("Impossible to generate Global Transaction Identifier: the integer component reached the maximal value. Restart the group with a new group_replication_group_name.");
call mtr.add_suppression("Error at event handling! Got error: 1");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("The member is leaving a group without being on one.");
call mtr.add_suppression("The member is already leaving or joining a group.");
call mtr.add_suppression("Unable to ensure the execution of group transactions received during recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Skipping leave operation: member already left the group.");
call mtr.add_suppression("The integer component of the GTID number is high.");
SET SESSION sql_log_bin= 1;
--let $rpl_connection_name= server2
--source include/connection.inc
SET SESSION sql_log_bin= 0;
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
call mtr.add_suppression("Impossible to generate Global Transaction Identifier: the integer component reached the maximal value. Restart the group with a new group_replication_group_name.");
call mtr.add_suppression("Error at event handling! Got error: 1");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("All donors left. Aborting group replication incremental recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("The member is leaving a group without being on one.");
call mtr.add_suppression("The member is already leaving or joining a group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Skipping leave operation: member already left the group.");
call mtr.add_suppression("The integer component of the GTID number is high.");
SET SESSION sql_log_bin= 1;


--echo
--echo ############################################################
--echo # 1. Validate that transactions are aborted on local member
--echo #    and remote members move to ERROR state when group GNOs
--echo #    are exhausted.
# Set GTID_EXECUTED and start server 1.
--let $rpl_connection_name= server1
--source include/connection.inc
--eval SET GLOBAL GTID_PURGED= "$group_replication_group_name:1-9223372036854775804"
--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775804
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775804"
--source include/assert.inc

--source include/start_and_bootstrap_group_replication.inc

INSERT INTO t1 values(0);
--source include/rpl/sync.inc

--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775805
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775805"
--source include/assert.inc

# Set GTID_EXECUTED and start server 2.
--let $rpl_connection_name= server2
--source include/connection.inc
--eval SET GLOBAL GTID_PURGED= "$group_replication_group_name:1-9223372036854775804"
--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775804
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775804"
--source include/assert.inc

--source include/start_group_replication.inc

DELETE FROM t1;
--source include/rpl/sync.inc

--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775806
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775806"
--source include/assert.inc

# Exhaust GNOs.
--let $rpl_connection_name= server1
--source include/connection.inc
--error ER_TRANSACTION_ROLLBACK_DURING_COMMIT
INSERT INTO t1 VALUES (1);
--let $wait_condition= SELECT @@GLOBAL.GTID_EXECUTED = "$group_replication_group_name:1-9223372036854775806"
--source include/wait_condition.inc

--let $rpl_connection_name= server2
--source include/connection.inc
--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc
--let $wait_condition= SELECT @@GLOBAL.GTID_EXECUTED = "$group_replication_group_name:1-9223372036854775806"
--source include/wait_condition.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/connection.inc
--source include/stop_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Validate that member start runs successfully since GTID
--echo #     is not used.
RESET BINARY LOGS AND GTIDS;
--eval SET GLOBAL GTID_PURGED= "$group_replication_group_name:1-9223372036854775806"
--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775806
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775806"
--source include/assert.inc

--source include/gr_set_bootstrap_group.inc
--source include/start_group_replication.inc

--let $wait_condition= SELECT @@GLOBAL.GTID_EXECUTED = "$group_replication_group_name:1-9223372036854775806"
--source include/wait_condition.inc

--source include/stop_group_replication.inc


--echo ############################################################
--echo # 3. Validate that member is ONLINE when group GNOs are
--echo #    exhausted and view change happens.
--echo #    GTID is not used with view change.
# Set GTID_EXECUTED and start server 1.
--let $rpl_connection_name= server1
--source include/connection.inc
RESET BINARY LOGS AND GTIDS;
--eval SET GLOBAL GTID_PURGED= "$group_replication_group_name:1-9223372036854775805"
--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775805
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775805"
--source include/assert.inc

--source include/start_and_bootstrap_group_replication.inc

INSERT INTO t1 values(0);
--source include/rpl/sync.inc

--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775806
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775806"
--source include/assert.inc

# Set GTID_EXECUTED and start server 2.
--let $rpl_connection_name= server2
--source include/connection.inc
RESET BINARY LOGS AND GTIDS;
--eval SET GLOBAL GTID_PURGED= "$group_replication_group_name:1-9223372036854775805"
--let $assert_text= GTID_EXECUTED must be UUID:1-9223372036854775805
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-9223372036854775805"
--source include/assert.inc

# Server 2 joins the group.

--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE"
--source include/wait_condition.inc

--let $wait_condition= SELECT @@GLOBAL.GTID_EXECUTED = "$group_replication_group_name:1-9223372036854775806"
--source include/wait_condition.inc
--source include/stop_group_replication.inc


--echo
--echo ############################################################
--echo # 4. Clean up.
--let $rpl_connection_name= server2
--source include/connection.inc
--source include/stop_group_replication.inc
RESET BINARY LOGS AND GTIDS;
--source include/start_and_bootstrap_group_replication.inc
--let $rpl_connection_name= server1
--source include/connection.inc
RESET BINARY LOGS AND GTIDS;
--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/connection.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server2
--source include/connection.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--source include/group_replication_end.inc
