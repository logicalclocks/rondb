###############################################################################
# This test verifies that if the donor patch version is high, clone can still
# happen.
# In this test one member version(M1) is 8.3.0 which is not a valid donor.
# M3 with incremented patch version(example 8.4.1) joins the group using
# incremental recovery.
# Later M2 joins the group(example 8.4.0) and does a clone from higher patch
# version member i.e. M3(example 8.4.1) and successfully joins the group.
#
# Note: Clone plugin will not observe change of version so w.r.t. clone plugin
#       cloning happened between same versions.
#       This test proves that GR does not allow clone from 8.3.0 or lower but
#       GR does allow clone from different member version which are 8.4.0 or
#       higher.
#
# 0. The test requires three servers: M1, M2 and M3.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 with version 8.3.0 and add some data.
#    8.3.0 is not a valid clone donor.
# 3. Install the clone plugin and start group replication on server3
#    with higher patch version.
# 4. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 5. Install the clone plugin on server 2
#    Setup the server so group replication starts on boot
# 6. Start group replication on server 2.
#    Set a debug point so it blocks during clone.
# 7. Recovery will finish via clone.
#    Assert M3 with higher patch version was clone donor.
#    Check clone finished and server2 is online.
# 8. Cleanup
#

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc


--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 with version 8.3.0 and add some data.
--echo #    8.3.0 is not a valid clone donor.

# Group status assuming 8.4.0 as the current version
# +---------+---------+---------+-----------+------------+
# | MEMBER  | STATE   | VERSION | ROLE      | MATURITY   |
# +---------+---------+---------+-----------+------------+
# | server1 | ONLINE  | 8.3.0   | Primary   | INNOVATION |
# +---------+---------+---------+-----------+------------+

SET @@GLOBAL.DEBUG='+d,group_replication_version_clone_not_supported';
--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo ############################################################
--echo # 3. Install the clone plugin and start group replication on server3
--echo #    with higher patch version.

# Group status assuming 8.4.0 as the current version
# +---------+---------+---------+-----------+------------+
# | MEMBER  | STATE   | VERSION | ROLE      | MATURITY   |
# +---------+---------+---------+-----------+------------+
# | server1 | ONLINE  | 8.3.0   | Primary   | INNOVATION |
# | server3 | ONLINE  | 8.4.1   | Primary   | LTS        |
# +---------+---------+---------+-----------+------------+

--let $rpl_connection_name= server3
--source include/connection.inc

--let $server3_port = `SELECT @@port`
--let $server3_ip_port= 127.0.0.1:$server3_port

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

SET @@GLOBAL.DEBUG='+d,group_replication_compatibility_higher_patch_version';
--source include/start_group_replication.inc

--echo
--echo ########################################################################
--echo # 4.  Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/connection.inc

--let $_group_replication_local_address2= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds2= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_comm_stack= `SELECT @@GLOBAL.group_replication_communication_stack`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo ############################################################
--echo # 5. Install the clone plugin on server 2
--echo #    Setup the server so group replication starts on boot

--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address2"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds2"
--eval SET PERSIST group_replication_communication_stack= "$_group_replication_comm_stack"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 6. Start group replication on server 2.
--echo #    Set a debug point so it blocks during clone.

# Group status assuming 8.4.0 as the current version
# +---------+---------+---------+-----------+------------+
# | MEMBER  | STATE   | VERSION | ROLE      | MATURITY   |
# +---------+---------+---------+-----------+------------+
# | server1 | ONLINE  | 8.3.0   | Primary   | INNOVATION |
# | server3 | ONLINE  | 8.4.1   | Primary   | LTS        |
# | server2 | ONLINE  | 8.4.0   | Primary   | LTS        |
# +---------+---------+---------+-----------+------------+

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

SET GLOBAL clone_autotune_concurrency = OFF;
SET GLOBAL clone_max_concurrency = 1;
SET @@GLOBAL.DEBUG='+d,gr_clone_wait';

--source include/start_group_replication_command.inc

SET DEBUG_SYNC = 'now WAIT_FOR gr_clone_paused';

--echo
--echo ############################################################
--echo # 7. Recovery will finish via clone.
--echo #    Assert M3 with higher patch version was clone donor.
--echo #    Check clone finished and server2 is online.

--let $donor_ip_port= `SELECT SOURCE FROM performance_schema.clone_status`
--let $assert_text= Clone donor is server3-higher patch version.
--let $assert_cond= "$donor_ip_port" = "$server3_ip_port"
--source include/assert.inc

SET DEBUG_SYNC = 'now SIGNAL gr_clone_continue';
SET @@GLOBAL.DEBUG = '-d,gr_clone_wait';

--let $disconnect_timeout= 600
--source include/wait_until_disconnected.inc
--let $disconnect_timeout=

--let $rpl_server_number= 2
--source include/rpl/reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

SET DEBUG_SYNC = 'RESET';

--echo
--echo ############################################################
--echo # 8. Cleanup

--let $rpl_connection_name= server1
--source include/connection.inc

DROP TABLE t1;
--source include/stop_group_replication.inc
SET @@GLOBAL.DEBUG='-d,group_replication_version_clone_not_supported';

--let $rpl_connection_name= server3
--source include/connection.inc

--source include/stop_group_replication.inc
SET @@GLOBAL.DEBUG='-d,group_replication_compatibility_higher_patch_version';

set session sql_log_bin=0;
SET GLOBAL super_read_only= FALSE;
call mtr.add_suppression("Member version is read compatible with the group.");
SET GLOBAL super_read_only= TRUE;
set session sql_log_bin=1;

--let $rpl_connection_name= server2
--source include/connection.inc

--source include/stop_group_replication.inc

--replace_result $_group_replication_threshold_save GROUP_REPLICATION_THRESHOLD
--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;
RESET PERSIST group_replication_communication_stack;

set session sql_log_bin=0;
SET GLOBAL super_read_only= FALSE;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of 1.");
call mtr.add_suppression("Member version is read compatible with the group.");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
SET GLOBAL super_read_only= TRUE;
set session sql_log_bin=1;


--source include/clean_monitoring_process.inc
--source include/group_replication_end.inc
