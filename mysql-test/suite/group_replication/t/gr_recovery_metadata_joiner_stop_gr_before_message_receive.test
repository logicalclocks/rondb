################################################################################
# This test proves that recovery metadata joiner leaves the group the metadata
# cleanup happens on all the members storing the metadata.
#
# 13 When a new member joins a group having all the members with MySQL version
#    greater than equal to 8.3.0, and if the new joining member leaves the group
#    or changes it's member state to either of ERROR/OFFLINE before it has
#    received the metadata, then it MUST be deleted from all the group members
#    holding this joiner's metadata.
# 21 When a new member joins a group having all the members with MySQL version
#    greater than equal to 8.3.0, and if 'GR Recovery Metadata' send is
#    unsuccessful, then on joiner leave 'GR Recovery Metadata' stored on group
#    members for the view identifier must be deleted.
#
# Test:
# 0. The test requires three servers: M1, M2, M3 and M4.
# 1. Bootstrap a GROUP on M1.
# 2. Start GR on M2 and M3.
#    M3 is needed to maintain majority when metadata sender crashes.
# 3. Set debug point gr_wait_before_sending_metadata on server sending metadata.
#    Set debug point gr_crash_before_recovery_metadata_send on server sending metadata.
# 4. Start GR on M4.
# 5. Block donor from sending metadata.
#    Once donor reaches send part it will crash.
# 6. Stop GR on M4.
# 7. Check metadata is deleted on servers not sending metadata.
#    Sender crashed and M4(joiner) went OFFLINE.
#    Since there is no joiner, other members will do the cleanup.
#    Assert recovery metadata was not sent.
# 8. M4(joiner) will go to OFFLINE state.
#    Other members had recovery metadata but M4(joiner) left the group.
# 9. Cleanup.
#
################################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/not_windows.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 4
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Bootstrap a GROUP on M1.

--let $rpl_connection_name= server1
--source include/connection.inc

--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_and_bootstrap_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Start GR on M2 and M3.
--echo #    M3 is needed to maintain majority when metadata sender crashes.

--let $rpl_connection_name= server2
--source include/connection.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/connection.inc

--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Set debug point gr_wait_before_sending_metadata on server sending metadata.
--echo #    Set debug point gr_crash_before_recovery_metadata_send on server sending metadata.

--let $metadata_donor= query_get_value(SELECT member_id FROM performance_schema.replication_group_members ORDER BY member_id, member_id, 1)

--let $server_not_sending_metadata1= 2
--let $server_not_sending_metadata2= 3
--let $server_sending_metadata= 1

if ($metadata_donor == $member2_uuid) {
  --let $server_not_sending_metadata1= 1
  --let $server_not_sending_metadata2= 3
  --let $server_sending_metadata= 2
}

if ($metadata_donor == $member3_uuid) {
  --let $server_not_sending_metadata1= 1
  --let $server_not_sending_metadata2= 2
  --let $server_sending_metadata= 3
}
--connection server$server_sending_metadata

--disable_query_log
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server1= `SELECT @@global.group_replication_group_seeds`
--enable_query_log

SET @@GLOBAL.DEBUG='+d,gr_wait_before_sending_metadata';
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.$server_sending_metadata.expect
SET @@GLOBAL.DEBUG='+d,gr_crash_before_recovery_metadata_send';

--connection server$server_not_sending_metadata1

SET GLOBAL group_replication_unreachable_majority_timeout= 1;


--let $warning_count_1_1= query_get_value(SELECT COUNT(*) AS COUNT FROM performance_schema.error_log WHERE error_code='MY-015045' AND data LIKE '%The member % will be the one sending the recovery metadata message.%', COUNT, 1)
--let $warning_count_1_2= query_get_value(SELECT COUNT(*) AS COUNT FROM performance_schema.error_log WHERE error_code='MY-015046' AND data LIKE '%This member % will be the one sending the recovery metadata message.%', COUNT, 1)
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

--connection server$server_not_sending_metadata2

SET GLOBAL group_replication_unreachable_majority_timeout= 1;

--let $warning_count_2_1= query_get_value(SELECT COUNT(*) AS COUNT FROM performance_schema.error_log WHERE error_code='MY-015045' AND data LIKE '%The member % will be the one sending the recovery metadata message.%', COUNT, 1)
--let $warning_count_2_2= query_get_value(SELECT COUNT(*) AS COUNT FROM performance_schema.error_log WHERE error_code='MY-015046' AND data LIKE '%This member % will be the one sending the recovery metadata message.%', COUNT, 1)
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

--echo
--echo ############################################################
--echo # 4. Start GR on M4.

--let $rpl_connection_name= server4
--source include/connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Error fetching the Recovery Metadata by the Recovery thread. The Recovery will be terminated.");
SET SESSION sql_log_bin= 1;

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 5. Block donor from sending metadata.
--echo #    Once donor reaches send part it will crash.

--connection server$server_sending_metadata

SET DEBUG_SYNC= "now WAIT_FOR signal.reached_recovery_metadata_send";
SET @@GLOBAL.DEBUG='-d,gr_wait_before_sending_metadata';
SET DEBUG_SYNC= "now SIGNAL signal.send_the_recovery_metadata";

--source include/wait_until_disconnected.inc
# Inform MTR that it should restart the aborted member
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--let $rpl_server_number= 1
--source include/rpl/reconnect.inc
--source include/wait_until_connected_again.inc
SET @@GLOBAL.DEBUG='-d,gr_crash_before_recovery_metadata_send';


--echo
--echo ############################################################
--echo # 6. Stop GR on M4.

--let $rpl_connection_name= server4
--source include/connection.inc

--source include/stop_group_replication.inc

--echo
--echo ############################################################
--echo # 7. Check metadata is deleted on servers not sending metadata.
--echo #    Sender crashed and M4(joiner) went OFFLINE.
--echo #    Since there is no joiner, other members will do the cleanup.
--echo #    Assert recovery metadata was not sent.

--connection server$server_not_sending_metadata1

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";

SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

## This member will be the one sendingthe recovery metadata did not increment
## This means metadata was never resent since joiner left the group.
## However there is a possibilty if joiner message is delayed in GCS metadata may be resent.
## Thanks to crash this possibility is minimum.
--inc $warning_count_1_1
--let $wait_condition= SELECT COUNT(*)=$warning_count_1_1 FROM performance_schema.error_log WHERE error_code='MY-015045' AND data LIKE '%The member % will be the one sending the recovery metadata message.%'
--source include/wait_condition.inc

--let $warning_count_1_2= SELECT COUNT(*)=$warning_count_1_2 FROM performance_schema.error_log WHERE error_code='MY-015046' AND data LIKE '%This member % will be the one sending the recovery metadata message.%'
--source include/wait_condition.inc

SET @@GLOBAL.group_replication_unreachable_majority_timeout= DEFAULT;

--connection server$server_not_sending_metadata2

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";

SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

--inc $warning_count_2_1
--let $wait_condition= SELECT COUNT(*)=$warning_count_2_1 FROM performance_schema.error_log WHERE error_code='MY-015045' AND data LIKE '%The member % will be the one sending the recovery metadata message.%'
--source include/wait_condition.inc

--let $warning_count_2_2= SELECT COUNT(*)=$warning_count_2_2 FROM performance_schema.error_log WHERE error_code='MY-015046' AND data LIKE '%This member % will be the one sending the recovery metadata message.%'
--source include/wait_condition.inc

SET @@GLOBAL.group_replication_unreachable_majority_timeout= DEFAULT;

--echo
--echo ############################################################
--echo # 8. M4(joiner) will go to OFFLINE state.
--echo #    Other members had recovery metadata but M4(joiner) left the group.

--let $rpl_connection_name= server4
--source include/connection.inc

--let $group_replication_member_state = OFFLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo ############################################################
--echo # 9. Cleanup.

--source include/group_replication_end.inc
