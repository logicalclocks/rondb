################################################################################
# Validate that when a member joins a group, and it is missing data that was
# purged from group binary logs, the joiner member will proceed by cloning a
# a group member. Since cloning will fail, the joiner will error out.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Install clone plugin on server1.
#    Commit some data and then purge all binary logs.
#    Bootstrap a group on server1 with version 8.3.0.
# 2. Install clone plugin on server2.
#    Start GR, cloning is the option chosen as recovery
#    from binary logs is not possible.
#    Member will move to ERROR state since cloning is not possible from
#    version 8.3.0
# 3. Cleanup
#

--source include/have_debug.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.
--echo #    Commit some data and then purge all binary logs.
--echo #    Bootstrap a group on server1 with version 8.3.0.

--let $rpl_connection_name= server1
--source include/connection.inc

# Install the clone plugin
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

# Add some data for recovery
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

# Purge binary logs.
SET sql_log_bin = 0;
--source include/rpl/gtid_utils.inc
SET sql_log_bin = 1;

FLUSH BINARY LOGS;
--let $server_binlog_file_cur= query_get_value(SHOW BINARY LOG STATUS, File, 1)
--replace_result $server_binlog_file_cur CURRENT_BINLOG_FILE
--eval PURGE BINARY LOGS TO '$server_binlog_file_cur'

--let $assert_text = GTID_PURGED must be equal to GTID_EXECUTED
--let $assert_cond = GTID_IS_EQUAL(@@GLOBAL.GTID_PURGED, @@GLOBAL.GTID_EXECUTED)
--source include/assert.inc

SET @@GLOBAL.DEBUG='+d,group_replication_version_clone_not_supported';
--source include/start_and_bootstrap_group_replication.inc

--echo
--echo ############################################################
--echo # 2. Install clone plugin on server2.
--echo #    Start GR, cloning is the option chosen as recovery
--echo #    from binary logs is not possible.
--echo #    Member will move to ERROR state since cloning is not possible from
--echo #    version 8.3.0

# Install the clone plugin
--let $rpl_connection_name= server2
--source include/connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

SET @gr_recovery_retry_count_save = @@GLOBAL.group_replication_recovery_retry_count;
SET GLOBAL group_replication_recovery_retry_count = 1;
SET @gr_clone_threshold_save= @@GLOBAL.group_replication_clone_threshold;
SET GLOBAL group_replication_clone_threshold= 1;

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"

--source include/start_group_replication_command.inc

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

SET @@GLOBAL.group_replication_recovery_retry_count = @gr_recovery_retry_count_save;
SET @@GLOBAL.group_replication_clone_threshold = @gr_clone_threshold_save;
--source include/stop_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Cleanup.
--let $rpl_connection_name= server1
--source include/connection.inc
SET SESSION sql_log_bin=0;
call mtr.add_suppression("Cannot replicate to server with server_uuid*");
SET SESSION sql_log_bin=1;

DROP TABLE t1;
--source include/rpl/gtid_utils_end.inc

UNINSTALL PLUGIN clone;
--source include/stop_group_replication.inc
SET @@GLOBAL.DEBUG='-d,group_replication_version_clone_not_supported';

--let $rpl_connection_name= server2
--source include/connection.inc

UNINSTALL PLUGIN clone;

SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
call mtr.add_suppression("Error reading packet from server for channel 'group_replication_recovery'*");
call mtr.add_suppression("Replica I/O for channel 'group_replication_recovery': Got fatal error 1236*");
call mtr.add_suppression("Error while starting the group replication incremental recovery receiver/applier threads");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached. Aborting group replication incremental recovery.");
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Replica I/O for channel group_replication_recovery.");
SET SESSION sql_log_bin=1;

--source include/group_replication_end.inc
