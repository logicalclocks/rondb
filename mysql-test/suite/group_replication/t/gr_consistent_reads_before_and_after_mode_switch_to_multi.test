################################################################################
# Validate that a transaction with consistency BEFORE_AND_AFTER does not block
# when changing to multi primary mode
#
# Test:
# 00. The test requires two servers on single primary mode: M1 and M2.
# 01. Bootstrap group with M1
# 02. Create table and insert data
# 03. Join M2 to group
# 04. Enable debug point that will block transaction with consistency
#     BEFORE_AND_AFTER
# 05. Send transaction with consistency BEFORE_AND_AFTER
# 06. Wait for execution reach debug point
# 07. Execute switch to multi primary mode
# 08. Assert server2 is primary and read only = 0
# 09. Signal to resume blocked transaction
# 10. Reap pending transaction
# 11. Clean up
################################################################################

--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 01. Bootstrap group with M1

--let $rpl_connection_name= server1
--source include/connection.inc

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo # 02. Create table and insert data

CREATE TABLE test.t1 (a INT PRIMARY KEY);

INSERT INTO t1 VALUES (1);

--echo
--echo # 03. Join M2 to group

--let $rpl_connection_name= server2
--source include/connection.inc

--source include/start_group_replication.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 04. Enable debug point that will block transaction with consistency
--echo #     BEFORE_AND_AFTER

--let $rpl_connection_name= server_2
--source include/connection.inc

--let $debug_point= group_replication_wait_on_observer_trans
--source include/add_debug_point.inc

--echo
--echo # 05. Send transaction with consistency BEFORE_AND_AFTER

SET @@SESSION.group_replication_consistency= 'BEFORE_AND_AFTER';

--send SELECT * FROM test.t1

--echo
--echo # 06. Wait for execution reach debug point

--let $rpl_connection_name= server2
--source include/connection.inc

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_wait_on_observer_trans_waiting";

--echo
--echo # 07. Execute switch to multi primary mode

--let $rpl_connection_name= server1
--source include/connection.inc

--replace_result $server2_uuid MEMBER_UUID
--eval SELECT group_replication_switch_to_multi_primary_mode();

--echo
--echo # 08. Assert server2 is primary and read only = 0

--let $rpl_connection_name= server2
--source include/connection.inc

--source include/gr_assert_multi_primary_mode.inc

--echo
--echo # 09. Signal to resume blocked transaction

SET DEBUG_SYNC= 'now SIGNAL signal.group_replication_wait_on_observer_trans_continue';

--echo
--echo # 10. Reap pending transaction

--let $rpl_connection_name= server_2
--source include/connection.inc

--reap

--echo
--echo # 11. Clean up

--let $rpl_connection_name= server2
--source include/connection.inc

--let $debug_point= group_replication_wait_on_observer_trans
--source include/remove_debug_point.inc

DROP TABLE test.t1;

--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
