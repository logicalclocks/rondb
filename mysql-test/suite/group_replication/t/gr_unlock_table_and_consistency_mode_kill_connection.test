###############################################################################
# This test proves that UNLOCK TABLES statement is blocked due to consistency
# mode BEFORE_ON_PRIMARY_FAILOVER. Blocked UNLOCK statement can be killed using
# KILL CONNECTION and later re-executed with EVENTUAL consistency.
#
# 0. The test requires two servers: M1, M2
# 1. Create table t1 and setup group of M1(primary), M2(secondary).
# 2. Lock table t1 on M2.
# 3. INSERT row in M1. Stop GR on M1. M2 will be become primary.
#    M2 will wait for pending transaction due to LOCK.
# 4. UNLOCK table on M2.
#    UNLOCK statement will be blocked due to consistency
#    BEFORE_ON_PRIMARY_FAILOVER
# 5. Check UNLOCK statement executed on other client session does no
#    release the LOCK table.
#    KILL the connection that is holding the LOCK.
#    Closing the client session that executed the LOCK statement, the
#    server implicitly releases all table locks held by the session.
# 6. Cleanup
###############################################################################

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc


--echo
--echo # 1. Create table t1 and setup group of M1(primary), M2(secondary).

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $connection_id= `SELECT CONNECTION_ID()`

--source include/start_group_replication.inc

--echo
--echo # 2. Lock table t1 on M2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET GLOBAL super_read_only= FALSE;
LOCK TABLE t1 WRITE;
SET GLOBAL super_read_only= TRUE;


--echo
--echo # 3. INSERT row in M1. Stop GR on M1. M2 will be become primary.
--echo #    M2 will wait for pending transaction due to LOCK.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@SESSION.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;
INSERT INTO t1 VALUES (1);

--source include/stop_group_replication.inc


--echo
--echo # 4. UNLOCK table on M2.
--echo #    UNLOCK statement will be blocked due to consistency
--echo #    BEFORE_ON_PRIMARY_FAILOVER

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "stage/group_rpl/Primary Election: applying buffered transactions"
--source include/wait_condition.inc

--send UNLOCK TABLES;


--echo
--echo # 5. Check UNLOCK statement executed on other client session does no
--echo #    release the LOCK table.
--echo #    KILL the connection that is holding the LOCK.
--echo #    Closing the client session that executed the LOCK statement, the
--echo #    server implicitly releases all table locks held by the session.

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET @group_replication_consistency_save= @@SESSION.group_replication_consistency;
SET @@SESSION.group_replication_consistency= 'EVENTUAL';
UNLOCK TABLES;
SET @@SESSION.group_replication_consistency= @group_replication_consistency_save;

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "stage/group_rpl/Primary Election: applying buffered transactions"
--source include/wait_condition.inc

--replace_result $connection_id CONNECTION_ID
--eval KILL CONNECTION $connection_id

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--reap

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "stage/group_rpl/Primary Election: applying buffered transactions"
--source include/wait_condition.inc


--echo
--echo # 6. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

DROP TABLE t1;

--source include/group_replication_end.inc
