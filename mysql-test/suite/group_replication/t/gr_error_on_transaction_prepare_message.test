# ==== PURPOSE ====
#
# This test is to validate execution of transactions with tagged GTIDs in
# topologies running with a Group Replication Plugin when using the consistency level AFTER.
#
# ==== Requirements ====
#
# R1. Transactions with Tags can use group_replication_consistency = AFTER
# R2. If an error ocurrs while reading a tag from a group replication
#     transaction prepare message the member shall error out and leave.
#
# ==== IMPLEMENTATION ====
#
# 1. Make server 2 fail when sending a prepare message
# 2. On server 1 execute a transactions that:
#    - Uses a tag
#    - Uses consistency level AFTER
# 3. Both server 1 and server 2 will read the message with the corrupted tag
#    Both servers error out.
#    The transaction will fail on server 1 but survive on server 2
# 4. Restart the group
# 5. On server 1 execute another transactions that:
#    - Uses a tag
#    - Uses consistency level AFTER
#    It should now succeed
# 6. Cleanup
#
# ==== REFERENCES ====
#
# WL#15294 Extending GTID with tags to identify group of transactions
#

--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--echo # 1. Make server 2 fail when sending a prepare message
--echo #

--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL debug = '+d,gr_corrupted_transaction_prepare_message';

--echo # 2. On server 1 execute a transactions that:
--echo #    - Uses a tag
--echo #    - Uses consistency level AFTER
--echo #

--let $rpl_connection_name= server1
--source include/connection.inc

CREATE TABLE t1(id INT PRIMARY KEY);

--let $rpl_connection_name= server_1
--source include/connection.inc

SET @@SESSION.group_replication_consistency= AFTER;
SET GTID_NEXT='AUTOMATIC:tag_1';
--send INSERT INTO t1 VALUES (1)

--echo # 3. Both server 1 and server 2 will read the message with the corrupted tag
--echo #    Both servers error out.
--echo #    The transaction will fail on server 1 but survive on server 2
--echo #

--let $rpl_connection_name= server1
--source include/connection.inc

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL debug = '-d,gr_corrupted_transaction_prepare_message';

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server_1
--source include/connection.inc

--error ER_RUN_HOOK_ERROR
--reap

SET GTID_NEXT='AUTOMATIC';

--echo # 4. Restart the group
--echo #

--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--source include/stop_group_replication.inc
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--source include/start_group_replication.inc

--echo # 5. On server 1 execute another transactions that:
--echo #    - Uses a tag
--echo #    - Uses consistency level AFTER
--echo #    It should now succeed
--echo #

SET @@SESSION.group_replication_consistency= AFTER;
SET GTID_NEXT='AUTOMATIC:tag_1';
INSERT INTO t1 VALUES (2);
SET GTID_NEXT='AUTOMATIC';

--source include/rpl/sync.inc

--let $rpl_connection_name= server2
--source include/connection.inc

--let $assert_text= 'There are 2 values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 2
--source include/assert.inc

--echo # 6. Cleanup
--echo #

DROP TABLE t1;

let $messages =
Failed to decode Group Replication message: Transaction_prepared_message.
The Applier process of Group Replication found an error and was requested to stop:
Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.
Due to a plugin error, some transactions were unable to be certified and will now rollback.
The server was automatically set into read only mode after an error was detected.
The server was automatically set into offline mode after an error was detected.
Error while waiting for conflict detection procedure to finish on session
Skipping leave operation: concurrent attempt to leave the group is on-going.
Replica SQL for channel 'group_replication_applier': Worker . failed executing transaction
Run function 'before_commit' in plugin 'group_replication' failed
.* The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state. *
Error on transaction .* while waiting for being prepared on all group members *
;
--source include/suppress_messages.inc

--source include/group_replication_end.inc
