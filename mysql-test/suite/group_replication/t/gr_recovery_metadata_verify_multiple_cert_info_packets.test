################################################################################
# This test proves that new member can still successfully join the group
# when recovery metadata donor member has big certification info size and
# therefore sends multiple packets of compressed certification info in
# recovery metadata to joiner.
#
# Test:
# 0. The test requires three servers: M1, M2 and M3.
# 1. Bootstrap start a GROUP on M1
#    In recovery certification_info data is send in multiple
#    packets, where each packet is of around 10 MB. Change
#    max compressed packet size from 10MB to 10000B using
#    group_replication_max_compressed_packet_size_10000 debug
#    point.
# 2. Start GR on M2.
#    Block applier channel on M2, so that remote transactions
#    can be blocked to apply and we can have some write-sets
#    on certification info.
# 3. Do some transactions so that we have 2500 write-sets on
#    certification info.
# 4. Start GR on M3.
#    The debug sync point
#    group_replication_certification_info_packet_count_check
#    would verify that compressed certification info packets
#    received by joiner M3 is greater then 1.
# 5. Unblock applier on M2 and
#    verify GR on M3 is ONLINE now.
# 6. Cleanup.
################################################################################

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Bootstrap start a GROUP on M1
--echo #    In recovery certification_info data is send in multiple
--echo #    packets, where each packet is of around 10 MB. Change
--echo #    max compressed packet size from 10MB to 10000B using
--echo #    group_replication_max_compressed_packet_size_10000 debug
--echo #    point.

--let $rpl_connection_name= server1
--source include/connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_max_compressed_packet_size_10000';
--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY AUTO_INCREMENT);


--echo
--echo ############################################################
--echo # 2. Start GR on M2.
--echo #    Block applier channel on M2, so that remote transactions
--echo #    can be blocked to apply and we can have some write-sets
--echo #    on certification info.

--let $rpl_connection_name= server2
--source include/connection.inc
--source include/start_group_replication.inc

# Block writes on "group_replication_applier" channel.
SET @@GLOBAL.DEBUG= '+d,block_applier_updates';
SET @@GLOBAL.DEBUG= '+d,group_replication_max_compressed_packet_size_10000';
SET @@GLOBAL.DEBUG= '+d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';


--echo
--echo ############################################################
--echo # 3. Do some transactions so that we have 2500 write-sets on
--echo #    certification info.
--let $rpl_connection_name= server1
--source include/connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';
--disable_query_log
--let $trxs=5
while($trxs)
{
  --let $rows=500
  BEGIN;
  while($rows)
  {
    --eval INSERT INTO t1 VALUES (NULL)
    --dec $rows
  }
  COMMIT;
  --dec $trxs
}
--enable_query_log


--let $assert_text= 'Count_transactions_rows_validating must be equal to 2500 on server1'
--let $assert_cond= "2500" = "[SELECT Count_transactions_rows_validating FROM performance_schema.replication_group_member_stats WHERE member_id IN (SELECT @@server_uuid)]"
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Start GR on M3.
--echo #    The debug sync point
--echo #    group_replication_certification_info_packet_count_check
--echo #    would verify that compressed certification info packets
--echo #    received by joiner M3 is greater then 1.

--let $rpl_connection_name= server3
--source include/connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_certification_info_packet_count_check';

--disable_query_log
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
--enable_query_log
--source include/start_group_replication_command.inc


--echo
--echo ############################################################
--echo # 5. Unblock applier on M2 and
--echo #    verify GR on M3 is ONLINE now.

--let $rpl_connection_name= server2
--source include/connection.inc
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";


--let $rpl_connection_name= server3
--source include/connection.inc
--let $wait_timeout= 300
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc


--echo
--echo ############################################################
--echo # 6. Cleanup.

SET @@GLOBAL.DEBUG= '-d,group_replication_certification_info_packet_count_check';

--let $rpl_connection_name= server1
--source include/connection.inc
DROP TABLE t1;
SET @@GLOBAL.DEBUG= '-d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
SET @@GLOBAL.DEBUG= '-d,group_replication_max_compressed_packet_size_10000';

--let $rpl_connection_name= server2
--source include/connection.inc
SET @@GLOBAL.DEBUG= '-d,group_replication_do_not_clear_certification_database';
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
SET @@GLOBAL.DEBUG= '-d,group_replication_max_compressed_packet_size_10000';

--source include/group_replication_end.inc
