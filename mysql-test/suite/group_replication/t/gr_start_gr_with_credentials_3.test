################################################################################
# This test proves USER option is mandatory with PASSWORD option in
# START GROUP_REPLICATION command and tests the password limit of 32 character.
# This test also check DEFAULT_AUTH picks credentials from
# CHANGE REPLICATION SOURCE if USER and PASSWORD option are not provided in
# START GROUP_REPLICATION command.
#
# Test:
# 1. Bootstrap M1. And create new users.
# 2. Reset recovery interval to 1 and count to 2 for M2.
# 3. Test empty USER is not accepted by START GR.
# 3. Test password limits.
#    Test username displayed is correct in ps table.
# 4. Test credentials without USER are not accepted.
# 5. Test DEFAULT_AUTH without USER.
#    Credentials are not set in CHANGE REPLICATION SOURCE so START GR fails.
# 6. Set credentials in CHANGE REPLICATION SOURCE.
#    Pass only DEFAULT_AUTH in START GR.
#    Credentials are picked from CHANGE REPLICATION SOURCE.
# 7. Cleanup.
################################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_xcom_communication_stack.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap M1. And create new users.

--let $rpl_connection_name= server1
--source include/connection.inc

--replace_result $PLUGIN_AUTH PLUGIN_AUTH
--eval INSTALL PLUGIN test_plugin_server SONAME '$PLUGIN_AUTH'

--source include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);

SET SQL_LOG_BIN=0;

CREATE USER 'regular_user_p' IDENTIFIED BY '012345678901234567890123456789ab';
CREATE USER 'regular_user_wp' IDENTIFIED BY '';
CREATE USER 'plug_user_p' IDENTIFIED WITH 'test_plugin_server' AS 'proxy_user_p';
CREATE USER 'plug_user_wp' IDENTIFIED WITH 'test_plugin_server' AS 'proxy_user_wp';
CREATE USER 'proxy_user_p' IDENTIFIED BY 'password';
CREATE USER 'proxy_user_wp' IDENTIFIED BY '';

GRANT REPLICATION SLAVE ON *.* TO "regular_user_p";
GRANT REPLICATION SLAVE ON *.* TO "regular_user_wp";
GRANT ALL PRIVILEGES ON *.* TO 'proxy_user_p';
GRANT ALL PRIVILEGES ON *.* TO 'proxy_user_wp';
GRANT PROXY ON 'proxy_user_p' to 'plug_user_p';
GRANT PROXY ON 'proxy_user_wp' to 'plug_user_wp';
GRANT REPLICATION SLAVE ON *.* TO 'plug_user_p';
GRANT REPLICATION SLAVE ON *.* TO 'plug_user_wp';

SET SQL_LOG_BIN=1;

--echo
--echo # 2. Reset recovery interval to 1 and count to 2 for M2.

--let $rpl_connection_name= server2
--source include/connection.inc

--replace_result $PLUGIN_AUTH PLUGIN_AUTH
--eval INSTALL PLUGIN test_plugin_server SONAME '$PLUGIN_AUTH'

SET @saved_group_replication_recovery_reconnect_interval = @@GLOBAL.group_replication_recovery_reconnect_interval;
SET @saved_gr_recovery_retry_count = @@GLOBAL.group_replication_recovery_retry_count;
SET @old_log_output= @@log_output;
SET GLOBAL log_output= 'TABLE,FILE';

SET GLOBAL group_replication_recovery_reconnect_interval= 1;
SET GLOBAL group_replication_recovery_retry_count= 2;
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"

RESET REPLICA ALL FOR CHANNEL 'group_replication_recovery';

--echo
--echo # 3. Test empty USER is not accepted by START GR.
--echo #    Test username displayed is correct in ps table.

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (1);
--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
--error ER_GROUP_REPLICATION_USER_EMPTY_MSG
START GROUP_REPLICATION USER='';
--let $assert_text= Command is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION%"]" = "0"
--source include/assert.inc

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (2);
--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
--error ER_PARSE_ERROR
START GROUP_REPLICATION USER;
--let $assert_text= Command is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION%"]" = "0"
--source include/assert.inc

--echo
--echo # 3. Test password limits.

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (3);
--let $rpl_connection_name= server2
--source include/connection.inc

# Test max password length is 32, password length 33 throws error
SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
--error ER_GROUP_REPLICATION_PASSWORD_LENGTH
START GROUP_REPLICATION USER='regular_user_p' , PASSWORD='012345678901234567890123456789abc';
--let $assert_text= Command is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION%"]" = "0"
--source include/assert.inc

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (4);
--let $rpl_connection_name= server2
--source include/connection.inc

# Test max password length is 32, password length 32 works
SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;

--let $rpl_connection_name= server1
--source include/connection.inc
SET @@GLOBAL.DEBUG='+d,dump_thread_before_read_event';

--let $rpl_connection_name= server2
--source include/connection.inc
START GROUP_REPLICATION USER='regular_user_p' , PASSWORD='012345678901234567890123456789ab';

--let $wait_condition=SELECT SERVICE_STATE="ON" FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME='group_replication_recovery'
--source include/wait_condition.inc

--let $assert_text= User name displayed is of supplied in command.
--let $assert_cond= "[SELECT USER FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="group_replication_recovery"]" = "regular_user_p"
--source include/assert.inc

--let $rpl_connection_name= server1
--source include/connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc
SET @@GLOBAL.DEBUG='-d,dump_thread_before_read_event';
SET DEBUG_SYNC = "now SIGNAL signal.continue";

--let $rpl_connection_name= server2
--source include/connection.inc
--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server1
--source include/connection.inc
SET DEBUG_SYNC= 'RESET';

--let $rpl_connection_name= server2
--source include/connection.inc
--let $assert_text= User name displayed is empty.
--let $assert_cond= "[SELECT USER FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="group_replication_recovery"]" = ""
--source include/assert.inc

--source include/stop_group_replication.inc
--let $assert_text= Password is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD_=%012345678901234567890123456789ab%"]" = "0"
--source include/assert.inc
--let $assert_text= Password is logged as secret.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD_=%<secret>%"]" = "1"
--source include/assert.inc

--echo
--echo # 4. Test credentials without USER are not accepted.

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (5);
--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
--error ER_GROUP_REPLICATION_USER_MANDATORY_MSG
START GROUP_REPLICATION PASSWORD='wrong';
--let $assert_text= Password is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD_=%012345678901234567890123456789ab%"]" = "0"
--source include/assert.inc
--let $assert_text= Password is logged as secret.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD_=%<secret>%"]" = "1"
--source include/assert.inc

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (6);
--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
--error ER_GROUP_REPLICATION_USER_EMPTY_MSG
START GROUP_REPLICATION USER='',PASSWORD='wrong';
--let $assert_text= Command is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION%"]" = "0"
--source include/assert.inc

--echo
--echo # 5. Test DEFAULT_AUTH without USER.
--echo #    Credentials are not set in CHANGE REPLICATION SOURCE so START GR fails.

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (7);
--let $rpl_connection_name= server2
--source include/connection.inc

# Below command fails because username and password are not stored in
# CHANGE REPLICATION SOURCE, same command later succeed when username and password
# are saved via CHANGE REPLICATION SOURCE.
# Quote is not added in logs if USER and PASSWORD options are not provided.
SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
START GROUP_REPLICATION DEFAULT_AUTH='auth_test_plugin';
--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc
--source include/stop_group_replication.inc
--let $assert_text= User is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %USER%"]" = "0"
--source include/assert.inc
--let $assert_text= Password is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD%"]" = "0"
--source include/assert.inc
--let $assert_text= Quote is not present before DEFAULT_AUTH.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION DEFAULT_AUTH%"]" = "1"
--source include/assert.inc

--echo
--echo # 6. Set credentials in CHANGE REPLICATION SOURCE.
--echo #    Pass only DEFAULT_AUTH in START GR.
--echo #    Credentials are picked from CHANGE REPLICATION SOURCE.

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (8);
--let $rpl_connection_name= server2
--source include/connection.inc

CHANGE REPLICATION SOURCE TO SOURCE_USER='plug_user_p' , SOURCE_PASSWORD='proxy_user_p' FOR CHANNEL 'group_replication_recovery';

# Quote is not added in logs if USER and PASSWORD options are not provided.
SET GLOBAL super_read_only= FALSE;
SET SQL_LOG_BIN=0;
TRUNCATE mysql.general_log;
SET SQL_LOG_BIN=1;
START GROUP_REPLICATION DEFAULT_AUTH='auth_test_plugin';
--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc
--source include/stop_group_replication.inc
--let $assert_text= User is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %USER%"]" = "0"
--source include/assert.inc
--let $assert_text= Password is not logged.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION %PASSWORD%"]" = "0"
--source include/assert.inc
--let $assert_text= Quote is not present before DEFAULT_AUTH.
--let $assert_cond= "[SELECT COUNT(*) FROM mysql.general_log WHERE argument LIKE "START GROUP_REPLICATION DEFAULT_AUTH%"]" = "1"
--source include/assert.inc

# Commit one transaction on server1 that will need to be replicated through
# `group_replication_recovery` channel.
--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (9);
--let $rpl_connection_name= server2
--source include/connection.inc

# Below command proves value of DEFAULT_AUTH matters.
START GROUP_REPLICATION DEFAULT_AUTH='wrong';
--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc
--source include/stop_group_replication.inc

--echo
--echo # 7. Cleanup.

CHANGE REPLICATION SOURCE TO SOURCE_USER='root' , SOURCE_PASSWORD='' FOR CHANNEL 'group_replication_recovery';

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Replica I/O for channel 'group_replication_recovery': Fatal error: Invalid .* username when attempting to connect to the source server.*");
call mtr.add_suppression("There was an error when connecting to the donor server. Please check that group_replication_recovery channel credentials and all MEMBER_HOST column values of performance_schema.replication_group_members table are correct and DNS resolvable.");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Replica I/O for channel group_replication_recovery.");
call mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached. Aborting group replication incremental recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
SET SESSION sql_log_bin = 1;

SET @@GLOBAL.group_replication_recovery_reconnect_interval = @saved_group_replication_recovery_reconnect_interval;
SET @@GLOBAL.group_replication_recovery_retry_count = @saved_gr_recovery_retry_count;
SET GLOBAL log_output= @old_log_output;
UNINSTALL PLUGIN test_plugin_server;

--let $rpl_connection_name= server1
--source include/connection.inc
DROP TABLE t1;

SET SQL_LOG_BIN=0;

DROP USER 'regular_user_p';
DROP USER 'regular_user_wp';

DROP USER 'plug_user_p';
DROP USER 'plug_user_wp';
DROP USER 'proxy_user_p';
DROP USER 'proxy_user_wp';

SET SQL_LOG_BIN=1;
UNINSTALL PLUGIN test_plugin_server;

--source include/group_replication_end.inc

--let $rpl_connection_name= server2
--source include/connection.inc
DROP TABLE t1;
TRUNCATE mysql.general_log;
