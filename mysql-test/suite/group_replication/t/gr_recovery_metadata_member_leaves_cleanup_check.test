################################################################################
# This test proves that recovery metadata sender cleans the member leaving the
# group. This test also proves that member leaving the group cleans all the
# metadata. This test verifies FR10 and FR12 of wl#14595.
#
# FR 10. When a group member leaves the group or changes it's member state from
#        ONLINE to either of ERROR/OFFLINE, then it MUST delete it's stored 'GR
#        Recovery Metadata'.
# FR 11. When a group member leaves the group or changes it's member state from
#        ONLINE to either of ERROR/OFFLINE, then all the group members MUST
#        remove this member from there lists of ONLINE group members which was
#        stored when a new member joined.
# FR 12. After new joining member successfully receives compressed 'GR Recovery
#        Metadata', then it MUST be deleted from all the members holding this
#        metadata.
#
# Test:
# 0. The test requires three servers: M1, M2 and M3.
# 1. Bootstrap a GROUP on M1
# 2. Start GR on M2.
# 3. Set debug point
#    gr_wait_before_sending_metadata on server sending metadata.
#    Set debug point
#    group_replication_recovery_metadata_message_member_is_being_deleted
#    on server sending metadata.
# 4. Set debug point
#    group_replication_recovery_metadata_module_delete_all_stored_metadata
#    on server not sending metadata.
# 5. Start GR on M3.
# 6. Stop GR on server not sending metadata.
# 7. Now allow donor to send metadata.
# 8. Check member leaving the group does clean all the metadata.
# 9. Check donor does clean the member that left the group.
# 10. Check donor does clean the metadata when joiner receives the metadata.
# 11. Verify joiner reached ONLINE state.
# 12. Cleanup.
#
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Bootstrap a GROUP on M1

--let $rpl_connection_name= server1
--source include/connection.inc

--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_and_bootstrap_group_replication.inc

--echo
--echo ############################################################
--echo # 2. Start GR on M2.

--let $rpl_connection_name= server2
--source include/connection.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Set debug point
--echo #    gr_wait_before_sending_metadata on server sending metadata.
--echo #    Set debug point
--echo #    group_replication_recovery_metadata_message_member_is_being_deleted
--echo #    on server sending metadata.

--let $metadata_donor= query_get_value(SELECT member_id FROM performance_schema.replication_group_members ORDER BY member_id, member_id, 1)

--let $server_not_sending_metadata= 2
--let $server_sending_metadata= 1
if ($metadata_donor == $member2_uuid) {
  --let $server_not_sending_metadata= 1
  --let $server_sending_metadata= 2
}

--connection server$server_sending_metadata

SET @@GLOBAL.DEBUG='+d,gr_wait_before_sending_metadata';
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_message_member_is_being_deleted';
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

--echo
--echo ############################################################
--echo # 4. Set debug point
--echo #    group_replication_recovery_metadata_module_delete_all_stored_metadata
--echo #    on server not sending metadata.

--connection server$server_not_sending_metadata
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_all_stored_metadata';

--echo
--echo ############################################################
--echo # 5. Start GR on M3.

--let $rpl_connection_name= server3
--source include/connection.inc

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 6. Stop GR on server not sending metadata.

--connection server$server_not_sending_metadata
--source include/stop_group_replication.inc

--echo
--echo ############################################################
--echo # 7. Now allow donor to send metadata.

--connection server$server_sending_metadata

# We need to unblock the pipeline.

SET DEBUG_SYNC= "now WAIT_FOR signal.reached_recovery_metadata_send";
SET @@GLOBAL.DEBUG='-d,gr_wait_before_sending_metadata';
SET DEBUG_SYNC= "now SIGNAL signal.send_the_recovery_metadata";

--echo
--echo ############################################################
--echo # 8. Check member leaving the group does clean all the metadata.

--connection server$server_not_sending_metadata
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_all_stored_metadata_reached";
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_all_stored_metadata';

--echo
--echo ############################################################
--echo # 9. Check donor does clean the member that left the group.

--connection server$server_sending_metadata

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_message_member_is_being_deleted_reached";
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_message_member_is_being_deleted';

--echo
--echo ############################################################
--echo # 10. Check donor does clean the metadata when joiner receives the metadata.

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';


--echo
--echo ############################################################
--echo # 11. Verify joiner reached ONLINE state.

--let $rpl_connection_name= server3
--source include/connection.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo ############################################################
--echo # 12. Cleanup.

--source include/group_replication_end.inc
