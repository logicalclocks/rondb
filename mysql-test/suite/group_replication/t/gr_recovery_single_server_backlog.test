################################################################################
# Validate that a single member goes through recovery process,
# consume existing applier relay log, even when it is the single
# member of the group.
# The server shall log the UUID and intervals of transactions
# that exist on applier relay log.
#
# Test:
# 0. The test requires two servers.
# 1. Assert that server1 hasn't logged message. There aren't
#    transactions from applier relay log to be applied on
#    recovery
# 2. Assert that server2 hasn't logged message. There aren't
#    transactions from applier relay log to be applied on
#    recovery
# 3. Block SQL Threads on server2 so that all remote transactions are only queued
#    on relay log. Execute some transactions on server1.
# 4. Wait until server2 receives and certifies the transaction.
# 5. Make both members leave the group.
# 6. Lock table on server2. Bootstrap start Group Replication only on server2.
#    Validate that Member state is RECOVERING, despite being the only group
#    member, since it is applying group applier relay log. Unlock tables. Wait
#    until server2 comes ONLINE.
# 7. Assert that server1 and server2 have the same data and GTID_EXECUTED.
# 8. Assert that server has transactions from applier relay
#    log to be applied on recovery.
# 9. Assert that server applied  transactions from applier
#    relay log.
# 10. Clean up.
################################################################################
--source include/big_test.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Assert that server1 hasn't logged message. There aren't
--echo #    transactions from applier relay log to be applied on
--echo #    recovery

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.1.err
--let $assert_text = Log transactions to be applied from applier relay log
--let $assert_select = Distributed recovery will wait until the transactions '$group_replication_group_name:.*' contained on the 'group_replication_applier' channel are applied.
--let $assert_count = 0
--source include/assert_grep.inc

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.1.err
--let $assert_text = Log transactions applied from applier relay log
--let $assert_select = Distributed recovery finished applying the transactions '$group_replication_group_name:.*' contained on the 'group_replication_applier' channel\.
--let $assert_count = 0
--source include/assert_grep.inc

--echo
--echo ############################################################
--echo # 2. Assert that server2 hasn't logged message. There aren't
--echo #    transactions from applier relay log to be applied on
--echo #    recovery

--let $rpl_connection_name= server2
--source include/connection.inc
--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.2.err
--let $assert_text = Log transactions to be applied from applier relay log
--let $assert_select = Distributed recovery will wait until the transactions '$group_replication_group_name:.*' contained on the 'group_replication_applier' channel are applied.
--let $assert_count = 0
--source include/assert_grep.inc

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.2.err
--let $assert_text = Log transactions applied from applier relay log
--let $assert_select = Distributed recovery finished applying the transactions '$group_replication_group_name:.*' contained on the 'group_replication_applier' channel\.
--let $assert_count = 0
--source include/assert_grep.inc


--echo
--echo ############################################################
--echo # 3. Stop SQL Threads on server2 so that all remote transactions
--echo # are only queued on relay log. Execute some transactions on
--echo # server1.
--let $rpl_connection_name= server1
--source include/connection.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl/sync.inc

--let $rpl_connection_name= server2
--source include/connection.inc
SET @@GLOBAL.DEBUG='+d,block_applier_updates';

--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (1);


--echo
--echo ################################################################
--echo # 4. Wait until server2 receives and certifies the transaction.
--let $rpl_connection_name= server2
--source include/connection.inc
--let $wait_condition= SELECT (Count_transactions_checked - Count_conflicts_detected) = 2 from performance_schema.replication_group_member_stats
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 5. Make both members leave the group.
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/stop_group_replication.inc
--let $rpl_connection_name= server2
--source include/connection.inc
# Do not commit the received transactions.
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET @@GLOBAL.DEBUG='+d,force_sql_thread_error';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc
SET @@GLOBAL.DEBUG='-d,force_sql_thread_error';
--source include/stop_group_replication.inc
SET DEBUG_SYNC= 'RESET';


--echo
--echo ############################################################
--echo # 6. Start Group Replication only on server2. Validate that
--echo # Member state is RECOVERING, despite being the only group
--echo # member, since it is applying group applier relay log.
# Force group applier relay log to wait on a table lock so that the
# next wait_for_member_state is deterministic.
--let $rpl_connection_name= server_2
--source include/connection.inc
LOCK TABLE t1 WRITE;

--let $rpl_connection_name= server2
--source include/connection.inc

SET GLOBAL debug= '+d,group_replication_skip_read_mode';

--let $group_replication_start_member_state= RECOVERING
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server_2
--source include/connection.inc
UNLOCK TABLES;

--let $rpl_connection_name= server2
--source include/connection.inc
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

SET GLOBAL debug= '-d,group_replication_skip_read_mode';

--echo
--echo ############################################################
--echo # 7. Assert that server1 and server2 have the same data and
--echo # GTID_EXECUTED.
--let $rpl_connection_name= server1
--source include/connection.inc
--let $assert_text= 'There is a value 1 in table t1 on server1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/connection.inc
--let $assert_text= 'There is a value 1 in table t1 on server2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc

--let $server2_gtid_executed= `SELECT @@GLOBAL.GTID_EXECUTED`
--let $assert_text= 'server2 GTID_EXECUTED must contain the 2 transactions'
--let $assert_cond= "$server2_gtid_executed" = "$group_replication_group_name:1-2"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 8. Assert that server has transactions from applier relay
--echo #    log to be applied on recovery.

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.2.err
--let $assert_text = Log transactions to be applied from applier relay log
--let $assert_select = Distributed recovery will wait until the transactions '$group_replication_group_name:2' contained on the 'group_replication_applier' channel are applied.
--let $assert_count = 1
--source include/assert_grep.inc

--echo ############################################################
--echo # 9. Assert that server applied  transactions from applier
--echo #    relay log.

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_recovery_single_server_backlog.2.err
--let $assert_text = Log transactions applied from applier relay log
--let $assert_select = Distributed recovery finished applying the transactions '$group_replication_group_name:2' contained on the 'group_replication_applier' channel\.
--let $assert_count = 1
--source include/assert_grep.inc

--echo
--echo ############################################################
--echo # 10. Clean up.
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/start_group_replication.inc

DROP TABLE t1;

--let $rpl_connection_name= server2
--source include/connection.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Replica SQL for channel 'group_replication_applier': Relay log read failure: Could not parse relay log event entry.*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;

--source include/group_replication_end.inc
