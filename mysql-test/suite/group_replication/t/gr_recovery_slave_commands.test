###############################################################################
# BUG 21626827 - SOME COMMAND SHOULD NOT BE ALLOWED FOR CHANNEL
#                'GROUP_REPLICATION_RECOVERY'
#
# This test checks to see that user should not be allowed to execute
# set of commands for the group_replication_recovery channel.
#
# Bug 23591186 - WL#9053 : MODIFY MTR TESTS TO VERIFY BEHAVIOR OF
#               'GROUP_REPLICATION_RECOVERY'
# The test is extended to check the behavior when MEMBER is in RECOVERING,
# ONLINE, OFFLINE states.
#
# The commands being checked here are :
# 1. START REPLICA IO_THREAD
# 2. STOP REPLICA IO_THREAD
# 3. START REPLICA FOR CHANNEL
# 4. STOP REPLICA FOR CHANNEL
# 5. START REPLICA SQL_THREAD
# 6. STOP REPLICA SQL_THREAD
# 7. SHOW REPLICA STATUS
# 8. SHOW RELAYLOG EVENTS
# 9. FLUSH RELAY LOGS
# 10. RESET REPLICA
# 11. RESET REPLICA ALL
#
# Test:
# 0. The test requires two servers: M1 and M2.
#
# 1. Bootstrap start GR on M1. Test above mentioned 11 RPL(slave) commands
#    for recovery channel:-
#  - MEMBER_STATE: ONLINE and recovery channel is ABSENT.
#  - Expect ER_REPLICA_CHANNEL_DOES_NOT_EXIST.
#
# 2. Add some data for recovery on M1. Start GR on M2. Test above mentioned
#    11 RPL(slave) commands for recovery channel:-
#  - MEMBER_STATE: ONLINE and recovery channel is PRESENT but INACTIVE.
#  - Expect ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED in most of the cases.
#
# 3. Stop GR on M2. Add data on M1. Lock table on M2 to block recovery.
#    Start GR on M2.
#
# 4. Now when M2 is in RECOVERING state, test above mentioned 11 RPL(slave)
#    commands on recovery channel:-
#  - MEMBER_STATE: RECOVERING and recovery channel is ACTIVE.
#  - Expect ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED in most of the cases.
#
# 5. Unlock tables on M2 and drop table t1 on M1. Stop GR on M2. Test above
#    mentioned 11 RPL(slave) commands:-
#  - MEMBER_STATE: OFFLINE and recovery channel is PRESENT but INACTIVE.
#  - Expect ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED in most of the cases.
###############################################################################

# Skip configuration of recovery channel

--source include/big_test.inc
--source include/have_group_replication_xcom_communication_stack.inc
--let $skip_recovery_configuration = 1
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Phase 1
--echo
--echo # Bootstrap start GR on M1 and test commands for recovery channel
--echo # when MEMBER_STATE: ONLINE and recovery channel is ABSENT

--let $rpl_connection_name= server1
--source include/connection.inc
set session sql_log_bin=0;
call mtr.add_suppression("Replica channel 'group_replication_recovery' does not exist.*");
set session sql_log_bin=1;

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo # CRS for 'group_replication_recovery' channel won't accept parameters other than
--echo # Source_User and SOURCE_PASSWORD
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
CHANGE REPLICATION SOURCE TO SOURCE_HOST="localhost", SOURCE_PORT=10 FOR CHANNEL "group_replication_recovery";

--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
CHANGE REPLICATION SOURCE TO SOURCE_TLS_CIPHERSUITES="foo" FOR CHANNEL "group_replication_recovery";

--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
CHANGE REPLICATION SOURCE TO SOURCE_CONNECTION_AUTO_FAILOVER=1 FOR CHANNEL "group_replication_recovery";

--echo
--echo # ERROR when executing STOP REPLICA on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
STOP REPLICA FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing START REPLICA on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
START REPLICA FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing STOP REPLICA IO_THREAD on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
STOP REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing START REPLICA IO_THREAD on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
START REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing STOP REPLICA SQL_THREAD on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
STOP REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing START REPLICA SQL_THREAD on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
START REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing SHOW REPLICA STATUS on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
--query_vertical SHOW REPLICA STATUS FOR CHANNEL 'group_replication_recovery'

--echo
--echo # ERROR when executing SHOW RELAYLOG EVENTS on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
SHOW RELAYLOG EVENTS  FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing FLUSH RELAY LOGS on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
FLUSH RELAY LOGS FOR CHANNEL 'group_replication_recovery';

--echo
--echo # ERROR when executing RESET REPLICA command on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
RESET REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # ERROR when executing RESET REPLICA ALL command on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
RESET REPLICA ALL FOR CHANNEL "group_replication_recovery";

# Phase 2
--echo
--echo # Add some data for recovery on M1. Start GR on M2.

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server2
--source include/connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("Transaction cannot be executed while Group Replication is recovering.*");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
set session sql_log_bin=1;

--disable_warnings
CHANGE REPLICATION SOURCE TO SOURCE_USER="root" FOR CHANNEL "group_replication_recovery";
--enable_warnings
--source include/start_group_replication.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status where CHANNEL_NAME="group_replication_recovery" and SERVICE_STATE="OFF"
--source include/wait_condition.inc

--echo
--echo # Test commands for recovery channel when MEMBER_STATE: ONLINE and
--echo # recovery channel is PRESENT but INACTIVE.

--echo
--echo # STOP REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # START REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # SHOW REPLICA STATUS - check that recovery channel is inactive
--let $io_thread = query_get_value(SHOW REPLICA STATUS FOR CHANNEL 'group_replication_recovery', Replica_IO_Running, 1)
--let $assert_text= recovery channel is inactive
--let $assert_cond= "$io_thread" = "No"
--source include/assert.inc

--echo
--echo # SHOW RELAYLOG EVENTS - check that relaylogs are created
--let $relay_log_name= query_get_value(SHOW RELAYLOG EVENTS FOR CHANNEL 'group_replication_recovery', Log_name, 1)
--let $assert_text= Relay logs are created
--let $assert_cond= "$relay_log_name" <> ""
--source include/assert.inc

--echo
--echo # SUCCESS when executing FLUSH RELAY LOGS on GR recovery channel
FLUSH RELAY LOGS FOR CHANNEL 'group_replication_recovery';

--echo
--echo # SUCCESS when executing RESET REPLICA on GR recovery channel
RESET REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # Execute RESET REPLICA ALL FOR CHANNEL to delete the recovery channel
--echo # and related files
RESET REPLICA ALL FOR CHANNEL "group_replication_recovery";

# Phase 3
--echo
--echo # Stop GR on M2. Add data on M1. Lock table on M2 to block recovery.
--echo # Start GR on M2.

# Stop group replication and lock table t1 on server 2 to block recovery.
--let $rpl_connection_name= server2
--source include/connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/connection.inc
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);

# Lock the table in a different connection
--let $rpl_connection_name= server_2
--source include/connection.inc
LOCK TABLE t1 READ;

--let $rpl_connection_name= server2
--source include/connection.inc
--disable_warnings
CHANGE REPLICATION SOURCE TO SOURCE_USER="root" FOR CHANNEL "group_replication_recovery";
--enable_warnings

--echo
--echo # Ensure that M2 is blocked in recovery stage so channel exists

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--let $wait_timeout= 60
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status where CHANNEL_NAME="group_replication_recovery" and SERVICE_STATE="ON"
--source include/wait_condition.inc

# Phase 4
--echo
--echo # Now when M2 is in RECOVERING state, test commands for recovery channel
--echo # when MEMBER_STATE: RECOVERING and recovery channel is ACTIVE.

--echo
--echo # STOP REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # START REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA IO_THREAD with UNTIL option is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA IO_THREAD UNTIL SOURCE_LOG_FILE = 'server-binary-log.000001', SOURCE_LOG_POS = 754 FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA SQL_THREAD with UNTIL option is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA SQL_THREAD UNTIL SQL_AFTER_GTIDS='11111111-1111-1111-1111-111111111111:1-23' FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA SQL_THREAD with UNTIL option is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA SQL_THREAD UNTIL RELAY_LOG_FILE = 'server-relay-log-group_replication_recovery.000001', RELAY_LOG_POS = 854 FOR CHANNEL 'group_replication_recovery';

--echo
--echo # SHOW REPLICA STATUS - check that recovery channel is active
--let $io_thread = query_get_value(SHOW REPLICA STATUS FOR CHANNEL 'group_replication_recovery', Replica_IO_Running, 1)
--let $assert_text= recovery channel is active
--let $assert_cond= "$io_thread" = "Yes"
--source include/assert.inc

--echo
--echo # SHOW RELAYLOG EVENTS - Relay log files should exists
--let $relay_log_name= query_get_value(SHOW RELAYLOG EVENTS FOR CHANNEL 'group_replication_recovery', Log_name, 1)
--let $assert_text= Relay log name should not be empty as the command successfully executed.
--let $assert_cond= "$relay_log_name" <> ""
--source include/assert.inc

# Bug#23575646 : FLUSH RELAY LOGS SHOULD HIT ERROR 3139 WHEN SERVER STATE IS RECOVERING
--echo
--echo # ERROR when executing FLUSH RELAY LOGS on GR recovery channel
--error ER_RUN_HOOK_ERROR
FLUSH RELAY LOGS FOR CHANNEL 'group_replication_recovery';

--echo
--echo # RESET REPLICA command is blocked only when recovery channel is active.
--error ER_REPLICA_CHANNEL_MUST_STOP
RESET REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # RESET REPLICA [ALL] command is blocked only when recovery channel is active.
--error ER_REPLICA_CHANNEL_MUST_STOP
RESET REPLICA ALL FOR CHANNEL "group_replication_recovery";


# Phase 5
--echo
--echo # Unlock tables on M2 and drop table t1 on M1. Stop GR on M2. Test
--echo # for recovery channel when MEMBER_STATE: OFFLINE and recovery channel
--echo # is PRESENT but INACTIVE.

--let $rpl_connection_name= server_2
--source include/connection.inc
UNLOCK TABLES;

--let $rpl_connection_name= server1
--source include/connection.inc
DROP TABLE t1;

--source include/rpl/sync.inc

--let $rpl_connection_name= server2
--source include/connection.inc
--source include/stop_group_replication.inc

--echo
--echo # STOP REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # START REPLICA is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA IO_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA IO_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # STOP REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
STOP REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # START REPLICA SQL_THREAD is blocked on GR recovery channel
--error ER_REPLICA_CHANNEL_OPERATION_NOT_ALLOWED
START REPLICA SQL_THREAD FOR CHANNEL 'group_replication_recovery';

--echo
--echo # SHOW REPLICA STATUS - check that recovery channel is inactive
--let $io_thread = query_get_value(SHOW REPLICA STATUS FOR CHANNEL 'group_replication_recovery', Replica_IO_Running, 1)
--let $assert_text= recovery channel is inactive
--let $assert_cond= "$io_thread" = "No"
--source include/assert.inc

--echo
--echo # SHOW RELAYLOG EVENTS - check that relaylogs are not deleted
--let $relay_log_name= query_get_value(SHOW RELAYLOG EVENTS FOR CHANNEL 'group_replication_recovery', Log_name, 1)
--let $assert_text= Relay logs are not deleted
--let $assert_cond= "$relay_log_name" <> ""
--source include/assert.inc

--echo
--echo # Execute RESET REPLICA ALL FOR CHANNEL to delete the recovery channel
--echo # and related files
RESET REPLICA ALL FOR CHANNEL "group_replication_recovery";

--echo
--echo # ERROR when executing RESET REPLICA on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
RESET REPLICA FOR CHANNEL "group_replication_recovery";

--echo
--echo # ERROR when executing FLUSH RELAY LOGS on GR recovery channel
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
FLUSH RELAY LOGS FOR CHANNEL 'group_replication_recovery';

--source include/group_replication_end.inc
