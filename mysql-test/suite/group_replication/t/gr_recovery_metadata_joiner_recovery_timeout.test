################################################################################
# This test proves that recovery will timeout after waiting for recovery
# metadata.
#
# Test:
# 0. The test requires three servers: M1 and M2.
# 1. Bootstrap start a GROUP on M1
#    with gr_wait_before_sending_metadata debug point set
#    to block send recovery metadata.
# 2. Start GR on M2,
#    with decreased recovery metadata wait timeout = 10
#    using gr_set_metadata_wait_time_10 debug point.
#    The member 2 will get into ERROR state after waiting
#    for recovery metadata for 10 seconds.
# 3. Block send recovery metadata.
# 4. Wait for joiner to enter ERROR state.
#    Check error log for
#    ER_GROUP_REPLICATION_TIMEOUT_ERROR_FETCHING_METADATA error.
# 5. Unblock send recovery metadata.
# 6. Cleanup.
#
################################################################################

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Bootstrap start a GROUP on M1
--echo #    with gr_wait_before_sending_metadata debug point set
--echo #    to block send recovery metadata.

--let $rpl_connection_name= server1
--source include/connection.inc

--source include/start_and_bootstrap_group_replication.inc
SET @@GLOBAL.DEBUG='+d,gr_wait_before_sending_metadata';


--echo
--echo ############################################################
--echo # 2. Start GR on M2,
--echo #    with decreased recovery metadata wait timeout = 10
--echo #    using gr_set_metadata_wait_time_10 debug point.
--echo #    The member 2 will get into ERROR state after waiting
--echo #    for recovery metadata for 10 seconds.

--let $rpl_connection_name= server2
--source include/connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Error fetching AFTER_GTIDS from Recovery Metadata by Recovery thread. The Recovery thread timeout after waiting for 10 seconds. The Recovery will be terminated.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;

SET @@GLOBAL.DEBUG='+d,gr_set_metadata_wait_time_10';

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Block send recovery metadata.

--connection server1
SET DEBUG_SYNC= "now WAIT_FOR signal.reached_recovery_metadata_send";


--echo
--echo ############################################################
--echo # 4. Wait for joiner to enter ERROR state.
--echo #    Check error log for
--echo #    ER_GROUP_REPLICATION_TIMEOUT_ERROR_FETCHING_METADATA error.

--let $rpl_connection_name= server2
--source include/connection.inc

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.error_log WHERE error_code='MY-015063' AND data LIKE "%Error fetching AFTER_GTIDS from Recovery Metadata by Recovery thread. The Recovery thread timeout after waiting for 10 seconds. The Recovery will be terminated.%"
--source include/wait_condition.inc

SET @@GLOBAL.DEBUG='-d,gr_set_metadata_wait_time_10';


--echo
--echo ############################################################
--echo # 5. Unblock send recovery metadata.

--let $rpl_connection_name= server1
--source include/connection.inc
SET @@GLOBAL.DEBUG='-d,gr_wait_before_sending_metadata';
SET DEBUG_SYNC= "now SIGNAL signal.send_the_recovery_metadata";

--source include/stop_group_replication.inc
SET DEBUG_SYNC= 'RESET';

--echo
--echo ############################################################
--echo # 6. Cleanup.

--source include/group_replication_end.inc
