#
# Test case to verify that proper error message is logged when IO and Monitor
# IO thread are denied access to a performance_schema table.
#
# adding one of the member of the group replication using
# asynchronous_connection_failover_add_managed() does add other group members
# as source for asynchronous replication channel.
#
# Test:
# 0. The test requires 2 servers:
#      server1: primary
#      server2: single server replica
# 1. Start GR on server1.
#    Add some data to server1.
# 2. Create a replication user with lacking the privileges of `SELECT`
#    on performance_schema.
# 3. Add asynchronous connection failover server and
#    verify that it is inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
# 4. Create and start new channel ch1_2: server2(replica), server1(source)
# 5. Verify replication IO and Monitor IO thread logged
#    error in error log for table access issue.
# 6. Clean up.
#
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 2
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc


--echo
--echo # 1. Start GR on server1.
--echo #    Add some data to server1.
--echo
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/start_and_bootstrap_group_replication.inc
--let $_tmp_gr_group_name= `SELECT @@GLOBAL.group_replication_group_name`


--echo #
--echo # 2. Create a replication user with lacking the privileges of `SELECT`
--echo #    on performance_schema.
SET sql_log_bin = 0;
--eval CREATE USER 'rpl_user'@'%'
--eval GRANT REPLICATION SLAVE ON *.* TO 'rpl_user'@'%'
--eval GRANT CONNECTION_ADMIN ON *.* TO 'rpl_user'@'%';
SET sql_log_bin = 1;


--echo #
--echo # 3. Add asynchronous connection failover server and
--echo #    verify that it is inserted successfully in
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo #
--let $rpl_connection_name= server2
--source include/connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The source.*for channel.*has joined the group.*and so added its entry into replication_asynchronous_connection_failover table");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The Monitor IO thread failed to detect if the source belongs to the group majority. Error: SELECT command denied to user \'rpl_user.* for table \'replication_group_members.*");
call mtr.add_suppression("The replica IO thread failed to detect if the source belongs to the group majority. Error: SELECT command denied to user \'rpl_user.* for table \'replication_group_members.*");
SET SESSION sql_log_bin = 1;

--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1 $_tmp_gr_group_name FAILOVER_GROUP_NAME
--eval SELECT asynchronous_connection_failover_add_managed('ch1_2', 'GroupReplication', '$_tmp_gr_group_name', '127.0.0.1', $SERVER_MYPORT_1, '', 80, 60);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc


--echo
--echo # 4. Create and start new channel ch1_2: server2(replica), server1(source)
--echo
--let $rpl_connection_name= server2
--source include/connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='rpl_user', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=2 FOR CHANNEL 'ch1_2'

--let $rpl_channel_name='ch1_2'
--source include/rpl/start_replica.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch1_2 IO_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch1_2\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify channel ch1_2 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1_2\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc


--echo
--echo # 5. Verify replication IO and Monitor IO thread logged
--echo #    error in error log for table access issue.
--echo
--let $rpl_connection_name= server2
--source include/connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.error_log WHERE error_code='MY-015087' AND data LIKE "%The Monitor IO thread failed to detect if the source belongs to the group majority. Error: SELECT command denied to user 'rpl_user%' for table 'replication_group_members'. The query failed to execute on the source (host:% port:% network_namespace:%) for channel 'ch1_2'%"
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.error_log WHERE error_code='MY-015088' AND data LIKE "%The replica IO thread failed to detect if the source belongs to the group majority. Error: SELECT command denied to user 'rpl_user%' for table 'replication_group_members'. The query failed to execute on the source (host:% port:% network_namespace:%) for channel 'ch1_2'%"
--source include/wait_condition.inc


--echo
--echo # 6. Clean Up.
--echo
--let $rpl_connection_name= server2
--source include/connection.inc
--let $rpl_channel_name='ch1_2'
--source include/rpl/stop_replica.inc

--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl/reset_replica.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $_tmp_gr_group_name FAILOVER_GROUP_NAME
--eval SELECT asynchronous_connection_failover_delete_managed('ch1_2', '$_tmp_gr_group_name')

--let $rpl_connection_name= server1
--source include/connection.inc
SET sql_log_bin = 0;
DROP USER 'rpl_user';
SET sql_log_bin = 1;

--source include/group_replication_end.inc
