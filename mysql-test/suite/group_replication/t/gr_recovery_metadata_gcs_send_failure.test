################################################################################
# This test proves that recovery metadata sender fails to send the metadata
# new joiners enters the ERROR state.
# This test also proves that the cleanup happens on donor when all the joiner
# leaves the group. This test verifies FR14 of wl#14595.
#
# FR 14. When a new member joins a group having all the members with MySQL
#        version greater than equal to 8.3.0, and if all the 'GR Recovery
#        Metadata' members which were ONLINE when this new member joined leaves
#        the group before joiner received 'GR Recovery metadata' message, then
#        the joiner will enter the ERROR state.
#
# Test:
# 0. The test requires two servers: M1, M2
# 1. Bootstrap start a GROUP on M1 and set debug point
#    gr_force_recovery_metadata_send_failure to simulate send message failure.
# 2. Start GR on M2.
#    The M2 will enter the ERROR state after recovery
#    metadata message error message is received.
# 3. Sender cleans the metadata.
# 4. Cleanup.
#
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Bootstrap start a GROUP on M1 and set debug point
--echo #    gr_force_recovery_metadata_send_failure to simulate send message failure.

--let $rpl_connection_name= server1
--source include/connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Error while sending message. Context: Failed to send the recovery metadata. Sending ERROR message to the joiner to leave the group.");
call mtr.add_suppression("The certification information, part of the required information to the new member join the group, is too big and cannot be send.*");
SET SESSION sql_log_bin= 1;

--source include/start_and_bootstrap_group_replication.inc

SET @@GLOBAL.DEBUG='+d,gr_force_recovery_metadata_send_failure';
SET @@GLOBAL.DEBUG='+d,group_replication_recovery_metadata_module_delete_one_stored_metadata';

--echo
--echo ############################################################
--echo # 2. Start GR on M2.
--echo #    The M2 will enter the ERROR state after recovery
--echo #    metadata message error message is received.

--let $rpl_connection_name= server2
--source include/connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Error the group was unable to send Recovery Metadata to joining member.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("While leaving the group due to a stop, shutdown or failure there was a timeout receiving a view change.*");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Error received while the Recovery thread was waiting for the Recovery Metadata. The Recovery will be terminated.");
call mtr.add_suppression("The group was unable to send the Recovery Metadata to a joining member.");
SET SESSION sql_log_bin= 1;

--let $group_replication_start_member_state= ERROR
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 3. Sender cleans the metadata.

--let $rpl_connection_name= server1
--source include/connection.inc

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_recovery_metadata_module_delete_one_stored_metadata_reached";

SET @@GLOBAL.DEBUG='-d,gr_force_recovery_metadata_send_failure';
SET @@GLOBAL.DEBUG='-d,group_replication_recovery_metadata_module_delete_one_stored_metadata';
SET DEBUG_SYNC= 'RESET';

--echo
--echo ############################################################
--echo # 4. Cleanup.

--source include/group_replication_end.inc
