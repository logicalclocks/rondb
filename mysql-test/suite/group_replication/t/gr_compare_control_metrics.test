#############################################################
##This test verifies below scenarios for WL#13849:
#
#FR-07: The status variable Gr_control_messages_sent_count shall
#      report the number of control messages sent by the local
#      member.
#
#FR-08: The status variable Gr_control_messages_sent_bytes_sum shall
#       report the sum of bytes sent for control messages by the
#       local member. Bytes are accounted after the message is
#       serialized and therefore is the on-the-wire size.
#
# FR-09: The status variable
#       Gr_control_messages_sent_roundtrip_time_sum shall report the
#       sum of time, in micro-seconds, the local member spent waiting
#       after sending control messages and receiving the confirmation
#       them had been received by a majority.
#
# FR-10: The status variable Gr_data_messages_sent_count shall
#       report the number of data messages sent by the local
#       member.
#
# FR-11: The status variable Gr_data_messages_sent_bytes_sum shall
#       report the sum of bytes sent for data messages by the
#       local member. Bytes are accounted after the message is
#       serialized and therefore is the on-the-wire size.
#
# FR-12: The status variable
#       Gr_data_messages_sent_roundtrip_time_sum shall report the
#       sum of time, in micro-seconds, the local member spent waiting
#       after sending data messages and receiving the confirmation
#       them had been received by a majority.
#
# FR-21: The status variable Gr_all_consensus_proposals_count shall report
#       the sum of all proposals that were initiated and terminated in
#       this node.
#
# FR-22: The status variable Gr_empty_consensus_proposals_count shall
#       report the sum of all empty proposal rounds that were initiated
#       and terminated in this node.
#
# FR-23: The status variable Gr_consensus_bytes_sent_sum shall report the
#       sum of all socket-level bytes that were sent to all group
#       nodes originating on this node.
#
# FR-24: The status variable Gr_all_consensus_time_sum shall report, in
#       microseconds, the sum of elapsed time of all consensus rounds
#       started and finished in this node.
#
# FR-26: The status variable Gr_extended_consensus_count shall report the
#       number of full 3-Phase PAXOS that this node initiated.
#
# FR-27: The status variable Gr_total_messages_sent_count shall report the
#       number of high-level messages that this node sent to the group.
#
# FR-28: The status variable Gr_consensus_bytes_received_sum shall report
#       the sum of all socket-level bytes that were received to from
#       group nodes having as a destination this node.
#
# FR-29: The status variable Gr_last_consensus_end_timestamp shall report,
#       in a TIMESTAMP, the time in which our last consensus proposal
#       was approved This will account if the system has come to an halt
#       or if it is making progress.
#
# ############################################################
--source include/big_test.inc
--source include/have_debug.inc

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start = 1
--let $rpl_group_replication_single_primary_mode = 1
--let $rpl_server_count = 3
--source include/group_replication.inc

--echo #Bootstrap and start GR on M1
--let $rpl_connection_name= server1
--source include/connection.inc
--source include/start_and_bootstrap_group_replication.inc

--echo #Start GR on M2
--let $rpl_connection_name = server2
--source include/connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression(".*Replica SQL for channel 'group_replication_applier': ... The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state*");
CALL mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
CALL mtr.add_suppression("Could not execute Write_rows event on table test.t1");
CALL mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
SET SESSION sql_log_bin = 1;

--source include/start_group_replication.inc

--echo #Start GR on M3
--let $rpl_connection_name = server3
--source include/connection.inc
--source include/start_group_replication.inc
--let $member3_uuid = query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

#### FR-22: The status variable Gr_empty_consensus_proposals_count shall report the sum of all empty proposal rounds that were initiated  and terminated in this node.

--let $rpl_connection_name = server1
--source include/connection.inc

--let $assert_text = 'Gr_empty_consensus_proposals_count Value should be 0'
--let $assert_cond = [SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_empty_consensus_proposals_count", VARIABLE_VALUE, 1] = 0
--source include/assert.inc

--let $rpl_connection_name = server2
--source include/connection.inc

# Retreiving values of Gr_consensus_bytes_received_sum for later use in the test.
--let $consensus_bytes_received_sum =`SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_received_sum"`

--let $rpl_connection_name = server1
--source include/connection.inc

# Collect metrics value
--let $func = GETPARAM
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

#### FR-10: The status variable Gr_data_messages_sent_count shall report the number of data messages sent by the local member.
##
#### FR-11: The status variable Gr_data_messages_sent_bytes_sum shall report the sum of bytes sent for data messages by the local member.
##
#### Bytes are accounted after the message is serialized and therefore is the on-the-wire size.
##
#### FR-12: The status variable Gr_data_messages_sent_roundtrip_time_sum shall report the sum of time, in micro-seconds, the local member spent waiting after sending data messages and receiving the confirmation them had been received by a majority.
##
#### FR-23: The status variable Gr_consensus_bytes_sent_sum shall report the sum of all socket-level bytes that were sent to all group nodes originating on this node.
##
#### FR-24: The status variable Gr_all_consensus_time_sum shall report, in microseconds, the sum of elapsed time of all consensus rounds started and finished in this node.
##
#### FR-27: The status variable Gr_total_messages_sent_count shall report the number of high-level messages that this node sent to the group.

--echo #Create table on M1
--let $rpl_connection_name = server1
--source include/connection.inc
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t1 values(1);

--echo #Gr_data_messages_sent_* Metrics values should be increased on M1
--let $func = DATACOUNTGREATER
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

#### FR-29: The status variable Gr_last_consensus_end_timestamp shall report, in a TIMESTAMP, the time in which our last consensus proposal was approved This will account if the system has come to an halt or if it is making progress.

--let $rpl_connection_name = server1
--source include/connection.inc
--replace_regex /[0-9]+-[0-9]+-[0-9]+ [0-9]+:[0-9]+:[0-9]+.[0-9]+/DATE_TIME/
SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_last_consensus_end_timestamp";

# Collect metrics value
--let $func = GETPARAM
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

DROP TABLE test.t1;

--echo # Gr_data_messages_sent_* Metrics values should be increased on M1
--let $func = DATACOUNTGREATER
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

# Collect metrics value
--let $func = GETPARAM
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--echo #Gr_data_messages_sent_* Metrics values should not increase on M2 and M3.
--let $rpl_connection_name= server2
--source include/connection.inc
--let $func = RESET
--source ../mysql-test/suite/group_replication/include/check_metrics.inc
--let $Gr_all_consensus_proposals_count_2=`SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_proposals_count"`

#### FR-28: The status variable Gr_consensus_bytes_received_sum shall report the sum of all socket-level bytes that were received to from group nodes having as a destination this node.

--let $assert_text = 'Gr_consensus_bytes_received_sum value increased'
--let $assert_cond = [SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_consensus_bytes_received_sum", VARIABLE_VALUE, 1] > $consensus_bytes_received_sum
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/connection.inc
--let $func = RESET
--source ../mysql-test/suite/group_replication/include/check_metrics.inc
--let $Gr_all_consensus_proposals_count_3=`SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_all_consensus_proposals_count"`

#### FR-21: The status variable Gr_all_consensus_proposals_count shall report the sum of all proposals that were initiated and terminated in this node.

--let $rpl_connection_name= server1
--source include/connection.inc

# Gr_all_consensus_proposals_count will be greater on M1 with values of M2, M3.
--let $func = COMPARECOUNT
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

#### FR-07: The status variable Gr_control_messages_sent_count shall report the number of control messages sent by the local member.
#### FR-09: The status variable Gr_control_messages_sent_roundtrip_time_sum shall report the sum of time, in micro-seconds, the local member spent
#### waiting after sending control messages and receiving the confirmation them had been received by a majority.

--let $rpl_connection_name= server2
--source include/connection.inc

# Collect metrics value
--let $func = GETPREV
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--echo #Change communication protocol version and switch to MPM.
--eval SELECT group_replication_set_communication_protocol("8.0.21")

--echo #Gr_control_messages_* should increase on M2.
--let $func = CONTROLCOUNTGRT
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--echo #Gr_data_messages_* Metrics value should not increase on M1
--let $rpl_connection_name= server1
--source include/connection.inc
--let $func = DATACOUNTEQUAL
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--let $assert_text = 'Gr_empty_consensus_proposals_count Value should be 0'
--let $assert_cond = [SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_empty_consensus_proposals_count", VARIABLE_VALUE, 1] = 0
--source include/assert.inc

--echo #Gr_data_messages_* Metrics value should not increase on M2
--let $rpl_connection_name= server2
--source include/connection.inc
--let $func = RESET
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

#FR-08: The status variable Gr_control_messages_sent_bytes_sum shall
#       report the sum of bytes sent for control messages by the
#       local member. Bytes are accounted after the message is
#       serialized and therefore is the on-the-wire size.

--let $rpl_connection_name= server2
--source include/connection.inc

# Collect metrics value
--let $func = GETPREV
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

SELECT group_replication_switch_to_multi_primary_mode();

--echo #Gr_control_messages_* should increase on M2.
--let $func = CONTROLCOUNTGRT
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

# Collect metrics value
--let $func = GETPREV
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

CREATE TABLE test.t1(num int PRIMARY KEY);

--echo #Add 1000 transactions in a short time on m2.
--disable_query_log
--let $i=1000
while($i)
{
    --EVAL INSERT INTO t1 VALUES ($i)
    --dec $i
}
--enable_query_log

--echo #Gr_control_messages_sent_count won't increase to the proportion of 1000.
--let $assert_text = 'Value should not increase to the proportion of 1000.'
--let $assert_cond = [SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_control_messages_sent_count", VARIABLE_VALUE, 1] < 1000
--source include/assert.inc

--echo #Gr_control_messages_* should increase on M2.
--let $func = CONTROLCOUNTGRT
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--echo #Gr_data_messages_* Metrics value should not increase on M3
--let $rpl_connection_name= server3
--source include/connection.inc
--let $func = RESET
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--echo #Get Gr_extended_consensus_count value when server was ONLINE.
--let $cons_cnt = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_extended_consensus_count"`

--echo #Make server3 UNREACHABLE.
--let $rpl_connection_name= server3
--source include/connection.inc
SET GLOBAL super_read_only = 0;
SET GLOBAL group_replication_member_expel_timeout = 3000;
SET GLOBAL super_read_only = 1;
--let $group_replication_local_address = `SELECT @@GLOBAL.group_replication_local_address`
--let $group_replication_group_seeds = `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group_replication_local_address=$group_replication_local_address --group_replication_group_seeds=$group_replication_group_seeds --group_replication_group_name=$group_replication_group_name
--replace_result $group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--source include/kill_and_restart_mysqld.inc

# Needed as we are not using rpl/restart_server.inc
--let $rpl_server_number = 3
--source include/rpl/reconnect.inc

# Verify state of server3
--let $rpl_connection_name = server1
--source include/connection.inc
let $wait_condition = SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE = "ONLINE";
--source include/wait_condition.inc
let $wait_condition = SELECT COUNT(*)=1 FROM performance_schema.replication_group_members where MEMBER_STATE = "UNREACHABLE";
--source include/wait_condition.inc

# Insert data on M1
INSERT INTO t1 VALUES (10002);

#### FR-26: The status variable Gr_extended_consensus_count shall report the number of full 3-Phase PAXOS that this node initiated.

--echo #Gr_extended_consensus_count value should be increased after it became UNREACHABLE.
--let $rpl_connection_name= server3
--let $assert_text = 'Value should be 0'
--let $assert_cond = [SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME="Gr_extended_consensus_count", VARIABLE_VALUE, 1] > $cons_cnt
--source include/assert.inc

# Revert group_replication_member_expel_timeout to the default value which will cause server3 to be expelled.
--let $rpl_connection_name= server1
--source include/connection.inc
SET GLOBAL group_replication_member_expel_timeout = DEFAULT;

--let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members
--source include/wait_condition.inc

--echo ##Add data to t1 on m2 with set sql_log_bin=1;
--let $rpl_connection_name= server2
--source include/connection.inc

SET SESSION sql_log_bin= 0;
INSERT INTO t1 VALUES (10001);
SET SESSION sql_log_bin= 1;

# Collect metrics value
--let $func = GETPARAM
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--echo #Add same value to t1 on M1.
INSERT INTO t1 VALUES (10001);

#Verify M2 goes to ERROR state.
--let $rpl_connection_name= server2
--source include/connection.inc

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--echo #Verify metrics remain constant
--let $rpl_connection_name= server2
--source include/connection.inc
--let $func = DATACOUNTEQUAL
--source ../mysql-test/suite/group_replication/include/check_metrics.inc
--source include/stop_group_replication.inc

SET SESSION sql_log_bin= 0;
DELETE FROM t1;
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server2
--source include/connection.inc
--source include/start_group_replication.inc

# Collect metrics value
--let $func = GETPARAM
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--source include/stop_group_replication.inc

# Set debug point which makes M2 in RECOVERING state.
SET @@GLOBAL.DEBUG ='+d,recovery_thread_wait_before_finish';

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo # Get back M2 server online
SET DEBUG_SYNC = "now WAIT_FOR signal.recovery_thread_wait_before_finish_reached";
SET @@GLOBAL.DEBUG ='-d,recovery_thread_wait_before_finish';
SET DEBUG_SYNC = "now SIGNAL signal.recovery_end";

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo #Verify metrics remain constant
--let $func = DATACOUNTEQUAL
--source ../mysql-test/suite/group_replication/include/check_metrics.inc

--let $rpl_connection_name= server1
--source include/connection.inc

--echo
--echo ####
--echo # 6) Cleanup.
--echo ####
--echo
DROP TABLE test.t1;
--let $rpl_group_replication_single_primary_mode = 0
--let $rpl_group_replication_reset_persistent_vars = 1
--source include/group_replication_end.inc
