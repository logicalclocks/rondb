#
# WL#9236: Add a new variable binlog_expire_logs_seconds
#
# ==== Purpose ====
# The test case test the following:
#
# 1. If binlog_expire_logs_seconds == 0 no purge happens.
#
# 2. Verifies that if binlog_expire_logs_seconds > 0 then it
#    purges the binary logs older than the timeout and keeps
#    the binary logs newer than the timeout on:
#    1. FLUSH LOGS
#    2. Rotation of logs because of binlog growing bigger than max_binlog_size
#    3. Server restart
#    The include file common/binlog/expire_logs_seconds.inc tests these
#    three cases for small and large value of binlog_expire_logs_seconds
#
# 3. assert that there is a warning due to using
#    --binlog-expire-logs-seconds with binlog disabled.
# === References ===
#
# Bug#33670457: Incorrect result when `binlog_expire_logs_seconds` has maximum
#               value in 32 bit
#

# Test in this file is binlog format agnostic, thus no need
# to rerun it for every format.
--source include/have_binlog_format_row.inc
--source include/not_windows.inc
--source include/not_binlog_transaction_compression_on.inc

--let $saved_binlog_expire_logs_seconds= `SELECT @@GLOBAL.binlog_expire_logs_seconds`
# Set the datadir
--let $MYSQLD_DATADIR= `SELECT @@datadir`

--echo ####
--echo #### 1. When binlog_expire_logs_seconds == 0 no purge should happen
--echo ####

SET GLOBAL binlog_expire_logs_seconds= 0;

# This will test the expire period for three scenarios, described in the
# .inc file.
--source common/binlog/expire_logs_seconds.inc

--echo ####
--echo #### 2: binlog_expire_logs_seconds > 0
--echo ####

# Here we will test both with smaller values and larger values

--echo Testing with smaller values of binlog_expire_logs_seconds

SET GLOBAL binlog_expire_logs_seconds= 30;

--let $expire_logs_seconds= `SELECT @@global.binlog_expire_logs_seconds`

--let $first_binlog_file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;

--sleep $expire_logs_seconds

--let $second_binlog_file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;

# The sleep is in two parts to ensure a time gap between first_binlog_file
# and second_binlog_file, by doing that we can check that one is purged and
# another isn't.
# sleep for n seconds here, n < $expire_logs_seconds
--sleep 3
FLUSH LOGS;

--error 1
--file_exists $MYSQLD_DATADIR/$first_binlog_file

--file_exists $MYSQLD_DATADIR/$second_binlog_file

RESET BINARY LOGS AND GTIDS;
--echo Testing with greater values of binlog_expire_logs_seconds

SET GLOBAL binlog_expire_logs_seconds= 3600;
# This will test the expire period for three scenarios, described in the 
# .inc file.

--source common/binlog/expire_logs_seconds.inc

# This will test the expire period for three scenarios, described in the 
# .inc file.
--source common/binlog/expire_logs_seconds.inc

# code coverage for WL#14930 boundary conditions
# this will make the math output a negative purge
# window, meaning that no purge can happen
RESET BINARY LOGS AND GTIDS;
SET GLOBAL binlog_expire_logs_seconds=2147483648;
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;
--file_exists $MYSQLD_DATADIR/$file
RESET BINARY LOGS AND GTIDS;

# code coverage for WL#14930 boundary conditions
# computations should be correct even if binlog_expire_logs_seconds
# is set to a very big value, effectively specifying that it should
# delete binary logs that have a unix timestamp smaller than -2^31.
# Before the bugfix, 32-bit platforms having time_t as 32-bit values
# would internally wrap around the integers, which would make the
# server purge files that are newer than what the user requested
# to purge.

SET GLOBAL binlog_expire_logs_seconds=4294967295;
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;
--file_exists $MYSQLD_DATADIR/$file
RESET BINARY LOGS AND GTIDS;

--echo ### Code coverage for WL#14930 boundary conditions
--echo ### Expiration time < 0

--echo ### Test case: binlog_expire_logs_seconds set to current time
let $current_time=`SELECT UNIX_TIMESTAMP()`;
--replace_result $current_time CURRENT_TIME
--eval SET GLOBAL binlog_expire_logs_seconds= $current_time
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;
--file_exists $MYSQLD_DATADIR/$file
RESET BINARY LOGS AND GTIDS;

--echo ### Test case: binlog_expire_logs_seconds set to current_time + 2^31
--replace_result $current_time CURRENT_TIME
--eval SET GLOBAL binlog_expire_logs_seconds=  2<<31+ $current_time
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;
--file_exists $MYSQLD_DATADIR/$file
RESET BINARY LOGS AND GTIDS;

--echo ### Test case: binlog_expire_logs_seconds set to current_time + 2^30
--replace_result $current_time CURRENT_TIME
--eval SET GLOBAL binlog_expire_logs_seconds=  2<<30+ $current_time
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
FLUSH LOGS;
--file_exists $MYSQLD_DATADIR/$file
RESET BINARY LOGS AND GTIDS;

# reset the variables
--eval SET GLOBAL binlog_expire_logs_seconds= $saved_binlog_expire_logs_seconds

--echo ###
--echo ### 3. assert that there is a warning due to using
--echo ###    --binlog-expire-logs-seconds with binlog disabled.
--echo ###
CALL mtr.add_suppression("You need to use --log-bin to make --binlog-expire-logs-seconds");
CALL mtr.add_suppression("You need to use --log-bin to make --binlog-format");
CALL mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");

--let $restart_parameters = restart: --skip-log-bin --binlog-expire-logs-seconds=3
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--source include/restart_mysqld.inc

--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_text = There shall be a binlog_off + seconds warning
--let $assert_count = 1
--let $assert_select = You need to use --log-bin to make --binlog-expire-logs-seconds work.
--let $assert_only_after = Shutdown complete
--source include/assert_grep.inc
