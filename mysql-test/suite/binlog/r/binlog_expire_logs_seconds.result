####
#### 1. When binlog_expire_logs_seconds == 0 no purge should happen
####
SET GLOBAL binlog_expire_logs_seconds= 0;
CREATE TABLE t1(s LONGBLOB );
Case:0
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 1. FLUSH LOGS
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
Case:1
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 2. Binlog_size > max_binlog_size
SET @@GLOBAL.MAX_BINLOG_SIZE= 4096;
INSERT INTO t1 (s) VALUES (REPEAT('s',50000));
RESET BINARY LOGS AND GTIDS;
Case:2
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 3. Server restart
# restart:--binlog_expire_logs_seconds=0
RESET BINARY LOGS AND GTIDS;
##### Cleanup #####
SET @@GLOBAL.MAX_BINLOG_SIZE= 1073741824;;
DROP TABLE t1;
RESET BINARY LOGS AND GTIDS;
####
#### 2: binlog_expire_logs_seconds > 0
####
Testing with smaller values of binlog_expire_logs_seconds
SET GLOBAL binlog_expire_logs_seconds= 30;
FLUSH LOGS;
FLUSH LOGS;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
Testing with greater values of binlog_expire_logs_seconds
SET GLOBAL binlog_expire_logs_seconds= 3600;
CREATE TABLE t1(s LONGBLOB );
Case:0
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 1. FLUSH LOGS
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
Case:1
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 2. Binlog_size > max_binlog_size
SET @@GLOBAL.MAX_BINLOG_SIZE= 4096;
INSERT INTO t1 (s) VALUES (REPEAT('s',50000));
RESET BINARY LOGS AND GTIDS;
Case:2
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 3. Server restart
# restart:--binlog_expire_logs_seconds=3600
RESET BINARY LOGS AND GTIDS;
##### Cleanup #####
SET @@GLOBAL.MAX_BINLOG_SIZE= 1073741824;;
DROP TABLE t1;
RESET BINARY LOGS AND GTIDS;
CREATE TABLE t1(s LONGBLOB );
Case:0
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 1. FLUSH LOGS
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
Case:1
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 2. Binlog_size > max_binlog_size
SET @@GLOBAL.MAX_BINLOG_SIZE= 4096;
INSERT INTO t1 (s) VALUES (REPEAT('s',50000));
RESET BINARY LOGS AND GTIDS;
Case:2
FLUSH LOGS;
INSERT INTO t1 VALUES('a');
FLUSH LOGS;
#### 3. Server restart
# restart:--binlog_expire_logs_seconds=3600
RESET BINARY LOGS AND GTIDS;
##### Cleanup #####
SET @@GLOBAL.MAX_BINLOG_SIZE= 1073741824;;
DROP TABLE t1;
RESET BINARY LOGS AND GTIDS;
RESET BINARY LOGS AND GTIDS;
SET GLOBAL binlog_expire_logs_seconds=2147483648;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
SET GLOBAL binlog_expire_logs_seconds=4294967295;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
### Code coverage for WL#14930 boundary conditions
### Expiration time < 0
### Test case: binlog_expire_logs_seconds set to current time
SET GLOBAL binlog_expire_logs_seconds= CURRENT_TIME;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
### Test case: binlog_expire_logs_seconds set to current_time + 2^31
SET GLOBAL binlog_expire_logs_seconds=  2<<31+ CURRENT_TIME;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
### Test case: binlog_expire_logs_seconds set to current_time + 2^30
SET GLOBAL binlog_expire_logs_seconds=  2<<30+ CURRENT_TIME;
FLUSH LOGS;
RESET BINARY LOGS AND GTIDS;
SET GLOBAL binlog_expire_logs_seconds= 2592000;
###
### 3. assert that there is a warning due to using
###    --binlog-expire-logs-seconds with binlog disabled.
###
CALL mtr.add_suppression("You need to use --log-bin to make --binlog-expire-logs-seconds");
CALL mtr.add_suppression("You need to use --log-bin to make --binlog-format");
CALL mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");
# restart: --skip-log-bin --binlog-expire-logs-seconds=3
include/assert_grep.inc [There shall be a binlog_off + seconds warning]
