--source include/have_debug.inc
# Bug scenario:
# When DDL is on-going and hits an error in online build (for example when online log is too big); it must rollback
# The error handling code has missed a call to m_btr_load->finish to cleanup the buffer fixed pages at each level

--echo # Bug scenario:
CREATE TABLE t1 (c1 INT);

--echo # Create big enough table to ensure another call to Builder::insert_direct
--disable_query_log
DELIMITER |;
CREATE PROCEDURE populate_t1(IN BASE INT, IN SIZE INT)
BEGIN
  DECLARE i INT DEFAULT BASE;
  WHILE (i + 10 <= SIZE) DO
    INSERT INTO t1 values (i), (i+1), (i+2), (i+3), (i+4), (i+5), (i+6), (i+7), (i+8), (i+9);
    SET i = i + 10;
  END WHILE;
END|
DELIMITER ;|

# Note that inserting anything less than 10700 doesn't cause key_buffer to
# overflow on 32 bit platforms - this causes a single call to
# Builder::insert_direct. In case of 64 bit platforms, this number is 9892. The
# reason for this difference is because of different values for sizeof the
# Key_sort_buffer::m_dtuples on different architecture. Kept at 11000 just to be
# ensure second call to Builder::insert_direct
CALL populate_t1(0, 11000);
DROP PROCEDURE populate_t1;
--enable_query_log

SELECT COUNT(*) FROM t1;

--echo # Builder::insert_direct returns DB_ONLINE_LOG_TOO_BIG
SET DEBUG="+d,builder_insert_direct_trigger_error";
--error ER_INNODB_ONLINE_LOG_TOO_BIG
ALTER TABLE t1 ADD COLUMN c2 INT DEFAULT 20, ALGORITHM=INPLACE;
SET DEBUG="-d,builder_insert_direct_trigger_error";

--echo # Pages still buffer fixed should assert during shutdown
--source include/shutdown_mysqld.inc
--source include/start_mysqld.inc

--echo # Builder::add_row returns DB_ONLINE_LOG_TOO_BIG
SET DEBUG="+d,builder_add_row_trigger_error";
--error ER_INNODB_ONLINE_LOG_TOO_BIG
ALTER TABLE t1 ADD COLUMN c2 INT DEFAULT 20, ALGORITHM=INPLACE;
SET DEBUG="-d,builder_add_row_trigger_error";

--echo # Pages still buffer fixed should assert during shutdown
--source include/shutdown_mysqld.inc
--source include/start_mysqld.inc

--echo # Cleanup
DROP TABLE t1;
