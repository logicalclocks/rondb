# ==== PURPOSE ====
#
# This test validates encoding and decoding of the GTID_TAGGED_LOG_EVENT, in
# particular, encoded value of original commit timestamp
#
# ==== REQUIREMENTS ====
#
# When original commit timestamp value differs from immediate commit timestamp,
# the server shall encode original commit timestamp in the GTID_TAGGED_LOG_EVENT
#
# ==== IMPLEMENTATION ====
#
# T1.
#     Test steps:
#
#     1. Set up a custom original commit timestamp
#     2. Execute transaction with a tagged GTID
#     3. Check with mysqlbinlog that event has the required original commit
#        timestamp value
#
#     Test pass conditions:
#     - Step 3
#
# ==== REFERENCES ====
#
# Bug#36312880 Gtid_tagged_log_event encodes incorrect value of original commit
#              timestamp
#

# This test is independent from binlog format
--source include/have_binlog_format_row.inc

RESET BINARY LOGS AND GTIDS;

--echo
--echo # T1.1 - T1.2
--echo

SET SESSION original_commit_timestamp = 1;

SET GTID_NEXT= "11111111-1111-1111-1111-111111111111:tag:1";
CREATE TABLE t1 (a INT);

--echo
--echo # T1.3
--echo

--source include/rpl/save_binlog_file_position.inc
--let $output_file=$MYSQLTEST_VARDIR/tmp/binlog_gtid_tagged_log_event_encoding.output
--exec $MYSQL_BINLOG --force-if-open $binlog_fullpath > $output_file

--let $assert_text= Check that original commit timestamp value equals 1
--let $assert_file = $output_file
--let $assert_select = session.original_commit_timestamp=1\*
--let $assert_count = 1
--source include/assert_grep.inc

--let $assert_text= Check that immediate commit timestamp differs from original commit timestamp
--let $assert_file = $output_file
--let $assert_select = session.immediate_commit_timestamp=1\*
--let $assert_count = 0
--source include/assert_grep.inc

--echo
--echo # Clean up
--echo

SET SESSION original_commit_timestamp = DEFAULT;
SET GTID_NEXT='AUTOMATIC';
DROP TABLE t1;
--remove_file $output_file
