# ==== Purpose ====
#
# This test will make the slave rollback an anonymous transactions.
#
# It will keep the SQL thread running to avoid the relay log to be purged
# in a CHANGE REPLICATION SOURCE.
#
# Then, it will make the slave to replicate up to the middle of a transaction,
# will stop the I/O thread, do a CHANGE REPLICATION SOURCE pointing to the begin of the
# transaction and restart the I/O thread.
#
# In this way, the relay log will have something like:
# ANONYMOUS_GTID, QUERY(BEGIN), QUERY(INSERT), QUERY(INSERT)
# ANONYMOUS_GTID, QUERY(BEGIN), QUERY(INSERT), QUERY(INSERT), QUERY(INSERT), XID
#
# It is expected that the SQL thread will rollback the partial transaction once
# reaching the second ANONYMOUS_GTID event.
#
# ==== Related Bugs and Worklogs ====
#
# BUG#25800025 SQL THREAD ERROR 1778 WHEN GTID SKIPPING PARTIAL TRX
#
# This test case requires SBR
--source include/have_debug.inc
--source include/have_debug_sync.inc
# This test case is specific to binlog_format=row
--source include/have_binlog_format_row.inc
# This test case generates a situation that should not happen
# in normal slave operation (there is no retrieval of the transaction
# from the begin when SOURCE_AUTO_POSITION = 0). Enabling this test
# case on MTS may hit some MTS asserts.
--source include/not_replica_parallel_workers.inc
--source include/rpl/init_source_replica.inc

--let $master_uuid=`SELECT @@SERVER_UUID`
CREATE TABLE t1 (c1 INT PRIMARY KEY);

# Collect the master positions before the transaction
--let $master_file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
--let $master_pos= query_get_value(SHOW BINARY LOG STATUS, Position, 1)
--source include/rpl/sync_to_replica.inc
--source include/rpl/stop_receiver.inc
CALL mtr.add_suppression('GTID_LOG_EVENT, GTID_TAGGED_LOG_EVENT or ANONYMOUS_GTID_LOG_EVENT is not expected');
CALL mtr.add_suppression('An unexpected event sequence was detected by the IO thread');

--source include/rpl/connection_source.inc
BEGIN;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);
INSERT INTO t1 VALUES (4);
INSERT INTO t1 VALUES (5);
INSERT INTO t1 VALUES (6);
INSERT INTO t1 VALUES (7);
INSERT INTO t1 VALUES (8);
INSERT INTO t1 VALUES (9);
COMMIT;

# Make the I/O to stop in the middle of the transaction
# right after the second Write_rows
--source include/rpl/connection_replica.inc
--let $rpl_after_received_events_action= stop
--let $rpl_event_count= 2
--let $rpl_count_only_event_type= Write_rows
--source include/rpl/receive_event_count.inc

# Make the I/O thread to ask for the full transaction from beginning
# without purging the relay log (SQL thread is active).
--replace_result $master_file MASTER_FILE $master_pos MASTER_POS
--eval CHANGE REPLICATION SOURCE TO SOURCE_LOG_FILE='$master_file', SOURCE_LOG_POS=$master_pos

# Restart the I/O thread
--source include/rpl/start_receiver.inc

# Sync slave with master
--source include/rpl/connection_source.inc
--source include/rpl/sync_to_replica.inc

# Cleanup
--source include/rpl/connection_source.inc
DROP TABLE t1;
--source include/rpl/deinit.inc
