# ==== Purpose ====
#
# The default collation for utf8mb4 changed between 5.7 and 8.0. This test
# checks that replication does not break when an 8.0 slave replicates
# transactions with different default collation from an 5.7 master. It also
# checks that events replicated from the 8.0 slave to a second 8.0 slave are
# correctly applied.
#
# ==== Implementation ====
#
# Simulate the topology 5.7 master -> 8.0 slave_1 -> 8.0 slave_2 by making
# slave_1 replicate a potencially problematic binary log generated by a 5.7
# server.
# Check that that binary log is replicated successfully in slave_1. Finally,
# replicate it to slave_2.
#
# ==== References ====
#
# BUG#27081073 RENAMING A COLUMN BREAKS REPLICATION FROM 5.7 TO 8.0 BECAUSE OF
#              IMPL. COLLATION

--source include/have_binlog_format_row.inc

# simulate the following replication chain:
# 5.7 master -> 8.0 slave -> 8.0 slave
--let $rpl_topology=1->2, 2->3
--let $rpl_skip_start_slave= 1
--source include/rpl/init.inc

--let $rpl_connection_name= server_2
--source include/connection.inc
--let $MYSQLD_SLAVE_DATADIR= `select @@datadir`

# clear slave datadir
RESET REPLICA;
--remove_file $MYSQLD_SLAVE_DATADIR/slave-relay-bin.000001
--remove_file $MYSQLD_SLAVE_DATADIR/slave-relay-bin.index

# copy the binlog with the following statements:
#
#--source include/have_binlog_format_statement.inc
#
# CREATE TABLE `foobar` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,
#                        `foo` varchar(100) CHARACTER SET utf8mb4 NOT NULL,
#                        PRIMARY KEY (`id`), UNIQUE KEY `id_foo` (`foo`)
#                       ) ENGINE=InnoDB AUTO_INCREMENT=12345
#                       DEFAULT CHARSET=latin1;
#
# INSERT INTO foobar (foo) VALUES (0x666F6F626172406578616D706C652E636F6D);
# INSERT INTO foobar (foo) VALUES (0x666F6F626172406578616D706C652E636F6DD98B);
#
# ALTER TABLE `foobar` CHANGE `foo` `old_foo` varchar(100) CHARACTER SET
# utf8mb4 NOT NULL;
# DROP TABLE `foobar`;
#

# on Win* platforms path separator is backslash
if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) IN ('Win32', 'Win64', 'Windows')`)
{
      --copy_file std_data/slave-relay-bin_win.index $MYSQLD_SLAVE_DATADIR/slave-relay-bin.index
}
if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) NOT IN ('Win32', 'Win64', 'Windows')`)
{
      --copy_file std_data/slave-relay-bin_linux.index $MYSQLD_SLAVE_DATADIR/slave-relay-bin.index
}

--copy_file std_data/rpl_cross_version_default_utf8mb4_collation.000001 $MYSQLD_SLAVE_DATADIR/slave-relay-bin.000001

START REPLICA;

# wait until slave reads and applies all events from 5.7 relay log without
# errors
--let $slave_param= Replica_SQL_Running_State
--let $slave_param_value= Replica has read all relay log; waiting for more updates
--source include/rpl/wait_for_replica_status.inc


# check that the second 8.0 slave replicates without errors
--let $rpl_connection_name= server_3
--source include/connection.inc

RESET REPLICA;

--source include/rpl/start_replica.inc

--let $rpl_connection_name= server_2
--source include/connection.inc
--let $sync_slave_connection= server_3
--source include/rpl/sync_to_replica.inc

# clean up
--source include/rpl/stop_replica.inc
RESET REPLICA;
--let $rpl_connection_name= server_2
--source include/connection.inc
call mtr.add_suppression("Client requested source to start replication from position > file size");

# We copy relay log generated by a different server, having source positions
# that do not exist in the current source. Thus we expect IO thread to
# exit with the ER_SERVER_SOURCE_FATAL_ERROR_READING_BINLOG
--let $slave_io_errno= convert_error(ER_SERVER_SOURCE_FATAL_ERROR_READING_BINLOG)
--let $rpl_allow_error= 1
--let $rpl_only_running_threads= 1
--source include/rpl/stop_replica.inc
RESET REPLICA;
--let $rpl_only_running_threads= 1
--source include/rpl/deinit.inc
