#
# Test verifies MTS behaviour with regard to Change-Master.
# It's made the MTS scheduler type insensitive.
# Related bugs:
# Bug 12995174 - MTS: UNEXPECTED RECOVERY ATTEMPT ENDS WITH ER_CONNECTION_METADATA OR ASSERTION

--source include/not_group_replication_plugin.inc
# The test for bug#12995174 is not format-specific but uses sleep
# so it made to be run in ROW format that is the way the bug is reported.
--source include/have_binlog_format_row.inc
--source include/rpl/init_source_replica.inc

--connection slave
call mtr.add_suppression("Replica SQL for channel '': .*Could not execute Write_rows event on table d1.t1; Duplicate entry '13' for key .*");
call mtr.add_suppression("Replica SQL for channel '': ... The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state.");
call mtr.add_suppression("Error writing relay log configuration.");
--source include/rpl/stop_replica.inc
SET @save.replica_parallel_workers=@@global.replica_parallel_workers;
SET @@global.replica_parallel_workers=2;
--source include/rpl/start_replica.inc

--connection master

CREATE DATABASE d1;
CREATE DATABASE d2;
CREATE TABLE d1.t1 (a int unique) ENGINE=INNODB;
CREATE TABLE d2.t1 (a int unique) ENGINE=INNODB;

INSERT INTO d1.t1 VALUES (1);
FLUSH LOGS;

--source include/rpl/sync_to_replica.inc

--source include/rpl/stop_replica.inc
CHANGE REPLICATION SOURCE TO SOURCE_DELAY=5;
--source include/rpl/start_replica.inc

--connection master
INSERT INTO d1.t1 VALUES (3);
--sleep 3
INSERT INTO d1.t1 VALUES (5);
FLUSH LOGS;

--connection slave
--source include/rpl/stop_replica.inc

let $relay_file = query_get_value( SHOW REPLICA STATUS, Relay_Log_File, 1 );
let $relay_pos = query_get_value( SHOW REPLICA STATUS, Relay_Log_Pos, 1 );

--replace_regex /RELAY_LOG_FILE=[^,]+/RELAY_LOG_FILE=FILE/ /RELAY_LOG_POS=[0-9]+/ RELAY_LOG_POS= POS/
eval CHANGE REPLICATION SOURCE TO RELAY_LOG_FILE='$relay_file', RELAY_LOG_POS=$relay_pos;

--source include/rpl/start_replica.inc
--sleep 5
--source include/rpl/stop_replica.inc

let $relay_file = query_get_value( SHOW REPLICA STATUS, Relay_Log_File, 1 );
let $relay_pos = query_get_value( SHOW REPLICA STATUS, Relay_Log_Pos, 1 );
--replace_regex /RELAY_LOG_FILE=[^,]+/RELAY_LOG_FILE=FILE/ /RELAY_LOG_POS=[0-9]+/ RELAY_LOG_POS= POS/
eval CHANGE REPLICATION SOURCE TO RELAY_LOG_FILE='$relay_file', RELAY_LOG_POS=$relay_pos, SOURCE_DELAY=0;

--source include/rpl/start_replica.inc
BEGIN;
INSERT INTO d1.t1 VALUES (13); # to cause the dup key error
# change-master with gaps
--connection master

INSERT INTO d1.t1 VALUES (6);
INSERT INTO d2.t1 VALUES (7);
--connection master1
BEGIN;
INSERT INTO d1.t1 VALUES (13);
--connection master
BEGIN;
INSERT INTO d2.t1 VALUES (8);  # this worker will race over one inserting (13)
--connection master1
COMMIT;
--connection master
COMMIT;
INSERT INTO d2.t1 VALUES (9);

--connection slave1
# make sure workers doing d2.t1 raced the one that occupied  with d1.t1
--let $count= 1
--let $table= d2.t1
--let $wait_condition= select count(*) = 1 from $table where a = 8
--source include/wait_condition_or_abort.inc

--connection slave
# make worker executing (13) to error out
COMMIT;

--let $slave_sql_errno= 1062
--source include/rpl/wait_for_applier_error.inc

--source include/rpl/stop_receiver.inc

let $relay_file = query_get_value( SHOW REPLICA STATUS, Relay_Log_File, 1 );
let $relay_pos = query_get_value( SHOW REPLICA STATUS, Relay_Log_Pos, 1 );
--replace_regex /RELAY_LOG_FILE=[^,]+/RELAY_LOG_FILE=FILE/ /RELAY_LOG_POS=[0-9]+/ RELAY_LOG_POS= POS/
--error ER_MTA_CHANGE_SOURCE_CANT_RUN_WITH_GAPS
eval CHANGE REPLICATION SOURCE TO RELAY_LOG_FILE='$relay_file', RELAY_LOG_POS=$relay_pos;

--disable_warnings
SET @@global.replica_parallel_workers= @save.replica_parallel_workers; # cleanup
--enable_warnings
#
# --relay-log-recovery= 1 and MTS gaps is handled similarly to Change-Master
#
--let $rpl_server_number= 2
--let $rpl_server_parameters= --relay-log-recovery --skip-replica-start
--source include/rpl/restart_server.inc

--connection slave
SELECT @@global.relay_log_recovery as 'must be ON';
call mtr.add_suppression("MTA recovery: automatic recovery failed.*");
call mtr.add_suppression("Failed to initialize the connection metadata structure");
call mtr.add_suppression("Failed to create or recover replication info repositories.");

--let $rpl_server_number= 2
--let $rpl_server_parameters= --skip-replica-start
--source include/rpl/restart_server.inc

SELECT @@global.relay_log_recovery as 'must be OFF';
--connection slave
DELETE FROM d1.t1 WHERE a = 13;
--source include/rpl/start_replica.inc

#
# cleanup
#
--connection master
DROP DATABASE d1;
DROP DATABASE d2;
--source include/rpl/sync_to_replica.inc

###############################################################################
# Bug#20411374: CAN NOT EXECUTE CHANGE MASTER AFTER ERROR OCCURED IN MTS MODE
#
# Problem:
# ========
# When error occurred in MTS mode, If user first change replication source
# (ER_MTA_CHANGE_SOURCE_CANT_RUN_WITH_GAPS received here), and then reset replica,
# user can never change replication source (error ER_MTA_CHANGE_SOURCE_CANT_RUN_WITH_GAPS
# occurred again). The debug version mysqld will crash at this case.
#
# Test:
# =====
# Generate MTS gaps and execute CHANGE REPLICATION SOURCE command so that
# ER_MTA_CHANGE_SOURCE_CANT_RUN_WITH_GAPS error is reported. Execute RESET
# SLAVE command. Reexecute the CHANGE REPLICATION SOURCE command once again it should
# report an assert in the case of bug scenario and it should succeed after the
# fix.
###############################################################################
--source include/rpl/connection_replica.inc
--source include/rpl/stop_replica.inc
SET @save.replica_parallel_workers=@@global.replica_parallel_workers;
SET @@global.replica_parallel_workers=2;
--source include/rpl/start_replica.inc

--source include/rpl/connection_source.inc
CREATE DATABASE d1;
CREATE DATABASE d2;
CREATE TABLE d1.t1 (a int unique) ENGINE=INNODB;
CREATE TABLE d2.t1 (a int unique) ENGINE=INNODB;
--source include/rpl/sync_to_replica.inc
BEGIN;
INSERT INTO d1.t1 VALUES (13); # to cause the dup key error
# change-master with gaps
--source include/rpl/connection_source.inc
INSERT INTO d1.t1 VALUES (6);
INSERT INTO d2.t1 VALUES (7);
--connection master1
BEGIN;
INSERT INTO d1.t1 VALUES (13);
--connection master
BEGIN;
INSERT INTO d2.t1 VALUES (8);  # this worker will race over one inserting (13)
--connection master1
COMMIT;
--connection master
COMMIT;
INSERT INTO d2.t1 VALUES (9);

--source include/rpl/connection_replica1.inc
# make sure workers doing d2.t1 raced the one that occupied  with d1.t1
--let $count= 1
--let $table= d2.t1
--let $wait_condition= select count(*) = 1 from $table where a = 8
--source include/wait_condition.inc

--source include/rpl/connection_replica.inc
# make worker executing (13) to error out
COMMIT;

--let $slave_sql_errno= 1062
--source include/rpl/wait_for_applier_error.inc

--source include/rpl/stop_receiver.inc

--source include/rpl/connection_source.inc
FLUSH LOGS;
--let $file= query_get_value(SHOW BINARY LOG STATUS, File, 1)
--let $pos= query_get_value(SHOW BINARY LOG STATUS, Position, 1)

--source include/rpl/connection_replica.inc
--replace_result $MASTER_MYPORT SOURCE_PORT  $file FILE $pos POS
--replace_column 2 ####
--error ER_MTA_CHANGE_SOURCE_CANT_RUN_WITH_GAPS
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST= '127.0.0.1', SOURCE_PORT= $MASTER_MYPORT, SOURCE_USER= 'root',SOURCE_LOG_FILE = '$file', SOURCE_LOG_POS = $pos ;
RESET REPLICA;
--replace_result $MASTER_MYPORT SOURCE_PORT  $file FILE $pos POS
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST= '127.0.0.1', SOURCE_PORT= $MASTER_MYPORT, SOURCE_USER= 'root',SOURCE_LOG_FILE = '$file', SOURCE_LOG_POS = $pos ;

--disable_warnings
SET @@global.replica_parallel_workers= @save.replica_parallel_workers;
--enable_warnings
--source include/rpl/start_replica.inc
#
# cleanup
#
--source include/rpl/connection_source.inc
DROP DATABASE d1;
DROP DATABASE d2;

--source include/rpl/deinit.inc
