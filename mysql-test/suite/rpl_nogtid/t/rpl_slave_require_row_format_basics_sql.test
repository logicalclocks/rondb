# ==== Purpose ====
# This test evaluates the behavior of a slave channel when running with
# Require_row_format enabled.
#
# This test does not run with GTIDs as the command
#   CHANGE REPLICATION SOURCE TO REQUIRE_ROW_FORMAT = 1;
# when SOURCE_AUTO_POSITION =1 will always delete all relay log files
#
#
# ==== Requirements ====
#
# If configured with Require_row_format = 1 a channel shall error out and stop
# when it detects on its SQL thread:
#
# TC1. A DML transaction not logged with row based logging
# TC2. A LOAD DATA, INTVAR, RAND or USER_VAR event
# TC3. A CREATE/DROP TEMPORARY TABLE statement
#
# ==== Implementation ====
#
#  0. Add suppressions for the test.
#     Create a test include.
#     Create tables for the test
#  1.  Log a DML transaction using statement based logging (TC1)
#  1.1 Check the slave SQL thread fails
#  2.  Log a transaction with a LOAD DATA event (TC2)
#  2.1 Check the slave SQL thread fails
#  3.  Log a transaction with a USER_VAR event (TC2)
#  3.1 Check the slave SQL thread fails
#  4.  Log a transaction with a RAND event (TC2)
#  4.1 Check the slave SQL thread fails
#  5.  Log a transaction with a INTVAR event (TC2)
#  5.1 Check the slave SQL thread fails
#  6.  Log a transaction with a CREATE TEMPORARY TABLE query (TC3)
#  6.1 Check the slave SQL thread fails
#  7.  Log a transaction with a DROP TEMPORARY TABLE query (TC3)
#  7.1 Check the slave SQL thread fails
#  8. Cleanup
#
#  ==== Related Worklog ====
#
#  WL #12968 : Configure replication applier to require row-based replication

-- source include/have_binlog_format_statement.inc
-- source include/rpl/init_source_replica.inc
-- source include/not_hypergraph.inc  # Gets confused by the extra logging.

--echo #
--echo # 0. Add suppressions for the test.
--echo #    Create a test include.
--echo #    Create tables for the test

# Suppressions

call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state.");
call mtr.add_suppression("The query does not comply with variable require_row_format restrictions.");

# Test include

--write_file $MYSQL_TMP_DIR/check_applier_error.inc END_OF_PROCEDURE

  --source include/rpl/connection_replica.inc

  CHANGE REPLICATION SOURCE TO REQUIRE_ROW_FORMAT = 0;

  --source include/rpl/start_receiver.inc
  --source include/rpl/connection_source.inc
  --source include/rpl/sync_to_replica_received.inc

  --let $relay_log_file= query_get_value(SHOW REPLICA STATUS, Relay_Log_File, 1)

  --source include/rpl/stop_replica.inc

  --eval CHANGE REPLICATION SOURCE TO REQUIRE_ROW_FORMAT = 1;

  START REPLICA;

  --let $slave_sql_errno= convert_error(ER_CLIENT_QUERY_FAILURE_INVALID_NON_ROW_FORMAT)
  --source include/rpl/wait_for_applier_error.inc

  STOP REPLICA;

  --let $assert_text = The slave stopped as there was an error in the SQL thread with REQUIRE_ROW_FORMAT
  --let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.2.err
  --let $assert_select = Error 'The query does not comply with variable require_row_format restrictions.'
  --let $assert_count = $error_count
  --source include/assert_grep.inc

  --let $assert_text = $assert_message_text
  --source include/assert.inc

  --echo # No issues when REQUIRE_ROW_FORMAT = 0

  --eval CHANGE REPLICATION SOURCE TO REQUIRE_ROW_FORMAT = 0;

  --source include/rpl/start_replica.inc

  --source include/rpl/connection_source.inc

  --source include/rpl/sync_to_replica.inc

  --echo # Reset for next step

  --source include/rpl/stop_replica.inc

  RESET REPLICA;

  --source include/rpl/connection_source.inc

  RESET BINARY LOGS AND GTIDS;

  --inc $error_count

END_OF_PROCEDURE

--let $error_count = 1

# Record the number of temp tables present

--source include/rpl/connection_replica.inc
--let $_number_temp_tables = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO`

# Create tables for testing

--source include/rpl/connection_source.inc

CREATE TABLE t1 (i INT);
CREATE TABLE t2 (c1 TEXT);
CREATE TABLE t3 (j INT PRIMARY KEY AUTO_INCREMENT);

--source include/rpl/sync_to_replica.inc
--source include/rpl/stop_replica.inc

--echo #
--echo # 1. Log a DML transaction using statement based logging (TC1)

--source include/rpl/connection_source.inc

INSERT INTO t1 VALUES (0);

--echo #
--echo # 1.1 Check the slave SQL thread fails

--let $assert_cond= [ SELECT COUNT(*) = 0 FROM t1 ]
--let $assert_message_text = Nothing was inserted on the table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 2. Log a transaction with a LOAD DATA event (TC2)

LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE t2;

--echo #
--echo # 2.1 Check the slave SQL thread fails

--let $assert_cond= [SELECT COUNT(*) = 0 FROM t2]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 3. Log a transaction with a USER_VAR event (TC2)

--eval SET @v= 10
--eval INSERT INTO t1 VALUES (@v)

--echo #
--echo # 3.1 Check the slave SQL thread fails

--let $assert_cond= [SELECT COUNT(*) = 1 FROM t1]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 4. Log a transaction with a RAND event (TC2)

INSERT INTO t1 VALUES (Rand());

--echo #
--echo # 4.1 Check the slave SQL thread fails

--let $assert_cond= [SELECT COUNT(*) = 2 FROM t1]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 5. Log a transaction with a INTVAR event (TC2)

 INSERT INTO t3 VALUES();

--echo #
--echo # 5.1 Check the slave SQL thread fails

--let $assert_cond= [SELECT COUNT(*) = 0 FROM t3]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 6. Log a transaction with a CREATE TEMPORARY TABLE query (TC3)

CREATE TEMPORARY TABLE temp1 (k INT PRIMARY KEY);

--echo #
--echo # 6.1 Check the slave SQL thread fails

--let $assert_cond= [SELECT COUNT(*) = $_number_temp_tables FROM INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO]
--let $assert_message_text = No temporary table was created
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 7. Log a transaction with a DROP TEMPORARY TABLE query (TC3)

DROP TEMPORARY TABLE temp1;

--echo #
--echo # 7.1 Check the slave SQL thread fails

--inc $_number_temp_tables
--let $assert_cond= [SELECT COUNT(*) = $_number_temp_tables FROM INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO]
--let $assert_message_text = There is still a temporary table
--source $MYSQL_TMP_DIR/check_applier_error.inc

--echo #
--echo # 8. Cleanup

--remove_file $MYSQL_TMP_DIR/check_applier_error.inc

--source include/rpl/connection_replica.inc
--source include/rpl/start_replica.inc

--source include/rpl/connection_source.inc

DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;

--source include/rpl/sync_to_replica.inc

--source include/rpl/deinit.inc
