# ==== Purpose ====
#
# When two channels use ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS =
# LOCAL, verify that they do not interfere with each other or with
# client sessions.  I.e., the two channels and any session should
# assign distinct GTIDs to all transactions.
#
# ==== Requirements ====
#
# R1. When two channels use ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS =
#     LOCAL, and both execute at the same time, and the workloads are
#     non-conflicting, they shall both succeed, and shall generate
#     different GTIDs for all transactions.
#
# R2. When a channel uses ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS =
#     LOCAL, and there is a concurrent, non-conflicting workload in
#     user sessions, both the user sessions and the replication
#     channel shall succeed, and shall generate different GTIDs for
#     all transactions.
#
# ==== Implementation ====
#
# Configure multi-source replication with two sources and one replica.
# On each node, create a table and a stored procedure that is capable
# of generating 100 transactions in the table.  Run the procedure on
# the sources, wait for them to complete and to be received on the
# replica.  Start the applier on the replica, and execute the stored
# procedure on the replica.  Wait for both the stored procedure and
# the replicated transactions to be applied.  Verify that the table
# contains 300 rows, that 300 GTIDs were generated, and that all those
# GTIDs are consecutive.
#
# If there would be bugs where two transactions were assigned the
# same GTID, one of them would be auto-skipped, so that fewer rows
# would be inserted in the table and fewer GTIDs generated.
#
# ==== References ====
#
# WL#12819:GTIDs: Replicate from GTID disabled source to GTID enabled replica directly

--let $rpl_topology = 1->3, 2->3
--let $rpl_multi_source = 1
--let $rpl_skip_start_slave = 1
--source include/rpl/init.inc

--echo ==== INITIALIZE ====

--let $row_count = 100

# Enable GTIDs on replica.
--connection server_3
SET @@global.enforce_gtid_consistency = ON;
SET @@global.gtid_mode = OFF_PERMISSIVE;
SET @@global.gtid_mode = ON_PERMISSIVE;
SET @@global.gtid_mode = ON;

# Enable the feature on replica.
CHANGE REPLICATION SOURCE TO ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = LOCAL FOR CHANNEL 'channel_1';
CHANGE REPLICATION SOURCE TO ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = LOCAL FOR CHANNEL 'channel_2';

# Start receiver on replica.
--source include/rpl/start_receiver.inc

# Procedure and table definitions.
--delimiter |
let $setup =
  SET @@session.sql_log_bin = 0;
  CREATE TABLE t (a INT);
  CREATE PROCEDURE workload() BEGIN
    DECLARE i INT DEFAULT 0;
    WHILE i < $row_count DO
      INSERT INTO t VALUES (i);
      SET i = i + 1;
    END WHILE;
  END;
  SET @@session.sql_log_bin = 1|
--delimiter ;

--echo ==== TEST ====

--echo # Create the table and procedure on all nodes. Invoke the procedure on the sources.

--connection server_1
--eval $setup
send CALL workload();

--connection server_2
--eval $setup
send CALL workload();

--connection server_3
--eval $setup

--echo # Wait for replica to receive (but not apply) all transactions on both channels.
--connection server_1
--reap
--let $sync_slave_connection = server_3_1
--let $rpl_channel_name = 'channel_1'
--source include/rpl/sync_to_replica_received.inc

--connection server_2
--reap
--let $sync_slave_connection = server_3_1
--let $rpl_channel_name = 'channel_2'
--source include/rpl/sync_to_replica_received.inc

--echo # Start applying from both channels.
--let $rpl_channel_name =
--source include/rpl/start_applier.inc

--echo # Concurrently, execute the same workload on replica.
CALL workload();

# Wait for everything to be applied.
--let $three = 3
--expr $total_row_count = $row_count * $three
--let $wait_condition = SELECT COUNT(*) = $total_row_count FROM t
--let $wait_timeout = 90
--source include/wait_condition.inc
--let $assert_cond = @@global.gtid_executed = "$server_3_uuid:1-$total_row_count"
--let $assert_text = Replica should have applied $total_row_count distinct GTIDs
--source include/assert.inc

--echo ==== CLEAN UP ====

--delimiter |
let $cleanup =
  SET @@session.sql_log_bin = 0;
  DROP PROCEDURE workload;
  DROP TABLE t;
  SET @@session.sql_log_bin = 1|
--delimiter ;

--connection server_1
eval $cleanup;
--connection server_2
eval $cleanup;
--connection server_3
eval $cleanup;

--source include/rpl/stop_replica.inc
CHANGE REPLICATION SOURCE TO ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = OFF FOR CHANNEL 'channel_1';
CHANGE REPLICATION SOURCE TO ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = OFF FOR CHANNEL 'channel_2';
SET @@global.gtid_mode = ON_PERMISSIVE;
SET @@global.gtid_mode = OFF_PERMISSIVE;
SET @@global.gtid_mode = OFF;
SET @@global.enforce_gtid_consistency = OFF;

--let $rpl_skip_sync = 1
--source include/rpl/deinit.inc
