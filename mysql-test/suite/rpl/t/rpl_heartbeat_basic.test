# ==== Purpose ====
#
# Testing basic functionality of heartbeat.
#
# Description:
# * Testing different values for slave_heartbeat_period.
# * How to affect various statements to slave_heartbeat_period
# * Various states of slave and heartbeat
# * Various states of master and heartbeat
# * Circular replication
#
-- source include/big_test.inc
--source include/rpl/init_source_replica.inc
#
# The test runs long and does not have any specifics to 
# binlog_format. It is choosen therefore to run with MIXED mode
# in order to not slow down much `make test'.
#
--source include/have_binlog_format_mixed.inc

call mtr.add_suppression("Replica I/O: The replica I/O thread stops because a fatal error is encountered when it tried to SET @master_binlog_checksum");
call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state");

--echo

# Set number of retries to connect to master
let $connect_retry= 20;

--echo *** Preparing ***
--source include/rpl/sync_to_replica.inc

--source include/rpl/stop_replica.inc
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;

SET @restore_replica_net_timeout=@@global.replica_net_timeout;
let $slave_heartbeat_timeout= query_get_value(select heartbeat_interval from performance_schema.replication_connection_configuration, heartbeat_interval, 1);
--disable_query_log
eval SET @restore_slave_heartbeat_timeout=$slave_heartbeat_timeout;
--enable_query_log

--connection master
RESET BINARY LOGS AND GTIDS;
SET @restore_replica_net_timeout=@@global.replica_net_timeout;
SET @restore_event_scheduler=@@global.event_scheduler;
--echo

#
# Test slave_heartbeat_period
#

--connection slave

# Default value of slave_heartbeat_timeout = replica_net_timeout/2
--echo *** Default value ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root';
let $replica_net_timeout= query_get_value(SHOW VARIABLES LIKE 'replica_net_timeout', Value, 1);
let $slave_heartbeat_timeout= query_get_value(select heartbeat_interval from performance_schema.replication_connection_configuration, heartbeat_interval, 1);
let $result= query_get_value(SELECT $replica_net_timeout/$slave_heartbeat_timeout AS Result, Result, 1);
--echo replica_net_timeout/slave_heartbeat_timeout=$result

RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

# Reset replica set slave_heartbeat_timeout = replica_net_timeout/2
--echo *** Reset replica affect ***
--disable_warnings
SET @@global.replica_net_timeout=30;
--enable_warnings
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=5;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;

select heartbeat_interval from performance_schema.replication_connection_configuration;
--echo

# Check default value of slave_heartbeat_timeout if replica_net_timeout is changed
--echo *** Default value if replica_net_timeout changed ***
--disable_warnings
SET @@global.replica_net_timeout=50;
--enable_warnings
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry;
select heartbeat_interval from performance_schema.replication_connection_configuration;
SET @@global.replica_net_timeout=@restore_replica_net_timeout;

RESET REPLICA;
RESET BINARY LOGS AND GTIDS;

--echo

# Set replica_net_timeout less than current value of heartbeat_interval
--echo *** Warning if updated replica_net_timeout < slave_heartbeat_timeout ***
let $slave_heartbeat_timeout= query_get_value(select heartbeat_interval from performance_schema.replication_connection_configuration, heartbeat_interval, 1);
--replace_result $slave_heartbeat_timeout SLAVE_HEARTBEAT_TIMEOUT
eval SET @@global.replica_net_timeout=FLOOR($slave_heartbeat_timeout)-1;
SET @@global.replica_net_timeout=@restore_replica_net_timeout;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

# Set value of slave_heartbeat_period greater than replica_net_timeout
--echo *** Warning if updated slave_heartbeat_timeout > replica_net_timeout ***
let $replica_net_timeout= query_get_value(SHOW VARIABLES LIKE 'replica_net_timeout', Value, 1);
inc $replica_net_timeout;
--replace_result $MASTER_MYPORT SOURCE_PORT $replica_net_timeout REPLICA_NET_TIMEOUT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=$replica_net_timeout;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;

--echo 

# Changing of replica_net_timeout shouldn't affect to current value of slave_heartbeat_period
--echo *** CHANGE REPLICATION SOURCE statement only updates slave_heartbeat_period ***
--disable_warnings
SET @@global.replica_net_timeout=20;
--enable_warnings
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=5;
SHOW VARIABLES LIKE 'replica_net_timeout';
select heartbeat_interval from performance_schema.replication_connection_configuration;
SET @@global.replica_net_timeout=2*@@global.replica_net_timeout;
SHOW VARIABLES LIKE 'replica_net_timeout';
select heartbeat_interval from performance_schema.replication_connection_configuration;
SET @@global.replica_net_timeout=@restore_replica_net_timeout;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

# Master value of replica_net_timeout shouldn't affect to slave's slave_heartbeat_period
--echo *** Update replica_net_timeout on master ***
--connection master
--disable_warnings
SET @@global.replica_net_timeout=500;
--enable_warnings
--connection slave
SET @@global.replica_net_timeout=200;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry;
--source include/rpl/start_replica.inc
--connection master
--source include/rpl/sync_to_replica.inc
SHOW VARIABLES LIKE 'replica_net_timeout';
select heartbeat_interval from performance_schema.replication_connection_configuration;
SET @@global.replica_net_timeout=@restore_replica_net_timeout;
--source include/rpl/stop_replica.inc
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--connection master

SET @@global.replica_net_timeout=@restore_replica_net_timeout;
--echo

# Start/stop replica shouldn't change slave_heartbeat_period
--echo *** Start/stop replica ***
--connection slave
--disable_warnings

SET @@global.replica_net_timeout=100;
--enable_warnings
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=20;
--source include/rpl/start_replica.inc
--connection master
--source include/rpl/sync_to_replica.inc
select heartbeat_interval from performance_schema.replication_connection_configuration;
--source include/rpl/stop_replica.inc
select heartbeat_interval from performance_schema.replication_connection_configuration;

--echo

# Reload slave shouldn't change slave_heartbeat_period
--echo *** Reload slave ***
--connection slave
--disable_warnings
SET @@global.replica_net_timeout=50;
--enable_warnings
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=30;
--let $rpl_server_number= 2
--source include/rpl/restart_server.inc
select heartbeat_interval from performance_schema.replication_connection_configuration;
SET @restore_replica_net_timeout=@@global.replica_net_timeout;
--echo

# Disable heartbeat
--echo *** Disable heartbeat ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0;
select heartbeat_interval from performance_schema.replication_connection_configuration;
select count_received_heartbeats from performance_schema.replication_connection_status;
--source include/rpl/start_replica.inc
--connection master
--source include/rpl/sync_to_replica.inc
--sleep 2
select heartbeat_interval from performance_schema.replication_connection_configuration;
select count_received_heartbeats from performance_schema.replication_connection_status;
--source include/rpl/stop_replica.inc
select heartbeat_interval from performance_schema.replication_connection_configuration;
select count_received_heartbeats from performance_schema.replication_connection_status;

RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
let $slave_heartbeat_timeout= query_get_value(select heartbeat_interval from performance_schema.replication_connection_configuration, heartbeat_interval, 1);
--replace_result $slave_heartbeat_timeout SLAVE_HEARTBEAT_TIMEOUT
--eval SELECT $slave_heartbeat_timeout = 0 AS Result
--echo 
#
# Check limits for slave_heartbeat_timeout
#

--echo *** Min slave_heartbeat_timeout ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.001;
select heartbeat_interval from performance_schema.replication_connection_configuration;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.0009;
select heartbeat_interval from performance_schema.replication_connection_configuration;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

--echo *** Max slave_heartbeat_timeout ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=4294967;
select heartbeat_interval from performance_schema.replication_connection_configuration;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE 
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=4294968;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
# Check double size of max allowed value for source_heartbeat_period
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE 
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=8589935;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
# Check 2^32
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE 
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=4294967296;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

--echo *** Misc incorrect values ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_PARSE_ERROR
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD='-1';
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_PARSE_ERROR
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD='123abc';
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
--error ER_PARSE_ERROR
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD='';
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--echo

#
# Testing heartbeat 
#
# Check received heartbeat events for running slave.
# It must arrived not ealier than as specified by HEARTBEAT_PERIOD.
#
--let $hb_period= 3.0
--echo *** Running slave ***
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD= $hb_period;
SELECT unix_timestamp() into @time_0;
--source include/rpl/start_replica.inc

--connection master
--source include/rpl/sync_to_replica.inc
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col= count_received_heartbeats;
let $table=replication_connection_status;
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
SELECT unix_timestamp() into @time_1;
if (`SELECT @time_1 - @time_0 < $hb_period`)
{
    --echo "Heartbeat is received ealier than specified."
    --die
}
--echo Heartbeat event received
--echo

# Check received heartbeat events for stopped slave
--echo *** Stopped slave ***
--source include/rpl/stop_replica.inc
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD= 0.1;

let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
sleep 2;
let $rcvd_heartbeats_after= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $result= query_get_value(SELECT ($rcvd_heartbeats_after - $rcvd_heartbeats_before) AS Result, Result, 1);
--echo Number of received heartbeat events while slave stopped: $result
--echo

# Check received heartbeat events for started slave
--echo *** Started slave ***
--source include/rpl/start_replica.inc
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
--echo

# Check received heartbeat events for stopped IO thread
--echo *** Stopped IO thread ***
--source include/rpl/stop_receiver.inc
let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
sleep 2;
let $rcvd_heartbeats_after= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $result= query_get_value(SELECT ($rcvd_heartbeats_after - $rcvd_heartbeats_before) AS Result, Result, 1);
--echo Number of received heartbeat events while io thread stopped: $result
--echo

# Check received heartbeat events for started IO thread
--echo *** Started IO thread ***
START REPLICA IO_THREAD;
--source include/rpl/wait_for_receiver_to_start.inc
let $status_var_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
--echo

# Check received heartbeat events for stopped SQL thread
--echo *** Stopped SQL thread ***
--source include/rpl/stop_applier.inc
let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
sleep 2;
let $rcvd_heartbeats_after= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $result= query_get_value(SELECT ($rcvd_heartbeats_after - $rcvd_heartbeats_before) > 0 AS Result, Result, 1);
--echo Heartbeat events are received while sql thread stopped (1 means 'yes'): $result
--echo

# Check received heartbeat events for started SQL thread
--echo *** Started SQL thread ***
START REPLICA SQL_THREAD;
--source include/rpl/wait_for_applier_to_start.inc
let $status_var_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
--echo

# Check received heartbeat event for stopped SQL thread by error
--echo *** Stopped SQL thread by error ***
--connection master
CREATE TABLE t1 (a INT PRIMARY KEY, b VARCHAR(10), c LONGTEXT);
--source include/rpl/sync_to_replica.inc
INSERT INTO t1 VALUES (1, 'on slave', NULL);
--connection master
INSERT INTO t1 VALUES (1, 'on master', NULL);
--connection slave
call mtr.add_suppression("Replica SQL.*Duplicate entry .1. for key .t1.PRIMARY.. on query.* Error_code: MY-001062");
call mtr.add_suppression("Replica SQL.*Request to stop replica SQL Thread received while applying a group that has non-transactional changes; waiting for completion of the group");
let $slave_errno= ER_DUP_ENTRY
--source include/rpl/wait_for_applier_error.inc
let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
sleep 2;
let $rcvd_heartbeats_after= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $result= query_get_value(SELECT ($rcvd_heartbeats_after - $rcvd_heartbeats_before) > 0 AS Result, Result, 1);
--echo Heartbeat events are received while sql thread stopped (1 means 'yes'): $result
--source include/rpl/stop_receiver.inc
DELETE FROM t1;
--source include/rpl/start_replica.inc
--connection master
--source include/rpl/sync_to_replica.inc
--connection master
DROP TABLE t1;
--echo

# Check received heartbeat events while logs flushed on slave
--source include/rpl/sync_to_replica.inc
--echo *** Flush logs on slave ***
--let $rpl_no_start_slave= 1
--source include/rpl/reset.inc
--let $rpl_no_start_slave= 0
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.5;
let $slave_param_comparison= =;
--source include/rpl/start_replica.inc
let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
# Flush logs every 0.1 second during 10 sec
--disable_query_log
let $i=100;
while ($i) {
  FLUSH LOGS;
  dec $i;
  sleep 0.1;
}
--enable_query_log
--let $assert_cond= [select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1] > $rcvd_heartbeats_before
--let $assert_text= Should receive at least one heartbeat event while running FLUSH LOGS for 10 seconds
--source include/assert.inc
--echo

# Use compressed protocol between master and slave
--echo *** Compressed protocol ***
--connection master
SET @@global.replica_compressed_protocol=1;
--connection slave
--source include/rpl/stop_replica.inc
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
SET @@global.replica_compressed_protocol=1;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.1;
--source include/rpl/start_replica.inc
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col= count_received_heartbeats;
let $table= replication_connection_status;
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
SET @@global.replica_compressed_protocol=0;
--connection master
SET @@global.replica_compressed_protocol=0;
--echo

# Check received heartbeat events after reset of master
--echo *** Reset source ***
--connection slave

STOP REPLICA;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.1;
--source include/rpl/start_replica.inc
let $rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
--connection master
RESET BINARY LOGS AND GTIDS;
--enable_query_log
--source include/rpl/sync_to_replica.inc
--sleep 2
let $rcvd_heartbeats_after= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $result= query_get_value(SELECT ($rcvd_heartbeats_after - $rcvd_heartbeats_before) > 0 AS Result, Result, 1);
--echo Heartbeat events are received after reset of master (1 means 'yes'): $result
--echo

# Reloaded master should restore heartbeat
--echo *** Reload master ***
--connection slave
STOP REPLICA;
RESET REPLICA;
RESET BINARY LOGS AND GTIDS;
--replace_result $MASTER_MYPORT SOURCE_PORT
--replace_column 2 ####
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=0.1;
--source include/rpl/start_replica.inc
# Wait until slave_received_heartbeats will be incremented
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col= count_received_heartbeats;
let $table=replication_connection_status;
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
--let $rpl_server_number= 1
--source include/rpl/restart_server.inc
# make sure IO thread has re-connected 
# due to slow valgrind env the following wait_for_status may time out
--let $rpl_allow_error= 1
--source include/rpl/wait_for_receiver_to_start.inc
# Wait until slave_received_heartbeats will be incremented
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col= count_received_heartbeats;
let $table= replication_connection_status;
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received
--echo

# Circular replication: demonstrating bidirectional hearbeat flow
--echo *** Circular replication ***
# Configure circular replication
--source include/rpl/reset.inc
--source include/rpl/stop_replica.inc
--let $rpl_topology= 1->2->1
--source include/rpl/change_topology.inc

#--connection slave
#--source include/rpl/stop_replica.inc
#let $slave_binlog= query_get_value(SHOW BINARY LOG STATUS, File, 1);
--connection master
#--replace_result $SLAVE_MYPORT SLAVE_PORT $slave_binlog SLAVE_BINLOG
#eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$SLAVE_MYPORT, SOURCE_USER='root', SOURCE_CONNECT_RETRY=$connect_retry, SOURCE_HEARTBEAT_PERIOD=1, SOURCE_LOG_FILE='$slave_binlog';

# BUG#12403008 RPL_HEARTBEAT_BASIC FAILS SPORADICALLY ON PUSHBUILD
# SOURCE_HEARTBEAT_PERIOD had the default value (replica_net_timeout/2)
# so wait on "Heartbeat event received on master", that only waits for
# 1 minute, sometimes timeout before heartbeat arrives.
--replace_column 2 ####
CHANGE REPLICATION SOURCE TO SOURCE_HEARTBEAT_PERIOD=1;
--source include/rpl/start_replica.inc

# Insert data on master and on slave and make sure that it replicated for both directions
CREATE TABLE t1 (a INT PRIMARY KEY, b VARCHAR(10));
INSERT INTO t1 VALUES(1, 'on master');
--save_master_pos
--connection slave
## set slave period 1/10 of master's
--replace_column 2 ####
CHANGE REPLICATION SOURCE TO SOURCE_HEARTBEAT_PERIOD=0.1;
--source include/rpl/start_replica.inc
--sync_with_master
INSERT INTO t1 VALUES(2, 'on slave');
--let $sync_slave_connection= master
--source include/rpl/sync_to_replica.inc
SELECT * FROM t1 ORDER BY a;
let $master_rcvd_heartbeats_before= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
--connection slave
SELECT * FROM t1 ORDER BY a;

# Wait for heartbeat event on master
--connection master

let $status_col= count_received_heartbeats;
let $table=replication_connection_status;
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received on master

# Wait heartbeat events on slave
--connection slave
let $status_col= count_received_heartbeats;
let $table= replication_connection_status;
let $status_col_value= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);
let $status_col_comparsion= >;
--source include/wait_for_pfs_status.inc
--echo Heartbeat event received on slave
let $slave_rcvd_heartbeats= query_get_value(select count_received_heartbeats from performance_schema.replication_connection_status, count_received_heartbeats, 1);

#
# Clean up and restore system variables
#
--echo *** Clean up ***
--connection master
#--source include/rpl/stop_replica.inc
DROP TABLE t1;
--connection slave
SET @@global.replica_net_timeout=@restore_replica_net_timeout;

#--let $rpl_only_running_threads= 1
--source include/rpl/deinit.inc
