--source include/not_group_replication_plugin.inc

# There is no point in running this test in more
# than once, ie, one for each binary log format.
-- source include/have_binlog_format_row.inc
-- source include/rpl/init_source_replica.inc

#
# BUG#43535: last_io_error in show slave status is confusing
#

--let $ts_regexp= [0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]

############# CHECKS SQL ERRORS #############

--let $field= Last_SQL_Error_Timestamp

-- connection master
CREATE TABLE t1 (a INT, b blob, PRIMARY KEY(b(512)));
--source include/rpl/sync_to_replica.inc
# action: remove table on the slave to force SQL error
DROP TABLE t1;

-- connection master
# action: drop the table on the master
DROP TABLE t1; 

-- connection slave
# action: now  wait for the slave to stop because it cannot
#         remove a table that does not exist
let $slave_sql_errno=1051; # ER_BAD_TABLE_ERROR
call mtr.add_suppression("Replica SQL for channel '': .*Error .Unknown table .test.t1.. on query.* Error_code: MY-001051");
call mtr.add_suppression("Unknown table .test.t1. Error_code: MY-001051");
call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state");

-- source include/rpl/wait_for_applier_error.inc

--let $errts0= query_get_value("SHOW REPLICA STATUS", $field, 1)
--let $assert_text= $field is not null and matches the expected format
--let $assert_cond= `SELECT ("$errts0" REGEXP "$ts_regexp")`
--source include/assert.inc

# action: stop the slave (this should preserve the error)
-- source include/rpl/stop_replica.inc
--let $assert_cond= "$errts0" = "[SHOW REPLICA STATUS, $field, 1]"
--let $assert_text= $field matches the one reported before stopping slave threads
--source include/assert.inc

-- connection slave
# action: create the table again on the slave so that it resumes replication
#         correctly when we restart the slave
CREATE TABLE  t1 (a INT, b blob, PRIMARY KEY(b(512)));
-- let $sql_errno= query_get_value("SHOW REPLICA STATUS", Last_SQL_Errno, 1)
-- echo Last_SQL_Errno: $sql_errno
-- source include/rpl/start_replica.inc

-- echo # assertion: show that the error is not reported anymore since replication
-- echo #            has resumed correctly
let $slave_param= Last_SQL_Errno;
let $slave_param_comparison= =; 
let $slave_param_value= 0;
let $slave_error_message= Failed while waiting for replica to clear the SQL error after starting;
source include/rpl/wait_for_replica_status.inc;


############# CHECKS IO ERRORS #############

--let $rpl_only_running_threads= 1
--source include/rpl/reset.inc
--let $field= Last_IO_Error_Timestamp

# mostly copied and extended from rpl_server_id1.test
-- connection slave

# replicate ourselves
-- source include/rpl/stop_replica.inc
-- replace_result $SLAVE_MYPORT SLAVE_PORT
-- eval CHANGE REPLICATION SOURCE to SOURCE_PORT=$SLAVE_MYPORT
START REPLICA;

-- let $slave_param= Last_IO_Errno
-- let $slave_param_value= 13117
-- source include/rpl/wait_for_replica_status.inc
-- echo *** must be having the replicate-same-server-id IO thread error ***

--let $errts0= query_get_value("SHOW REPLICA STATUS", $field, 1)
--let $assert_text= $field is not null and matches the expected format
--let $assert_cond= `SELECT ("$errts0" REGEXP "$ts_regexp")`
--source include/assert.inc

# action: stop the slave
-- source include/rpl/stop_replica.inc

--let $assert_cond= "$errts0" = "[SHOW REPLICA STATUS, $field, 1]"
--let $assert_text= $field matches the one reported before stopping slave threads
--source include/assert.inc

# action: restore correct settings
-- replace_result $MASTER_MYPORT SOURCE_PORT
-- eval CHANGE REPLICATION SOURCE to SOURCE_PORT=$MASTER_MYPORT
-- let $io_errno= query_get_value("SHOW REPLICA STATUS", Last_IO_Errno, 1)
-- echo Last_IO_Errno: $io_errno
-- source include/rpl/start_replica.inc

-- echo # assertion: show that no error is reported anymore
let $slave_param= Last_IO_Errno;
let $slave_param_comparison= =; 
let $slave_param_value= 0;
let $slave_error_message= Failed while waiting for replica to clear the IO error after starting;
source include/rpl/wait_for_replica_status.inc;

--source include/rpl/deinit.inc
