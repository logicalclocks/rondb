#
# Bug #30703  SHOW STATUS LIKE 'Slave_running' is not compatible with `SHOW SLAVE STATUS'
# The test verifies that  SHOW STATUS LIKE 'Slave_running' displays ON
# if and only if `SHOW REPLICA STATUS' displays YES for Replica_IO_Running and  Replica_SQL_Running
#
--source include/not_group_replication_plugin.inc
source include/have_debug.inc;
source include/have_debug_sync.inc;
source include/rpl/init_source_replica.inc;

connection slave;

SET DEBUG_SYNC= 'RESET';
source include/rpl/stop_replica.inc;

--let $debug_point= dbug.before_get_running_status_yes
--source include/add_debug_point.inc

# Test 1. Slave is stopped

--echo # Replica_IO_Running, Replica_SQL_Running, must be OFF, OFF in the following queries

select rcs.SERVICE_STATE as Replica_IO_Running, ras.SERVICE_STATE as Replica_SQL_Running from performance_schema.replication_applier_status ras, performance_schema.replication_connection_status rcs;

#  Test 2. The slave IO thread is started but not yet got connected to master
#          and SQL thread is not started

START REPLICA io_thread;

#
# Notice a difference between versions in showing p.2: 
# 5.1 has two OFF,ON IO-thread state running state whereas later versions
# have three: OFF,Connecting,ON.
# Hence, 5.1 must display OFF NO NO where as 5.1+ OFF Connecting NO
# (thank you, Andrei for leaving these comments. -- Andrei repl MC at the moment)
#
--echo # Replica_IO_Running, Replica_SQL_Running, must be CONNECTING, OFF in the following queries

select rcs.SERVICE_STATE as Replica_IO_Running, ras.SERVICE_STATE as Replica_SQL_Running from performance_schema.replication_applier_status ras, performance_schema.replication_connection_status rcs;

# Test 3. The slave IO thread is started and got connected to master
#         and SQL thread is still not started

SET DEBUG_SYNC='now SIGNAL signal.io_thread_let_running'; # unblock IO thread now
let $slave_param= Replica_IO_Running;
let $slave_param_value= YES;
source include/rpl/wait_for_replica_status.inc;

--echo # Replica_IO_Running, Replica_SQL_Running, must be ON, OFF in the following queries

select rcs.SERVICE_STATE as Replica_IO_Running, ras.SERVICE_STATE as Replica_SQL_Running from performance_schema.replication_applier_status ras, performance_schema.replication_connection_status rcs;

# Test 4. The slave IO thread is started and got connected to master
#         and SQL thread is started

START REPLICA sql_thread;
source include/rpl/wait_for_applier_to_start.inc;

--echo # Replica_IO_Running, Replica_SQL_Running, must be ON, ON in the following queries

select rcs.SERVICE_STATE as Replica_IO_Running, ras.SERVICE_STATE as Replica_SQL_Running from performance_schema.replication_applier_status ras, performance_schema.replication_connection_status rcs;

# cleanup

connection master;

# Bug#11765758 - 58754
# @@global.debug is read by the slave threads through dbug-interface. 
# Hence, before a client thread set @@global.debug we have to ensure that:
# (a) the slave threads are stopped, or (b) the slave threads are in
# sync and waiting.
--source include/rpl/sync_to_replica.inc

--let $debug_point= dbug.before_get_running_status_yes
--source include/remove_debug_point.inc

SET DEBUG_SYNC= 'RESET';
--echo End of tests
--source include/rpl/deinit.inc
