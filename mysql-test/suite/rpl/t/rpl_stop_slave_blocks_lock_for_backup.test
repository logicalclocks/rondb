# ==== Purpose ====
#
# This script aims at testing that `LOCK INSTANCE FOR BACKUP` doesn't acquire
# the BACKUP lock while the server is stopping the slave SQL thread - either by
# means of `STOP REPLICA` or `STOP REPLICA SQL_THREAD`.
#
# ==== Implementation ====
#
# TC1. Lock instance for backup while `STOP REPLICA` executes
# ---------------------------------------------------------
# 1) Open two different connections, A and B to the slave node and set
#    `stop_replica_dont_release_backup_lock` debug sync point in both.
# 2) Through connection A, send a `STOP REPLICA` statement to the server that,
#    after acquiring the BACKUP lock, will wait for a
#    `tried_to_lock_instance_for_backup` signal in the
#    `stop_replica_dont_release_backup_lock` sync point.
# 3) Through connection B, execute a `LOCK INSTANCE FOR BACKUP` statement and
#    expect a `ER_LOCK_WAIT_TIMEOUT` error.
# 4) Through connection B, send the `tried_to_lock_instance_for_backup` signal.
# 5) Through connection A, reap the result of the sent statement.
# 6) Check that the slave stopped and re-start it.
#
# TC2. Lock instance for backup while `STOP REPLICA SQL_THREAD` executes
# --------------------------------------------------------------------
# 1) Open two different connections, A and B to the slave node and set
#    `stop_replica_dont_release_backup_lock` debug sync point in both.
# 2) Through connection A, send a `STOP REPLICA SQL_THREAD` statement to the
#    server that, after acquiring the BACKUP lock, will wait for a
#    `tried_to_lock_instance_for_backup` signal in the
#    `stop_replica_dont_release_backup_lock` sync point.
# 3) Through connection B, execute a `LOCK INSTANCE FOR BACKUP` statement and
#    expect a `ER_LOCK_WAIT_TIMEOUT` error.
# 4) Through connection B, send the `tried_to_lock_instance_for_backup` signal.
# 5) Through connection A, reap the result of the sent statement.
# 6) Check that the slave stopped and re-start it.
#
# ==== References ====
#
# BUG#29386503 STOP SLAVE SQL_THREAD DEADLOCKS IF DONE WHILE HOLDING LOCK
#              INSTANCE FOR BACKUP
#

--source include/rpl/init_source_replica.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc

# Procedure that executes `LOCK INSTANCE FOR BACKUP` while another statement is
# being executed.
#
--write_file $MYSQLTEST_VARDIR/tmp/lock_instance_while_executing.inc PROCEDURE
  if ($statement == '') {
    --die !!!ERROR IN TEST: you must set $statement
  }

  # 1) Open two different connections, A and B to the slave node and set
  #    `stop_replica_dont_release_backup_lock` debug sync point in both.
  --source include/rpl/connection_replica.inc
  SET DEBUG = "+d,stop_replica_dont_release_backup_lock";
  --source include/rpl/connection_replica1.inc
  CALL mtr.add_suppression("Lock wait timeout exceeded; try restarting transaction");
  SET DEBUG = "+d,stop_replica_dont_release_backup_lock";

  # 2) Through connection A, send $statement to the server that, after acquiring
  #    the BACKUP lock, will wait for a `tried_to_lock_instance_for_backup`
  #    signal in the `stop_replica_dont_release_backup_lock` sync point.
  --source include/rpl/connection_replica.inc
  --send_eval $statement

  # 3) Through connection B, execute a `LOCK INSTANCE FOR BACKUP` statement and
  #    expect a `ER_LOCK_WAIT_TIMEOUT` error.
  --source include/rpl/connection_replica1.inc
  SET DEBUG_SYNC = "now WAIT_FOR replica_acquired_backup_lock";
  --error ER_LOCK_WAIT_TIMEOUT
  LOCK INSTANCE FOR BACKUP;

  # 4) Through connection B, send the `tried_to_lock_instance_for_backup` signal.
  SET DEBUG_SYNC = "now SIGNAL tried_to_lock_instance_for_backup";

  # 5) Through connection A, reap the result of the sent statement.
  --source include/rpl/connection_replica.inc
  --reap

  # 6) Check that the slave stopped and re-start it.
  START REPLICA;

  --source include/rpl/connection_replica.inc
  SET DEBUG = "-d,stop_replica_dont_release_backup_lock";
  --source include/rpl/connection_replica1.inc
  SET DEBUG = "-d,stop_replica_dont_release_backup_lock";
#END OF
PROCEDURE

--echo #
--echo # TC1. Lock instance for backup while `STOP REPLICA` executes
--echo #
--let $statement = STOP REPLICA
--source $MYSQLTEST_VARDIR/tmp/lock_instance_while_executing.inc

--echo #
--echo # TC2. Lock instance for backup while `STOP REPLICA SQL_THREAD` executes
--echo #
--let $statement = STOP REPLICA SQL_THREAD
--source $MYSQLTEST_VARDIR/tmp/lock_instance_while_executing.inc

# Clean up
--remove_file $MYSQLTEST_VARDIR/tmp/lock_instance_while_executing.inc
--source include/rpl/deinit.inc
