--source include/not_group_replication_plugin.inc
--source include/have_binlog_format_row.inc
--source include/rpl/init_source_replica.inc

###############################################################################
#   BUG#21107331 RESET SLAVE ALL DOESN'T RESETS SLAVE_RETRIED_TRANSACTIONS
#   BUG#21111229 RESET SLAVE ALL BEHAVES DIFFERENT FOR DEFAULT AND
#                NON-DEFAULT CHANNELS
#
#   Verify that count_transactions_retries is reset to 0 after RESET REPLICA ALL
#   Step 1. Generates an innodb row lock timeout to increase
#           count_transactions_retries
#   Step 2. RESET REPLICA
#   Step 3. check count_transactions_retries is 0
###############################################################################

CREATE TABLE t1 (c1 INT KEY) ENGINE=InnoDB;

# It is used by the CHANGE REPLICATION SOURCE below
--source include/rpl/save_binlog_file_position.inc

--source include/rpl/sync_to_replica.inc

--source include/rpl/stop_replica.inc
SET @saved_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET GLOBAL replica_transaction_retries = 1;
SET GLOBAL innodb_lock_wait_timeout = 1;
--source include/rpl/start_replica.inc

# It blocks slave applier which applies INSERT INTO t1 VALUES(1);
BEGIN;
INSERT INTO t1 VALUES(1);

--source include/rpl/connection_source.inc
INSERT INTO t1 VALUES(1);

# Slave sql stops after retrying the transaction 1 times.
--source include/rpl/connection_replica1.inc
--let $slave_sql_errno=1205
--source include/rpl/wait_for_applier_error.inc
--source include/rpl/stop_receiver.inc

# The warnings are generated by MTS
CALL mtr.add_suppression(".*worker thread retried transaction 1 time.*");
CALL mtr.add_suppression(".*The replica coordinator and worker threads are "
                         "stopped, possibly leaving data in inconsistent.*");
--let $assert_text= count_transactions_retries should be greater than 0
--let $assert_status_name= count_transactions_retries
--let $assert_status_value= 0
--let $assert_comparator= >=
--let $table=replication_applier_status
--source include/rpl/pfs_assert_status.inc

RESET REPLICA ALL;

--let $assert_text= count_transactions_retries should be 0
--let $assert_status_name= count_transactions_retries
--let $assert_status_value= 0
--let $table= replication_applier_status
--source include/rpl/pfs_assert_status.inc

--source include/rpl/connection_replica.inc
# rollback the INSERT which is used to block slave applier.
ROLLBACK;

--echo #
--echo # Cleanup
--echo #
SET GLOBAL replica_transaction_retries = @saved_replica_transaction_retries;
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;

--replace_result $binlog_file BINLOG_FILE $binlog_position BINLOG_POS $MASTER_MYPORT SOURCE_PORT
eval CHANGE REPLICATION SOURCE TO SOURCE_LOG_FILE = "$binlog_file", SOURCE_LOG_POS = $binlog_position,
     SOURCE_USER='root', SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT;
--source include/rpl/start_replica.inc

--source include/rpl/connection_source.inc
DROP TABLE t1;
--source include/rpl/deinit.inc
