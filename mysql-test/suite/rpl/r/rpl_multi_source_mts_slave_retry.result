# Create channel_1 to server_1 from server_2(slave)
include/rpl/init.inc [topology=1->2]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
#
# Insert data on the master
#
[connection server_1]
CREATE TABLE t1( a int unique);
# sync data to the slave
[connection server_1]
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
# stop replica
include/rpl/stop_all_replicas.inc
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET @saved_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;
#
# Set the variables needed for this test
#
SET GLOBAL replica_transaction_retries=10;
SET GLOBAL innodb_lock_wait_timeout=2;
#start replica
include/rpl/start_all_replicas.inc
#
# Lock the rows of the table t1
#
BEGIN;
INSERT INTO t1 VALUES(1);
#
# Insert the rows on the same table on master
#
[connection server_1]
INSERT INTO t1 VALUES(1);
#
# On slave, check that this transaction from the master has been retried.
#
[connection server_2]
# Release the lock.
ROLLBACK;
# Now sync with master on channel_1
[connection server_1]
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
# check that data shows the value 1
SELECT * FROM t1;
a
1
#cleanup
[connection server_1]
DROP TABLE t1;
include/rpl/sync_to_replica.inc [FOR CHANNEL 'channel_1']
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET GLOBAL replica_transaction_retries = @saved_replica_transaction_retries;
include/rpl/deinit.inc
RESET REPLICA ALL FOR CHANNEL 'channel_1';
