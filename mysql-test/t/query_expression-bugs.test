
--echo #
--echo # Bug#35686098 Assertion `n < size()' failed in Element_type& Mem_root_array_YY
--echo #

# At report time, the query used crash, later due to "commit 88d716a -
# Bug#35813111" it no longer failed, but fell back on tmp table
# de-duplication.  With this patch, it spills to disk - normal
# behavior since default buffer (set_operations_buffer_size) is too
# small for the data - but no longer falls back on tmp table
# de-duplication.

CREATE TABLE t1(
  c1 TEXT,
  c2 CHAR(255) DEFAULT NULL
);
LOAD DATA INFILE '../../std_data/t1_2cols.csv' INTO TABLE t1 FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';
ANALYZE TABLE t1;

SET optimizer_trace="enabled=on";

let $show_trace=
   SELECT JSON_PRETTY(JSON_EXTRACT(trace,"$.steps[*].join_execution"))
   FROM information_schema.optimizer_trace;

let $pattern=$elide_trace_costs_and_rows;
# elide some sorting statistics:
let $pattern=$pattern /num_initial_chunks_spilled_to_disk\": [0-9.]+/num_initial_chunks_spilled_to_disk\": "elided"/;
let $pattern=$pattern /peak_memory_used\": [0-9.]+/peak_memory_used\": "elided"/;
let $pattern=$pattern /num_rows_estimate\": [0-9.]+/num_rows_estimate\": "elided"/;
# Allow both 4 and 8 chunk files: the latter is seen with ASAN
let $pattern=$pattern /chunk files\": [48]/chunk files\": "elided"/;


SELECT MAX( c1 ) OVER ( ORDER BY c2 ROWS CURRENT ROW ) FROM t1
INTERSECT DISTINCT
SELECT "can't" OR 447938560 FROM t1;

--replace_regex $pattern
--skip_if_hypergraph
eval $show_trace;

SET optimizer_trace=default;

DROP TABLE t1;

--echo #
--echo # Bug#35970620 hash_set_operations optimizer off assertion error
--echo #

# Prepare with hashing ON

PREPARE p0 FROM '(SELECT 3 AS three) EXCEPT (SELECT 1)';
SET SESSION optimizer_switch = 'hash_set_operations=off';
SET SESSION optimizer_trace = 'enabled=on';
EXECUTE p0;

SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=on';
EXECUTE p0;

SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=off';
EXECUTE p0;

SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=on';
EXECUTE p0;

SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

# Prepare with hashing OFF

SET SESSION optimizer_switch = 'hash_set_operations=off';
PREPARE p0 FROM '(SELECT 3 AS three) EXCEPT (SELECT 1)';
SET SESSION optimizer_switch = 'hash_set_operations=on';
EXECUTE p0;

SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=off';

EXECUTE p0;
SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=on';

EXECUTE p0;
SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

SET SESSION optimizer_switch = 'hash_set_operations=off';

EXECUTE p0;
SELECT JSON_PRETTY(JSON_EXTRACT(trace,
    '$.steps[*].join_execution.steps[*]."materialize for except"')) AS j
FROM information_schema.OPTIMIZER_TRACE;

DROP PREPARE p0;

SET SESSION optimizer_trace = 'enabled=default';
SET SESSION optimizer_switch = 'hash_set_operations=default';
