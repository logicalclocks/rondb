# syntax=docker/dockerfile:1.3-labs

# This Dockerfile is used for x86 production builds. Oracle Linux 7 comes with glibc 2.17,
# which is supported by all Linux distributions used by Hopsworks: CentOS >=7 and Ubuntu >=16.
# Glibc tends to be backwards compatible, but not forwards compatible.
# Using this file for arm64 requires too many modifications.

ARG USER=mysql
ARG UID=1000
ARG GID=1000

FROM oraclelinux:7-slim as rondb-build-dependencies

ARG USER
ARG UID
ARG GID
ARG CMAKE_VERSION=3.23.2
ARG OPEN_SSL_VERSION=1.1.1o
ARG BOOST_VERSION_MAJOR=1
ARG BOOST_VERSION_MINOR=73
ARG BOOST_VERSION_PATCH=0

# Default build threads to 1; max is defined in Docker config (run `nproc` in Docker container)
ARG BUILD_THREADS
ENV THREADS_ARG=${BUILD_THREADS:-1}

# RonDB 21.04 requires gcc/g++ 9/10 for amd64/arm64 respectively.
# We will not remove the default installation, but change the default
# one using software collections (scl).
# To use the required version, the command
#   >> source scl_source enable devtoolset-9
# is run in the given RUN statement. Unfortunately, this command
# does not persist between RUN statements.
ARG TARGETARCH
RUN if [ "$TARGETARCH" != "amd64" ]; then \
        echo "This Dockerfile only supports amd64" && exit 1; \
    fi

COPY <<-"EOF" /etc/yum/repos.d/epel-yum-ol7.repo
[ol7_epel]
name=Oracle Linux $releasever EPEL ($basearch)
baseurl=http://yum.oracle.com/repo/OracleLinux/OL7/developer_EPEL/$basearch/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
gpgcheck=1
enabled=1
EOF

RUN --mount=type=cache,target=/var/cache/yum,id=oracle7-yum \
    yum -y update \
    && yum -y install \
    wget make git which perl-core openldap-devel \
    bison krb5-server krb5-workstation krb5-devel \
    numactl numactl-libs numactl-devel \
    patchelf ncurses-devel java-1.8.0-openjdk-devel automake \
    zlib-devel scl-utils oracle-softwarecollection-release-el7 \
    golang maven vim pigz \
    && yum-config-manager -y --enable "ol7_optional_latest" \
    && yum -y install devtoolset-9

# Creating a cache dir for downloads to avoid redownloading
ENV DOWNLOADS_CACHE_DIR=/tmp/downloads
RUN mkdir $DOWNLOADS_CACHE_DIR

# Installing Boost
ENV BOOST_VERSION=${BOOST_VERSION_MAJOR}.${BOOST_VERSION_MINOR}.${BOOST_VERSION_PATCH}
ENV BOOST_V_UNDERSCORE=${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}_${BOOST_VERSION_PATCH}
ENV BOOST_LABEL="boost_${BOOST_V_UNDERSCORE}"
ENV BOOST_TARBALL="${BOOST_LABEL}.tar.gz"
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
        https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_TARBALL} \
    && tar xzf $DOWNLOADS_CACHE_DIR/${BOOST_TARBALL} -C .
# Important env variable for RonDB compilation
ENV BOOST_ROOT="/${BOOST_LABEL}"

# RonDB 21.04 requires OpenSSL version 1.1.1m and will look for 
# it in $OPENSSL_ROOT. We will not overwrite the default OpenSSL, but 
# just install the specified version.
# Commands are from https://linuxpip.org/install-openssl-linux/
ENV OPENSSL_ROOT=/usr/local/ssl
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
        https://www.openssl.org/source/openssl-${OPEN_SSL_VERSION}.tar.gz \
    && tar xf $DOWNLOADS_CACHE_DIR/openssl-${OPEN_SSL_VERSION}.tar.gz -C . \
    && cd openssl-${OPEN_SSL_VERSION} \
    && ./config --prefix=$OPENSSL_ROOT --openssldir=$OPENSSL_ROOT shared zlib \
    && make -j$THREADS_ARG \
    && make install \
    && echo "$OPENSSL_ROOT/lib" >> /etc/ld.so.conf.d/openssl-${OPEN_SSL_VERSION}.conf \
    && ldconfig -v \
    && cd .. \
    && rm -rf openssl-${OPEN_SSL_VERSION}
    # Could also run `make test`
    # `make install` places shared libraries into $OPENSSL_ROOT

# Installing CMake
# CMake will look for $OPENSSL_ROOT_DIR
ENV OPENSSL_ROOT_DIR=$OPENSSL_ROOT
RUN --mount=type=cache,target=$DOWNLOADS_CACHE_DIR \
    source scl_source enable devtoolset-9 \
    && wget -N --progress=bar:force -P $DOWNLOADS_CACHE_DIR \
        https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz \
    && tar xzf $DOWNLOADS_CACHE_DIR/cmake-$CMAKE_VERSION.tar.gz -C . \
    && cd cmake-${CMAKE_VERSION} \
    && ./bootstrap --prefix=/usr/local \
    && make -j$THREADS_ARG \
    && make install \
    && cd .. \
    && rm -r cmake-${CMAKE_VERSION}

RUN groupadd ${USER} --gid ${GID} \
    && useradd -ms /bin/bash ${USER} --uid ${UID} --gid ${GID}

WORKDIR /home/$USER

RUN echo "source scl_source enable devtoolset-9" >> .bashrc

# For the deployment of Java artifacts to the Maven repository
COPY <<-"EOF" .m2/settings.xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
        <server>
            <id>${JenkinsHops.RepoID}</id>
            <username>${JenkinsHops.User}</username>
            <filePermissions>664</filePermissions>
            <directoryPermissions>775</directoryPermissions>
            <password>${JenkinsHops.Password}</password>
        </server>
    </servers>
</settings>
EOF

RUN chown $USER:$USER -R .

USER $USER:$USER

# See https://stackoverflow.com/a/51264575/9068781 for conditional envs
FROM rondb-build-dependencies as build-all
ARG UID
ARG GID

ARG DEPLOY_TO_REPO
ENV DEPLOY_ARG=${DEPLOY_TO_REPO:+-d}

ARG RELEASE_TARBALL
ENV RELEASE_ARG=${RELEASE_TARBALL:+-r}

RUN mkdir rondb-src rondb-bin rondb-tarball
RUN --mount=type=bind,source=.,target=rondb-src \
    --mount=type=cache,target=rondb-bin,uid=$UID,gid=$GID,id=oracle7-rondb2104-bin \
    source scl_source enable devtoolset-9 \
    && rondb-src/build_scripts/release_scripts/build_all.sh \
    -s rondb-src \
    -b rondb-bin \
    -o rondb-tarball \
    -j $THREADS_ARG \
    $DEPLOY_ARG $RELEASE_ARG

# run with --output <output-folder>
FROM scratch AS get-package-all
ARG USER
COPY --from=build-all /home/$USER/rondb-tarball .
